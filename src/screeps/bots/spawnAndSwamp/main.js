/* Generated by the Nim Compiler v1.6.12 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI486539274 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1006632984 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1006632985 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1006632986 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1006632973 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1006632987 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1006632974 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1056964677 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1006632966 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1006632983 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1006632970 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1006632991 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1006632978 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1006632994 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1006632993 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1006632980 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1056964642 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI1006632991 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "type", len: 0, typ: NTI33554440, name: "type", sons: null}, 
{kind: 1, offset: "hits", len: 0, typ: NTI33554456, name: "hits", sons: null}]};
NTI1006632991.node = NNI1006632991;
NTI1006632978.base = NTI1006632991;
NTI1006632994.base = NTI1006632978;
var NNI1006632983 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1006632983.node = NNI1006632983;
NTI1006632970.base = NTI1006632983;
var NNI1006632993 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "body", len: 0, typ: NTI1006632994, name: "body", sons: null}, 
{kind: 1, offset: "fatigue", len: 0, typ: NTI33554456, name: "fatigue", sons: null}, 
{kind: 1, offset: "hits", len: 0, typ: NTI33554456, name: "hits", sons: null}, 
{kind: 1, offset: "hitsMax", len: 0, typ: NTI33554456, name: "hitsMax", sons: null}, 
{kind: 1, offset: "my", len: 0, typ: NTI33554466, name: "my", sons: null}, 
{kind: 1, offset: "store", len: 0, typ: NTI1006632970, name: "store", sons: null}]};
NTI1006632993.node = NNI1006632993;
var NNI1006632966 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "exists", len: 0, typ: NTI33554466, name: "exists", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI33554456, name: "id", sons: null}, 
{kind: 1, offset: "ticksToDecay", len: 0, typ: NTI33554456, name: "ticksToDecay", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI33554456, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI33554456, name: "y", sons: null}]};
NTI1006632966.node = NNI1006632966;
NTI1006632966.base = NTI33555083;
NTI1006632993.base = NTI1006632966;
NTI1006632980.base = NTI1006632993;
NTI1056964642.base = NTI1006632980;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;
var NNI1006632986 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "creep", len: 0, typ: NTI1006632980, name: "creep", sons: null}, 
{kind: 1, offset: "needTime", len: 0, typ: NTI33554456, name: "needTime", sons: null}, 
{kind: 1, offset: "remainingTime", len: 0, typ: NTI33554456, name: "remainingTime", sons: null}]};
NTI1006632986.node = NNI1006632986;
NTI1006632973.base = NTI1006632986;
var NNI1006632987 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "store", len: 0, typ: NTI1006632970, name: "store", sons: null}, 
{kind: 1, offset: "spawning", len: 0, typ: NTI1006632973, name: "spawning", sons: null}]};
NTI1006632987.node = NNI1006632987;
var NNI1006632985 = {kind: 1, offset: "my", len: 0, typ: NTI33554466, name: "my", sons: null};
NTI1006632985.node = NNI1006632985;
var NNI1006632984 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "hits", len: 0, typ: NTI33554456, name: "hits", sons: null}, 
{kind: 1, offset: "hitsMax", len: 0, typ: NTI33554456, name: "hitsMax", sons: null}]};
NTI1006632984.node = NNI1006632984;
NTI1006632984.base = NTI1006632966;
NTI1006632985.base = NTI1006632984;
NTI1006632987.base = NTI1006632985;
NTI1006632974.base = NTI1006632987;
NTI1056964677.base = NTI1006632974;
NTI486539274.base = NTI33554440;

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}
        var workerBody_486539277 = ["carry", "carry", "move"];
          var healerBody_486539282 = ["heal", "move", "move"];
            var combatBody_486539287 = ["attack", "attack", "move", "move", "move"];

function subInt(a_33556944, b_33556945) {
        var result = a_33556944 - b_33556945;
    checkOverflowInt(result);
    return result;
  

  
}
var objectID_687866018 = [0];
/// <reference path="./node_modules/@types/screeps-arena/game/constants.d.ts" />
/// <reference path="./node_modules/@types/screeps-arena/game/index.d.ts" />
/// <reference path="./node_modules/@types/screeps-arena/game/path-finder.d.ts" />
/// <reference path="./node_modules/@types/screeps-arena/game/utils.d.ts" />
/// <reference path="./node_modules/@types/screeps-arena/game/visual.d.ts" />

import * as gameUtil from 'game/utils';
import * as gameVisual from 'game/visual';
import * as gamePathFinder from 'game/path-finder';
import * as game from 'game';
import * as arena from 'arena';

import { 
  Creep, Source, StructureContainer, StructureTower, StructureSpawn,
  ConstructionSite
 } from 'game/prototypes';
// import { Flag } from 'arena/prototypes';

var workers_486539293 = [[]];
var combats_486539298 = [[]];
var healers_486539303 = [[]];
var combatStagingArea_486539304 = [null];
var doAttack_486539305 = [false];

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_352321539(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_352321539(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_352321539(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_486539675 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539675 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_486539675;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_486539675 = addInt(i_486539675, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_352321539(x_352321540) {
  var result_352321541 = [[]];

    addInt_251658457(result_352321541, 0, x_352321540);

  return result_352321541[0];

}

function getAllCreeps_1040187394() {
  var result_1040187395 = [];

      return gameUtil.getObjectsByPrototype(Creep);
  

  return result_1040187395;

}

function getAllSpawns_1040187402() {
  var result_1040187403 = [];

      return gameUtil.getObjectsByPrototype(StructureSpawn);
  

  return result_1040187403;

}

function newSeq_1056964661(len_1056964663) {
  var result_1056964664 = [];

    result_1056964664 = new Array(len_1056964663); for (var i = 0 ; i < len_1056964663 ; ++i) { result_1056964664[i] = null; }
  return result_1056964664;

}

function filter_1056964655(s_1056964657, pred_1056964659) {
  var result_1056964660 = [];

    result_1056964660 = nimCopy(null, newSeq_1056964661(0), NTI1056964642);
    Label1: do {
      var i_1056964695 = 0;
      var colontmp__486539678 = 0;
      colontmp__486539678 = (s_1056964657).length;
      var i_486539679 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539679 < colontmp__486539678)) break Label3;
            i_1056964695 = i_486539679;
            if (pred_1056964659(s_1056964657[chckIndx(i_1056964695, 0, (s_1056964657).length - 1)])) {
            result_1056964660.push(s_1056964657[chckIndx(i_1056964695, 0, (s_1056964657).length - 1)]);;
            }
            
            i_486539679 = addInt(i_486539679, 1);
          }
      } while (false);
    } while (false);

  return result_1056964660;

}

function newSeq_1056964705(len_1056964707) {
  var result_1056964708 = [];

    result_1056964708 = new Array(len_1056964707); for (var i = 0 ; i < len_1056964707 ; ++i) { result_1056964708[i] = null; }
  return result_1056964708;

}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function debugPrintCounts_1056964612() {
    
function HEX3Aanonymous_1056964647(c_1056964650) {
      var result_1056964653 = false;

        result_1056964653 = c_1056964650.my;

      return result_1056964653;

    }

    var currentTick_1056964613 = gameUtil.getTicks();
    rawEcho(makeNimstrLit("Current tick: "), HEX24_352321539(currentTick_1056964613));
    var creeps_1056964614 = getAllCreeps_1040187394();
    rawEcho(makeNimstrLit("found creeps: "), HEX24_352321539((creeps_1056964614).length));
    var spawns_1056964619 = getAllSpawns_1040187402();
    rawEcho(makeNimstrLit("found spawns: "), HEX24_352321539((spawns_1056964619).length));
    var myCreeps_1056964700 = filter_1056964655(creeps_1056964614, HEX3Aanonymous_1056964647);
    rawEcho(makeNimstrLit("my creeps: "), HEX24_352321539((myCreeps_1056964700).length));
    var resultHEX60gensym0_1056964731 = newSeq_1056964705(0);
    Label1: do {
      var it_1056964752 = null;
      var i_486539662 = 0;
      var L_486539663 = (spawns_1056964619).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539662 < L_486539663)) break Label3;
            it_1056964752 = spawns_1056964619[chckIndx(i_486539662, 0, (spawns_1056964619).length - 1)];
            if ((it_1056964752.my == true)) {
            resultHEX60gensym0_1056964731.push(it_1056964752);;
            }
            
            i_486539662 = addInt(i_486539662, 1);
            if (!(((spawns_1056964619).length == L_486539663))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    var mySpawns_1056964757 = nimCopy(null, resultHEX60gensym0_1056964731, NTI1056964677);
    Label4: do {
      var s_1056964761 = null;
      var i_486539666 = 0;
      var L_486539667 = (mySpawns_1056964757).length;
      Label5: do {
          Label6: while (true) {
          if (!(i_486539666 < L_486539667)) break Label6;
            s_1056964761 = mySpawns_1056964757[chckIndx(i_486539666, 0, (mySpawns_1056964757).length - 1)];
            rawEcho(makeNimstrLit("spawn ID: "), HEX24_352321539(s_1056964761.id));
            rawEcho(makeNimstrLit("spawn capacity: "), HEX24_352321539(s_1056964761.store.getCapacity("energy")));
            rawEcho(makeNimstrLit("spawn free capacity: "), HEX24_352321539(s_1056964761.store.getFreeCapacity("energy")));
            rawEcho(makeNimstrLit("spawn used capacity: "), HEX24_352321539(s_1056964761.store.getUsedCapacity("energy")));
            i_486539666 = addInt(i_486539666, 1);
            if (!(((mySpawns_1056964757).length == L_486539667))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);

  
}

function getAllContainers_1040187398() {
  var result_1040187399 = [];

      return gameUtil.getObjectsByPrototype(StructureContainer);
  

  return result_1040187399;

}

function HEX24_1040187408(p_1040187409) {
  var result_1040187410 = [];

  BeforeRet: do {
    result_1040187410 = nimCopy(null, (HEX24_352321539(p_1040187409.x) || []).concat(makeNimstrLit(",") || [],HEX24_352321539(p_1040187409.y) || []), NTI33554439);
    break BeforeRet;
  } while (false);

  return result_1040187410;

}

function addQuoted_486539440(s_486539442, s_486539442_Idx, x_486539443) {
    addInt_251658457(s_486539442, s_486539442_Idx, x_486539443);

  
}

function HEX24_486539420(x_486539422) {
  var result_486539423 = [[]];

    result_486539423[0] = nimCopy(null, makeNimstrLit("("), NTI33554439);
    var count_486539429 = 0;
    if ((0 < count_486539429)) {
    result_486539423[0].push.apply(result_486539423[0], makeNimstrLit(", "));;
    }
    
    result_486539423[0].push.apply(result_486539423[0], makeNimstrLit("error"));;
    result_486539423[0].push.apply(result_486539423[0], makeNimstrLit(": "));;
    count_486539429 += 1;
    addQuoted_486539440(result_486539423, 0, x_486539422.error);
    result_486539423[0].push.apply(result_486539423[0], makeNimstrLit(")"));;

  return result_486539423[0];

}

function toFloat_33556001(i_33556002) {
  var result_33556003 = 0.0;

    result_33556003 = i_33556002;

  return result_33556003;

}

function HEX2F_33557575(x_33557576, y_33557577) {
  var result_33557578 = 0.0;

    result_33557578 = (toFloat_33556001(x_33557576) / toFloat_33556001(y_33557577));

  return result_33557578;

}

function getMostHurtCreep_1073741826(creeps_1073741827) {
  var result_1073741828 = null;

  BeforeRet: do {
    var creep_1073741829 = creeps_1073741827[chckIndx(0, 0, (creeps_1073741827).length - 1)];
    var delta_1073741830 = subInt(creep_1073741829.hitsMax, creep_1073741829.hits);
    Label1: do {
      var c_1073741851 = null;
      var i_486539682 = 0;
      var L_486539683 = (creeps_1073741827).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539682 < L_486539683)) break Label3;
            c_1073741851 = creeps_1073741827[chckIndx(i_486539682, 0, (creeps_1073741827).length - 1)];
            var d_1073741852 = subInt(c_1073741851.hitsMax, c_1073741851.hits);
            if ((delta_1073741830 < d_1073741852)) {
            creep_1073741829 = c_1073741851;
            delta_1073741830 = d_1073741852;
            }
            
            i_486539682 = addInt(i_486539682, 1);
            if (!(((creeps_1073741827).length == L_486539683))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    result_1073741828 = creep_1073741829;
    break BeforeRet;
  } while (false);

  return result_1073741828;

}

function spawnAndSwampLoop() {
    var Temporary7;
    
function doSpawning_486539384() {
          var Temporary1;

      BeforeRet: do {
        rawEcho(makeNimstrLit("spawning block"));
        if (!((mySpawn_486539349.spawning == null))) {
        break BeforeRet;
        }
        
        if (((workers_486539293[0]).length < 3)) {
        var spawnResult_486539391 = mySpawn_486539349.spawnCreep(workerBody_486539277);
        if ((spawnResult_486539391.object == null)) {
        rawEcho(makeNimstrLit("Spawn error: "), HEX24_486539420(spawnResult_486539391.error));
        }
        else {
        workers_486539293[0].push(spawnResult_486539391.object);;
        }
        
        }
        else {
          var currentRatio_486539455 = HEX2F_33557575((healers_486539303[0]).length, (combats_486539298[0]).length);
          var doHealer_486539456 = (currentRatio_486539455 < 0.2);
          if (doHealer_486539456) {
          Temporary1 = healerBody_486539282;
          }
          else {
          Temporary1 = combatBody_486539287;
          }
          
          var body_486539457 = nimCopy(null, Temporary1, NTI486539274);
          var spawnResult_486539458 = mySpawn_486539349.spawnCreep(body_486539457);
          if ((spawnResult_486539458.object == null)) {
          rawEcho(makeNimstrLit("Spawn error: "), HEX24_486539420(spawnResult_486539458.error));
          }
          else {
            if (doHealer_486539456) {
            healers_486539303[0].push(spawnResult_486539458.object);;
            }
            else {
            combats_486539298[0].push(spawnResult_486539458.object);;
            }
            
          }
          
        }
        
      } while (false);

      
    }
          var Temporary23;

    debugPrintCounts_1056964612();
    var spawns_486539330 = getAllSpawns_1040187402();
    var resultHEX60gensym0_486539335 = newSeq_1056964705(0);
    Label1: do {
      var it_486539339 = null;
      var i_486539628 = 0;
      var L_486539629 = (spawns_486539330).length;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539628 < L_486539629)) break Label3;
            it_486539339 = spawns_486539330[chckIndx(i_486539628, 0, (spawns_486539330).length - 1)];
            if ((it_486539339.my == true)) {
            resultHEX60gensym0_486539335.push(it_486539339);;
            }
            
            i_486539628 = addInt(i_486539628, 1);
            if (!(((spawns_486539330).length == L_486539629))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    var mySpawns_486539344 = nimCopy(null, resultHEX60gensym0_486539335, NTI1056964677);
    if (((mySpawns_486539344).length == 0)) {
    raiseException({message: makeNimstrLit("No spawns found!"), parent: null, m_type: NTI33555112, name: null, trace: [], up: null}, "Exception");
    }
    
    var mySpawn_486539349 = mySpawns_486539344[chckIndx(0, 0, (mySpawns_486539344).length - 1)];
    var containers_486539350 = getAllContainers_1040187398();
    var creeps_486539351 = getAllCreeps_1040187394();
    var resultHEX60gensym2_486539356 = newSeq_1056964661(0);
    Label4: do {
      var it_486539360 = null;
      var i_486539633 = 0;
      var L_486539634 = (creeps_486539351).length;
      Label5: do {
          Label6: while (true) {
          if (!(i_486539633 < L_486539634)) break Label6;
            it_486539360 = creeps_486539351[chckIndx(i_486539633, 0, (creeps_486539351).length - 1)];
            if ((it_486539360.my == true)) {
            resultHEX60gensym2_486539356.push(it_486539360);;
            }
            
            i_486539633 = addInt(i_486539633, 1);
            if (!(((creeps_486539351).length == L_486539634))) {
            failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while (false);
    } while (false);
    var myCreeps_486539365 = nimCopy(null, resultHEX60gensym2_486539356, NTI1056964642);
    if ((combatStagingArea_486539304[0] == null)) {
    var random_486539369 = Math.random();
    if ((random_486539369 < 0.5)) {
    Temporary7 = -5;
    }
    else {
    Temporary7 = 5;
    }
    
    var y_486539370 = Temporary7;
    combatStagingArea_486539304[0] = {x: addInt(mySpawn_486539349.x, 2), y: addInt(mySpawn_486539349.y, y_486539370)};
    rawEcho(makeNimstrLit("Combat staging area: "), HEX24_1040187408(combatStagingArea_486539304[0]));
    }
    
    var workerCost_486539375 = 300;
    var combatCost_486539379 = 500;
    var healerCost_486539383 = 300;
    doSpawning_486539384();
    rawEcho(makeNimstrLit("worker block"));
    Label8: do {
      Label9: do {
        var c_486539489 = null;
        var i_486539638 = 0;
        var L_486539639 = (workers_486539293[0]).length;
        Label10: do {
            Label11: while (true) {
            if (!(i_486539638 < L_486539639)) break Label11;
              c_486539489 = workers_486539293[0][chckIndx(i_486539638, 0, (workers_486539293[0]).length - 1)];
              Label12: do {
                if ((0 < c_486539489.store.getUsedCapacity("energy"))) {
                var res_486539490 = c_486539489.transfer(mySpawn_486539349, "energy");
                if ((res_486539490 == -9)) {
                var _ = c_486539489.moveTo(mySpawn_486539349);
                }
                
                break Label12;
                }
                
                var closestContainer_486539500 = c_486539489.findClosestByPath(containers_486539350);
                if ((closestContainer_486539500 == null)) {
                rawEcho(makeNimstrLit("No containers found!"));
                break Label12;
                }
                
                var res_486539504 = c_486539489.withdraw(closestContainer_486539500, "energy");
                if ((res_486539504 == -9)) {
                var _ = c_486539489.moveTo(closestContainer_486539500);
                }
                
              } while (false);
              i_486539638 = addInt(i_486539638, 1);
              if (!(((workers_486539293[0]).length == L_486539639))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
    } while (false);
    rawEcho(makeNimstrLit("combat block"));
    Label13: do {
      if (!(doAttack_486539305[0])) {
      Label14: do {
        var c_486539513 = null;
        var i_486539642 = 0;
        var L_486539643 = (combats_486539298[0]).length;
        Label15: do {
            Label16: while (true) {
            if (!(i_486539642 < L_486539643)) break Label16;
              c_486539513 = combats_486539298[0][chckIndx(i_486539642, 0, (combats_486539298[0]).length - 1)];
              var _ = c_486539513.moveTo(combatStagingArea_486539304[0]);
              i_486539642 = addInt(i_486539642, 1);
              if (!(((combats_486539298[0]).length == L_486539643))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
      Label17: do {
        var c_486539517 = null;
        var i_486539646 = 0;
        var L_486539647 = (healers_486539303[0]).length;
        Label18: do {
            Label19: while (true) {
            if (!(i_486539646 < L_486539647)) break Label19;
              c_486539517 = healers_486539303[0][chckIndx(i_486539646, 0, (healers_486539303[0]).length - 1)];
              var _ = c_486539517.moveTo(combatStagingArea_486539304[0]);
              i_486539646 = addInt(i_486539646, 1);
              if (!(((healers_486539303[0]).length == L_486539647))) {
              failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
              }
              
            }
        } while (false);
      } while (false);
      if ((5 <= addInt((combats_486539298[0]).length, (healers_486539303[0]).length))) {
      doAttack_486539305[0] = true;
      }
      
      }
      else {
        if (((combats_486539298[0]).length == 0)) {
        rawEcho(makeNimstrLit("No combat units left, stopping attack"));
        doAttack_486539305[0] = false;
        }
        else {
          rawEcho(makeNimstrLit("attack!!"));
          var resultHEX60gensym5_486539531 = newSeq_1056964705(0);
          Label20: do {
            var it_486539535 = null;
            var i_486539650 = 0;
            var L_486539651 = (spawns_486539330).length;
            Label21: do {
                Label22: while (true) {
                if (!(i_486539650 < L_486539651)) break Label22;
                  it_486539535 = spawns_486539330[chckIndx(i_486539650, 0, (spawns_486539330).length - 1)];
                  if ((it_486539535.my == false)) {
                  resultHEX60gensym5_486539531.push(it_486539535);;
                  }
                  
                  i_486539650 = addInt(i_486539650, 1);
                  if (!(((spawns_486539330).length == L_486539651))) {
                  failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while (false);
          } while (false);
          var enemySpawn_486539540 = (Temporary23 = resultHEX60gensym5_486539531, Temporary23)[chckIndx(0, 0, (Temporary23).length - 1)];
          Label24: do {
            var c_486539544 = null;
            var i_486539654 = 0;
            var L_486539655 = (combats_486539298[0]).length;
            Label25: do {
                Label26: while (true) {
                if (!(i_486539654 < L_486539655)) break Label26;
                  c_486539544 = combats_486539298[0][chckIndx(i_486539654, 0, (combats_486539298[0]).length - 1)];
                  var res_486539545 = c_486539544.attack(enemySpawn_486539540);
                  if ((res_486539545 == -9)) {
                  var _ = c_486539544.moveTo(enemySpawn_486539540);
                  }
                  
                  i_486539654 = addInt(i_486539654, 1);
                  if (!(((combats_486539298[0]).length == L_486539655))) {
                  failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while (false);
          } while (false);
          Label27: do {
            var c_486539553 = null;
            var i_486539658 = 0;
            var L_486539659 = (healers_486539303[0]).length;
            Label28: do {
                Label29: while (true) {
                if (!(i_486539658 < L_486539659)) break Label29;
                  c_486539553 = healers_486539303[0][chckIndx(i_486539658, 0, (healers_486539303[0]).length - 1)];
                  var mostHurtHealer_486539554 = getMostHurtCreep_1073741826(healers_486539303[0]);
                  if ((mostHurtHealer_486539554.hits < mostHurtHealer_486539554.hitsMax)) {
                  if ((c_486539553.heal(mostHurtHealer_486539554) == -9)) {
                  var _ = c_486539553.moveTo(mostHurtHealer_486539554);
                  }
                  
                  }
                  else {
                    if ((0 < (combats_486539298[0]).length)) {
                    var mostHurtCombat_486539565 = getMostHurtCreep_1073741826(combats_486539298[0]);
                    if ((c_486539553.heal(mostHurtCombat_486539565) == -9)) {
                    var _ = c_486539553.moveTo(mostHurtCombat_486539565);
                    }
                    
                    }
                    else {
                    rawEcho(makeNimstrLit("No combat units left, to heal"));
                    }
                    
                  }
                  
                  i_486539658 = addInt(i_486539658, 1);
                  if (!(((healers_486539303[0]).length == L_486539659))) {
                  failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                  }
                  
                }
            } while (false);
          } while (false);
        }
        
      }
      
    } while (false);

  
}
export const loop = spawnAndSwampLoop;

