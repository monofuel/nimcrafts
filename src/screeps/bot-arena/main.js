/* Generated by the Nim Compiler v1.6.12 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33555124 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1006632963 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1006632976 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1006632966 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554466 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI33554437 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI33554456 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1006632979 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1006632971 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI1006632981 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI1006632980 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1006632972 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI486539392 = {size: 0, kind: 24, base: null, node: null, finalizer: null};
var NTI33555128 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555130 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555113 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555120 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555122 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555083 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555165 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554439 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI33554440 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555164 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555112 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555164, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554440, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554439, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554439, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null}]};
NTI33555112.node = NNI33555112;
var NNI33555083 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
var NNI33555122 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555122.node = NNI33555122;
var NNI33555120 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555120.node = NNI33555120;
var NNI33555113 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555113.node = NNI33555113;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;
var NNI33555128 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555128.node = NNI33555128;
NTI33555128.base = NTI33555113;
var NNI1006632979 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "type", len: 0, typ: NTI33554440, name: "type", sons: null}, 
{kind: 1, offset: "hits", len: 0, typ: NTI33554456, name: "hits", sons: null}]};
NTI1006632979.node = NNI1006632979;
NTI1006632971.base = NTI1006632979;
NTI1006632981.base = NTI1006632971;
var NNI1006632976 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1006632976.node = NNI1006632976;
NTI1006632966.base = NTI1006632976;
var NNI1006632980 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "body", len: 0, typ: NTI1006632981, name: "body", sons: null}, 
{kind: 1, offset: "fatigue", len: 0, typ: NTI33554437, name: "fatigue", sons: null}, 
{kind: 1, offset: "hits", len: 0, typ: NTI33554456, name: "hits", sons: null}, 
{kind: 1, offset: "hitsMax", len: 0, typ: NTI33554456, name: "hitsMax", sons: null}, 
{kind: 1, offset: "my", len: 0, typ: NTI33554466, name: "my", sons: null}, 
{kind: 1, offset: "store", len: 0, typ: NTI1006632966, name: "store", sons: null}]};
NTI1006632980.node = NNI1006632980;
var NNI1006632963 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "exists", len: 0, typ: NTI33554466, name: "exists", sons: null}, 
{kind: 1, offset: "id", len: 0, typ: NTI33554440, name: "id", sons: null}, 
{kind: 1, offset: "ticksToDecay", len: 0, typ: NTI33554456, name: "ticksToDecay", sons: null}, 
{kind: 1, offset: "x", len: 0, typ: NTI33554456, name: "x", sons: null}, 
{kind: 1, offset: "y", len: 0, typ: NTI33554456, name: "y", sons: null}]};
NTI1006632963.node = NNI1006632963;
NTI1006632963.base = NTI33555083;
NTI1006632980.base = NTI1006632963;
NTI1006632972.base = NTI1006632980;
NTI486539392.base = NTI1006632972;
var NNI33555124 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555124.node = NNI33555124;
NTI33555124.base = NTI33555113;

function makeNimstrLit(c_33556801) {
      var result = [];
  for (var i = 0; i < c_33556801.length; ++i) {
    result[i] = c_33556801.charCodeAt(i);
  }
  return result;
  

  
}

function toJSStr(s_33556807) {
                    var Temporary5;
            var Temporary7;

  var result_33556808 = null;

    var res_33556842 = newSeq_33556825((s_33556807).length);
    var i_33556843 = 0;
    var j_33556844 = 0;
    Label1: do {
        Label2: while (true) {
        if (!(i_33556843 < (s_33556807).length)) break Label2;
          var c_33556845 = s_33556807[i_33556843];
          if ((c_33556845 < 128)) {
          res_33556842[j_33556844] = String.fromCharCode(c_33556845);
          i_33556843 += 1;
          }
          else {
            var helper_33556857 = newSeq_33556825(0);
            Label3: do {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556858 = c_33556845.toString(16);
                  if ((((code_33556858) == null ? 0 : (code_33556858).length) == 1)) {
                  helper_33556857.push("%0");;
                  }
                  else {
                  helper_33556857.push("%");;
                  }
                  
                  helper_33556857.push(code_33556858);;
                  i_33556843 += 1;
                    if (((s_33556807).length <= i_33556843)) Temporary5 = true; else {                      Temporary5 = (s_33556807[i_33556843] < 128);                    }                  if (Temporary5) {
                  break Label3;
                  }
                  
                  c_33556845 = s_33556807[i_33556843];
                }
            } while (false);
++excHandler;
            Temporary7 = framePtr;
            try {
            res_33556842[j_33556844] = decodeURIComponent(helper_33556857.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            framePtr = Temporary7;
            res_33556842[j_33556844] = helper_33556857.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Temporary7;
            }
          }
          
          j_33556844 += 1;
        }
    } while (false);
    if (res_33556842.length < j_33556844) { for (var i = res_33556842.length ; i < j_33556844 ; ++i) res_33556842.push(null); }
               else { res_33556842.length = j_33556844; };
    result_33556808 = res_33556842.join("");

  return result_33556808;

}

function raiseException(e_33556667, ename_33556668) {
    e_33556667.name = ename_33556668;
    if ((excHandler == 0)) {
    unhandledException(e_33556667);
    }
    
    throw e_33556667;

  
}

function mnewString(len_33556893) {
        return new Array(len_33556893);
  

  
}

function addInt(a_33556940, b_33556941) {
        var result = a_33556940 + b_33556941;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_33557189, a_33557190, b_33557191) {
      var Temporary1;

  var result_33557192 = 0;

  BeforeRet: do {
      if (!(a_33557190 <= i_33557189)) Temporary1 = false; else {        Temporary1 = (i_33557189 <= b_33557191);      }    if (Temporary1) {
    result_33557192 = i_33557189;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_33557192;

}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557140, src_33557141, ti_33557142) {
  var result_33557151 = null;

    switch (ti_33557142.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557131(ti_33557142))) {
      result_33557151 = src_33557141;
      }
      else {
        result_33557151 = [src_33557141[0], src_33557141[1]];
      }
      
      break;
    case 19:
            if (dest_33557140 === null || dest_33557140 === undefined) {
        dest_33557140 = {};
      }
      else {
        for (var key in dest_33557140) { delete dest_33557140[key]; }
      }
      for (var key in src_33557141) { dest_33557140[key] = src_33557141[key]; }
      result_33557151 = dest_33557140;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557142.base == null))) {
      result_33557151 = nimCopy(dest_33557140, src_33557141, ti_33557142.base);
      }
      else {
      if ((ti_33557142.kind == 17)) {
      result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {m_type: ti_33557142} : dest_33557140;
      }
      else {
        result_33557151 = (dest_33557140 === null || dest_33557140 === undefined) ? {} : dest_33557140;
      }
      }
      nimCopyAux(result_33557151, src_33557141, ti_33557142.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_33557141 === null) {
        result_33557151 = null;
      }
      else {
        if (dest_33557140 === null || dest_33557140 === undefined || dest_33557140.length != src_33557141.length) {
          dest_33557140 = new Array(src_33557141.length);
        }
        result_33557151 = dest_33557140;
        for (var i = 0; i < src_33557141.length; ++i) {
          result_33557151[i] = nimCopy(result_33557151[i], src_33557141[i], ti_33557142.base);
        }
      }
    
      break;
    case 28:
            if (src_33557141 !== null) {
        result_33557151 = src_33557141.slice(0);
      }
    
      break;
    default: 
      result_33557151 = src_33557141;
      break;
    }

  return result_33557151;

}

function chckIndx(i_33557184, a_33557185, b_33557186) {
      var Temporary1;

  var result_33557187 = 0;

  BeforeRet: do {
      if (!(a_33557185 <= i_33557184)) Temporary1 = false; else {        Temporary1 = (i_33557184 <= b_33557186);      }    if (Temporary1) {
    result_33557187 = i_33557184;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_33557184, a_33557185, b_33557186);
    }
    
  } while (false);

  return result_33557187;

}
var objectID_687866018 = [0];
/// <reference path="./node_modules/@types/screeps-arena/game/constants.d.ts" />
/// <reference path="./node_modules/@types/screeps-arena/game/index.d.ts" />
/// <reference path="./node_modules/@types/screeps-arena/game/path-finder.d.ts" />
/// <reference path="./node_modules/@types/screeps-arena/game/utils.d.ts" />
/// <reference path="./node_modules/@types/screeps-arena/game/visual.d.ts" />

import * as gameUtil from 'game/utils';
import * as gameVisual from 'game/visual';
import * as gamePathFinder from 'game/path-finder';
import * as game from 'game';
import * as arena from 'arena';

import { Creep, StructureContainer, StructureTower } from 'game/prototypes';
// import { Flag } from 'arena/prototypes';


function getAllCreeps_1040187394() {
  var result_1040187395 = [];

      return gameUtil.getObjectsByPrototype(Creep);
  

  return result_1040187395;

}

function getAllFlags_1040187396() {
  var result_1040187397 = [];

      return gameUtil.getObjectsByPrototype(Flag);
  

  return result_1040187397;

}

function add_33556419(x_33556420, x_33556420_Idx, y_33556421) {
          if (x_33556420[x_33556420_Idx] === null) { x_33556420[x_33556420_Idx] = []; }
      var off = x_33556420[x_33556420_Idx].length;
      x_33556420[x_33556420_Idx].length += y_33556421.length;
      for (var i = 0; i < y_33556421.length; ++i) {
        x_33556420[x_33556420_Idx][off+i] = y_33556421.charCodeAt(i);
      }
    

  
}

function newSeq_33556825(len_33556827) {
  var result_33556828 = [];

    result_33556828 = new Array(len_33556827); for (var i = 0 ; i < len_33556827 ; ++i) { result_33556828[i] = null; }
  return result_33556828;

}

function unhandledException(e_33556663) {
    var buf_33556664 = [[]];
    if (!(((e_33556663.message).length == 0))) {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_33556664[0].push.apply(buf_33556664[0], e_33556663.message);;
    }
    else {
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit(" ["));;
    add_33556419(buf_33556664, 0, e_33556663.name);
    buf_33556664[0].push.apply(buf_33556664[0], makeNimstrLit("]\x0A"));;
    var cbuf_33556665 = toJSStr(buf_33556664[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556665);
  }
  else {
    throw cbuf_33556665;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI33555122, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_33556938) {
        if (a_33556938 > 2147483647 || a_33556938 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI33555130, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars_251658415(result_251658417, result_251658417_Idx, x_251658418, start_251658419, n_251658420) {
    var old_251658421 = (result_251658417[result_251658417_Idx]).length;
    (result_251658417[result_251658417_Idx].length = chckRange(addInt(old_251658421, n_251658420), 0, 2147483647));
    Label1: do {
      var iHEX60gensym4_251658435 = 0;
      var i_486539439 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539439 < n_251658420)) break Label3;
            iHEX60gensym4_251658435 = i_486539439;
            result_251658417[result_251658417_Idx][chckIndx(addInt(old_251658421, iHEX60gensym4_251658435), 0, (result_251658417[result_251658417_Idx]).length - 1)] = x_251658418.charCodeAt(chckIndx(addInt(start_251658419, iHEX60gensym4_251658435), 0, (x_251658418).length - 1));
            i_486539439 = addInt(i_486539439, 1);
          }
      } while (false);
    } while (false);

  
}

function addChars_251658411(result_251658413, result_251658413_Idx, x_251658414) {
    addChars_251658415(result_251658413, result_251658413_Idx, x_251658414, 0, ((x_251658414) == null ? 0 : (x_251658414).length));

  
}

function addInt_251658436(result_251658437, result_251658437_Idx, x_251658438) {
    addChars_251658411(result_251658437, result_251658437_Idx, ((x_251658438) + ""));

  
}

function addInt_251658457(result_251658458, result_251658458_Idx, x_251658459) {
    addInt_251658436(result_251658458, result_251658458_Idx, x_251658459);

  
}

function HEX24_352321539(x_352321540) {
  var result_352321541 = [[]];

    addInt_251658457(result_352321541, 0, x_352321540);

  return result_352321541[0];

}

function isFatPointer_33557131(ti_33557132) {
  var result_33557133 = false;

  BeforeRet: do {
    result_33557133 = !((ConstSet1[ti_33557132.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_33557133;

}

function nimCopyAux(dest_33557144, src_33557145, n_33557146) {
    switch (n_33557146.kind) {
    case 0:
      break;
    case 1:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557146.sons.length; i++) {
      nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i]);
    }
    
      break;
    case 3:
            dest_33557144[n_33557146.offset] = nimCopy(dest_33557144[n_33557146.offset], src_33557145[n_33557146.offset], n_33557146.typ);
      for (var i = 0; i < n_33557146.sons.length; ++i) {
        nimCopyAux(dest_33557144, src_33557145, n_33557146.sons[i][1]);
      }
    
      break;
    }

  
}

function raiseIndexError(i_33556754, a_33556755, b_33556756) {
    var Temporary1;

    if ((b_33556756 < a_33556755)) {
    Temporary1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Temporary1 = (makeNimstrLit("index ") || []).concat(HEX24_352321539(i_33556754) || [],makeNimstrLit(" not in ") || [],HEX24_352321539(a_33556755) || [],makeNimstrLit(" .. ") || [],HEX24_352321539(b_33556756) || []);
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554439), parent: null, m_type: NTI33555128, name: null, trace: [], up: null}, "IndexDefect");

  
}

function simpleMoveLoop() {
    var currentTick_486539272 = gameUtil.getTicks();
    console.log(("Current tick: "), (currentTick_486539272));
    var creeps_486539304 = getAllCreeps_1040187394();
    console.log(("found creeps: "), ((creeps_486539304).length));
    var flags_486539327 = getAllFlags_1040187396();
    console.log(("found flags: "), ((flags_486539327).length));
    if (((creeps_486539304).length < 1)) {
    raiseException({message: makeNimstrLit("No creeps found"), parent: null, m_type: NTI33555112, name: null, trace: [], up: null}, "Exception");
    }
    
    if (((flags_486539327).length < 1)) {
    raiseException({message: makeNimstrLit("No flags found"), parent: null, m_type: NTI33555112, name: null, trace: [], up: null}, "Exception");
    }
    
    var flag_486539358 = flags_486539327[chckIndx(0, 0, (flags_486539327).length - 1)];
    var creep_486539359 = creeps_486539304[chckIndx(0, 0, (creeps_486539304).length - 1)];
    var res_486539360 = creep_486539359.moveTo(flag_486539358);
    console.log(("moveTo result: "), (res_486539360));

  
}

function newSeq_486539512(len_486539514) {
  var result_486539515 = [];

    result_486539515 = new Array(len_486539514); for (var i = 0 ; i < len_486539514 ; ++i) { result_486539515[i] = null; }
  return result_486539515;

}

function filter_486539506(s_486539508, pred_486539510) {
  var result_486539511 = [];

    result_486539511 = nimCopy(null, newSeq_486539512(0), NTI486539392);
    Label1: do {
      var i_486539528 = 0;
      var colontmp__486539625 = 0;
      colontmp__486539625 = (s_486539508).length;
      var i_486539626 = 0;
      Label2: do {
          Label3: while (true) {
          if (!(i_486539626 < colontmp__486539625)) break Label3;
            i_486539528 = i_486539626;
            if (pred_486539510(s_486539508[chckIndx(i_486539528, 0, (s_486539508).length - 1)])) {
            result_486539511.push(s_486539508[chckIndx(i_486539528, 0, (s_486539508).length - 1)]);;
            }
            
            i_486539626 = addInt(i_486539626, 1);
          }
      } while (false);
    } while (false);

  return result_486539511;

}

function firstAttack() {
    
function HEX3Aanonymous_486539502(c_486539503) {
      var result_486539504 = false;

        result_486539504 = c_486539503.my;

      return result_486539504;

    }
    
function HEX3Aanonymous_486539534(c_486539535) {
      var result_486539536 = false;

        result_486539536 = !(c_486539535.my);

      return result_486539536;

    }

    var currentTick_486539442 = gameUtil.getTicks();
    console.log(("Current tick: "), (currentTick_486539442));
    var creeps_486539461 = getAllCreeps_1040187394();
    console.log(("found creeps: "), ((creeps_486539461).length));
    var myCreeps_486539533 = filter_486539506(creeps_486539461, HEX3Aanonymous_486539502);
    var enemyCreeps_486539543 = filter_486539506(creeps_486539461, HEX3Aanonymous_486539534);
    if (((myCreeps_486539533).length < 1)) {
    raiseException({message: makeNimstrLit("No my creeps found"), parent: null, m_type: NTI33555112, name: null, trace: [], up: null}, "Exception");
    }
    
    if (((enemyCreeps_486539543).length < 1)) {
    raiseException({message: makeNimstrLit("No enemy creeps found"), parent: null, m_type: NTI33555112, name: null, trace: [], up: null}, "Exception");
    }
    
    var myCreep_486539552 = myCreeps_486539533[chckIndx(0, 0, (myCreeps_486539533).length - 1)];
    var enemyCreep_486539553 = enemyCreeps_486539543[chckIndx(0, 0, (enemyCreeps_486539543).length - 1)];
    var attackRes_486539554 = myCreep_486539552.attack(enemyCreep_486539553);
    console.log(("attack result: "), (attackRes_486539554));
    if ((attackRes_486539554 == -9)) {
    var moveRes_486539578 = myCreep_486539552.moveTo(enemyCreep_486539553);
    console.log(("moveTo result: "), (moveRes_486539578));
    }
    

  
}

function sysFatal_218103842(message_218103845) {
    raiseException({message: nimCopy(null, message_218103845, NTI33554439), m_type: NTI33555124, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert_218103840(msg_218103841) {
    sysFatal_218103842(msg_218103841);

  
}

function failedAssertImpl_218103864(msg_218103865) {
    raiseAssert_218103840(msg_218103865);

  
}

function creepsBodies() {
    
function HEX3Aanonymous_486539651(c_486539652) {
      var result_486539653 = false;

        result_486539653 = !(c_486539652.my);

      return result_486539653;

    }
    
function HEX3Aanonymous_486539665(c_486539666) {
      var result_486539667 = false;

        result_486539667 = c_486539666.my;

      return result_486539667;

    }
    
function HEX3Aanonymous_486539675(c_486539676) {
      var result_486539677 = false;

        var resultHEX60gensym50_486539679 = false;
        Label1: do {
          var it_486539701 = null;
          var i_486540024 = 0;
          var L_486540025 = (c_486539676.body).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_486540024 < L_486540025)) break Label3;
                it_486539701 = c_486539676.body[chckIndx(i_486540024, 0, (c_486539676.body).length - 1)];
                if ((it_486539701.type == "attack")) {
                resultHEX60gensym50_486539679 = true;
                break Label1;
                }
                
                i_486540024 = addInt(i_486540024, 1);
                if (!(((c_486539676.body).length == L_486540025))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        result_486539677 = resultHEX60gensym50_486539679;

      return result_486539677;

    }
    
function HEX3Aanonymous_486539727(c_486539728) {
      var result_486539729 = false;

        var resultHEX60gensym53_486539731 = false;
        Label1: do {
          var it_486539735 = null;
          var i_486540028 = 0;
          var L_486540029 = (c_486539728.body).length;
          Label2: do {
              Label3: while (true) {
              if (!(i_486540028 < L_486540029)) break Label3;
                it_486539735 = c_486539728.body[chckIndx(i_486540028, 0, (c_486539728.body).length - 1)];
                if ((it_486539735.type == "ranged_attack")) {
                resultHEX60gensym53_486539731 = true;
                break Label1;
                }
                
                i_486540028 = addInt(i_486540028, 1);
                if (!(((c_486539728.body).length == L_486540029))) {
                failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                }
                
              }
          } while (false);
        } while (false);
        result_486539729 = resultHEX60gensym53_486539731;

      return result_486539729;

    }
      
function HEX3Aanonymous_486539743(c_486539744) {
        var result_486539745 = false;

          result_486539745 = c_486539744.my;

        return result_486539745;

      }

    var creeps_486539629 = getAllCreeps_1040187394();
    console.log(("found creeps: "), ((creeps_486539629).length));
    var enemyCreeps_486539660 = filter_486539506(creeps_486539629, HEX3Aanonymous_486539651);
    if (((enemyCreeps_486539660).length < 1)) {
    raiseException({message: makeNimstrLit("No enemy creeps found"), parent: null, m_type: NTI33555112, name: null, trace: [], up: null}, "Exception");
    }
    
    var myCreeps_486539674 = filter_486539506(creeps_486539629, HEX3Aanonymous_486539665);
    var attackCreeps_486539726 = filter_486539506(myCreeps_486539674, HEX3Aanonymous_486539675);
    var rangedCreeps_486539742 = filter_486539506(myCreeps_486539674, HEX3Aanonymous_486539727);
    Label1: do {
      var c_486539762 = null;
      var colontmp__486540013 = null;
      colontmp__486540013 = HEX3Aanonymous_486539743;
      Label2: do {
        var i_486540019 = 0;
        var colontmp__486540020 = 0;
        colontmp__486540020 = (creeps_486539629).length;
        var i_486540021 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(i_486540021 < colontmp__486540020)) break Label4;
              i_486540019 = i_486540021;
              if (colontmp__486540013(creeps_486539629[chckIndx(i_486540019, 0, (creeps_486539629).length - 1)])) {
              c_486539762 = creeps_486539629[chckIndx(i_486540019, 0, (creeps_486539629).length - 1)];
              console.log(("creep: "), (c_486539762.id));
              console.log(("body: "), (c_486539762.body));
              Label5: do {
                var b_486539802 = null;
                var i_486539998 = 0;
                var L_486539999 = (c_486539762.body).length;
                Label6: do {
                    Label7: while (true) {
                    if (!(i_486539998 < L_486539999)) break Label7;
                      b_486539802 = c_486539762.body[chckIndx(i_486539998, 0, (c_486539762.body).length - 1)];
                      console.log(("part: "), (b_486539802.type));
                      console.log(("ATTACK"), ("attack"));
                      i_486539998 = addInt(i_486539998, 1);
                      if (!(((c_486539762.body).length == L_486539999))) {
                      failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                      }
                      
                    }
                } while (false);
              } while (false);
                var resultHEX60gensym76_486539840 = false;
                Label8: do {
                  var it_486539844 = null;
                  var i_486540002 = 0;
                  var L_486540003 = (c_486539762.body).length;
                  Label9: do {
                      Label10: while (true) {
                      if (!(i_486540002 < L_486540003)) break Label10;
                        it_486539844 = c_486539762.body[chckIndx(i_486540002, 0, (c_486539762.body).length - 1)];
                        if ((it_486539844.type == "attack")) {
                        resultHEX60gensym76_486539840 = true;
                        break Label8;
                        }
                        
                        i_486540002 = addInt(i_486540002, 1);
                        if (!(((c_486539762.body).length == L_486540003))) {
                        failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while (false);
                } while (false);
              if (resultHEX60gensym76_486539840) {
              console.log(("creep has attack part: "), (c_486539762.id));
              if ((0 < (enemyCreeps_486539660).length)) {
              if ((c_486539762.attack(enemyCreeps_486539660[chckIndx(0, 0, (enemyCreeps_486539660).length - 1)]) == -9)) {
              var _ = c_486539762.moveTo(enemyCreeps_486539660[chckIndx(0, 0, (enemyCreeps_486539660).length - 1)]);
              }
              
              }
              else {
              console.log(("no other creeps to attack"));
              }
              
              }
              else {
                var resultHEX60gensym86_486539885 = false;
                Label11: do {
                  var it_486539889 = null;
                  var i_486540006 = 0;
                  var L_486540007 = (c_486539762.body).length;
                  Label12: do {
                      Label13: while (true) {
                      if (!(i_486540006 < L_486540007)) break Label13;
                        it_486539889 = c_486539762.body[chckIndx(i_486540006, 0, (c_486539762.body).length - 1)];
                        if ((it_486539889.type == "ranged_attack")) {
                        resultHEX60gensym86_486539885 = true;
                        break Label11;
                        }
                        
                        i_486540006 = addInt(i_486540006, 1);
                        if (!(((c_486539762.body).length == L_486540007))) {
                        failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while (false);
                } while (false);
              if (resultHEX60gensym86_486539885) {
              console.log(("creep has ranged attack part: "), (c_486539762.id));
              if ((0 < (enemyCreeps_486539660).length)) {
              if ((c_486539762.rangedAttack(enemyCreeps_486539660[chckIndx(0, 0, (enemyCreeps_486539660).length - 1)]) == -9)) {
              var _ = c_486539762.moveTo(enemyCreeps_486539660[chckIndx(0, 0, (enemyCreeps_486539660).length - 1)]);
              }
              
              }
              else {
              console.log(("no other creeps to attack"));
              }
              
              }
              else {
                var resultHEX60gensym96_486539930 = false;
                Label14: do {
                  var it_486539934 = null;
                  var i_486540010 = 0;
                  var L_486540011 = (c_486539762.body).length;
                  Label15: do {
                      Label16: while (true) {
                      if (!(i_486540010 < L_486540011)) break Label16;
                        it_486539934 = c_486539762.body[chckIndx(i_486540010, 0, (c_486539762.body).length - 1)];
                        if ((it_486539934.type == "heal")) {
                        resultHEX60gensym96_486539930 = true;
                        break Label14;
                        }
                        
                        i_486540010 = addInt(i_486540010, 1);
                        if (!(((c_486539762.body).length == L_486540011))) {
                        failedAssertImpl_218103864(makeNimstrLit("iterators.nim(240, 11) `len(a) == L` the length of the seq changed while iterating over it"));
                        }
                        
                      }
                  } while (false);
                } while (false);
              if (resultHEX60gensym96_486539930) {
              console.log(("creep has heal part: "), (c_486539762.id));
              if ((0 < (attackCreeps_486539726).length)) {
              if ((c_486539762.heal(attackCreeps_486539726[chckIndx(0, 0, (attackCreeps_486539726).length - 1)]) == -9)) {
              var _ = c_486539762.moveTo(attackCreeps_486539726[chckIndx(0, 0, (attackCreeps_486539726).length - 1)]);
              }
              
              }
              else {
              if ((0 < (rangedCreeps_486539742).length)) {
              if ((c_486539762.heal(rangedCreeps_486539742[chckIndx(0, 0, (rangedCreeps_486539742).length - 1)]) == -9)) {
              var _ = c_486539762.moveTo(rangedCreeps_486539742[chckIndx(0, 0, (rangedCreeps_486539742).length - 1)]);
              }
              
              }
              else {
              console.log(("no other creeps to heal"));
              }
              }
              }
              else {
              console.log(("creep missing attack or heal part"));
              }
              }}
              }
              
              i_486540021 = addInt(i_486540021, 1);
            }
        } while (false);
      } while (false);
    } while (false);

  
}

function getAllContainers_1040187398() {
  var result_1040187399 = [];

      return gameUtil.getObjectsByPrototype(StructureContainer);
  

  return result_1040187399;

}

function getAllTowers_1040187400() {
  var result_1040187401 = [];

      return gameUtil.getObjectsByPrototype(StructureTower);
  

  return result_1040187401;

}

function storeAndTransfer() {
      
function HEX3Aanonymous_486540073(c_486540074) {
        var result_486540075 = false;

          result_486540075 = c_486540074.my;

        return result_486540075;

      }
    var Temporary5;
    
function HEX3Aanonymous_486540240(c_486540241) {
      var result_486540242 = false;

        result_486540242 = !(c_486540241.my);

      return result_486540242;

    }
    var Temporary6;

    var currentTick_486540032 = gameUtil.getTicks();
    console.log(("Current tick: "), (currentTick_486540032));
    var creeps_486540051 = getAllCreeps_1040187394();
    console.log(("found creeps: "), ((creeps_486540051).length));
    Label1: do {
      var c_486540084 = null;
      var colontmp__486540344 = null;
      colontmp__486540344 = HEX3Aanonymous_486540073;
      Label2: do {
        var i_486540346 = 0;
        var colontmp__486540347 = 0;
        colontmp__486540347 = (creeps_486540051).length;
        var i_486540348 = 0;
        Label3: do {
            Label4: while (true) {
            if (!(i_486540348 < colontmp__486540347)) break Label4;
              i_486540346 = i_486540348;
              if (colontmp__486540344(creeps_486540051[chckIndx(i_486540346, 0, (creeps_486540051).length - 1)])) {
              c_486540084 = creeps_486540051[chckIndx(i_486540346, 0, (creeps_486540051).length - 1)];
              console.log(("creep: "), (c_486540084.id));
              console.log(("body: "), (c_486540084.body));
              if ((c_486540084.store.getUsedCapacity() == 0)) {
              var containers_486540121 = getAllContainers_1040187398();
              console.log(("found containers: "), ((containers_486540121).length));
              if ((0 < (containers_486540121).length)) {
              var container_486540150 = containers_486540121[chckIndx(0, 0, (containers_486540121).length - 1)];
              if ((c_486540084.withdraw(container_486540150, "energy") == -9)) {
              var _ = c_486540084.moveTo(container_486540150);
              }
              
              }
              else {
              console.log(("no containers found"));
              }
              
              }
              else {
                var towers_486540166 = getAllTowers_1040187400();
                console.log(("found towers: "), ((towers_486540166).length));
                if ((0 < (towers_486540166).length)) {
                var tower_486540195 = towers_486540166[chckIndx(0, 0, (towers_486540166).length - 1)];
                if ((c_486540084.transfer(tower_486540195, "energy") == -9)) {
                var _ = c_486540084.moveTo(tower_486540195);
                }
                
                }
                else {
                console.log(("no towers found"));
                }
                
              }
              
              }
              
              i_486540348 = addInt(i_486540348, 1);
            }
        } while (false);
      } while (false);
    } while (false);
    var towers_486540211 = getAllTowers_1040187400();
    console.log(("found towers: "), ((towers_486540211).length));
    if ((0 < (towers_486540211).length)) {
    var tower_486540239 = towers_486540211[chckIndx(0, 0, (towers_486540211).length - 1)];
    var enemyCreeps_486540249 = filter_486539506(creeps_486540051, HEX3Aanonymous_486540240);
    if ((0 < (enemyCreeps_486540249).length)) {
    var enemyCreep_486540256 = enemyCreeps_486540249[chckIndx(0, 0, (enemyCreeps_486540249).length - 1)];
    var res_486540257 = tower_486540239.attack(enemyCreep_486540256);
    Temporary6 = console.log(("tower attack result: "), (res_486540257));
    }
    else {
    Temporary6 = console.log(("no enemy creeps found"));
    }
    
    Temporary5 = Temporary6;
    }
    else {
    Temporary5 = console.log(("no towers found"));
    }
    
    Temporary5;

  
}
export const loop = storeAndTransfer;

