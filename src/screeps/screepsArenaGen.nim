# NB. this generated types file is missing a ton of stuff
# typescript doesn't translate to nim very well
# just here for reference

# Generated by dts2nim script
# Source files:
#     /home/monofuel/nodejs/node-v20.1.0-linux-x64/lib/node_modules/dts2nim/node_modules/typescript/lib/lib.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/utils.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/path-finder.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/constants.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/construction-site.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/creep.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/game-object.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/owned-structure.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/prototypes.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/resource.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/source.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/store.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/structure-container.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/structure-extension.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/structure-rampart.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/structure-road.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/structure-spawn.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/structure-tower.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/structure-wall.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/structure.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/prototypes/index.d.ts
#     bot-arena/node_modules/@types/screeps-arena/game/index.d.ts
#     bot-arena/node_modules/@types/screeps-arena/arena/prototypes/flag.d.ts
#     bot-arena/node_modules/@types/screeps-arena/arena/prototypes/body-part.d.ts
#     bot-arena/node_modules/@types/screeps-arena/arena/prototypes/index.d.ts
#     bot-arena/node_modules/@types/screeps-arena/arena/index.d.ts
#     bot-arena/node_modules/@types/screeps-arena/index.d.ts

when not defined(js) and not defined(Nimdoc):
  {.error: "This module only works on the JavaScript platform".}

var NaN* {.importc, nodecl.}: float

var Infinity* {.importc, nodecl.}: float

proc parseInt*(s: cstring, radix: float): float {.importc.}

proc parseFloat*(string: cstring): float {.importc.}

proc isNaN*(number: float): bool {.importc.}

proc isFinite*(number: float): bool {.importc.}

proc decodeURI*(encodedURI: cstring): cstring {.importc.}

proc decodeURIComponent*(encodedURIComponent: cstring): cstring {.importc.}

proc encodeURI*(uri: cstring): cstring {.importc.}

proc encodeURIComponent*(uriComponent: cstring): cstring {.importc.}

type PropertyDescriptor* {.importc.} = ref object of RootObj
  configurable* {.importc.}: bool
  enumerable* {.importc.}: bool
  writable* {.importc.}: bool

type PropertyDescriptorMap* {.importc.} = ref object of RootObj
proc `[]`*(self: PropertyDescriptorMap, s: cstring): PropertyDescriptor {.importcpp: "#[#]".}
proc `[]=`*(self: PropertyDescriptorMap, s: cstring,
    value: PropertyDescriptor) {.importcpp: "#[#] = #".}

type Function* {.importc.} = ref object of RootObj
  length* {.importc.}: float
  caller* {.importc.}: Function
var FunctionLength* {.importc: "Function.length", nodecl.}: float
var FunctionCaller* {.importc: "Function.caller", nodecl.}: Function

type Object* {.importc.} = ref object of RootObj
  constructor* {.importc.}: Function
proc toString*(self: Object): cstring {.importcpp.}
proc toLocaleString*(self: Object): cstring {.importcpp.}
proc valueOf*(self: Object): Object {.importcpp.}
proc hasOwnProperty*(self: Object, v: cstring): bool {.importcpp.}
proc isPrototypeOf*(self: Object, v: Object): bool {.importcpp.}
proc propertyIsEnumerable*(self: Object, v: cstring): bool {.importcpp.}

type FunctionConstructor* {.importc.} = ref object of RootObj
  prototype* {.importc.}: Function

type IArguments* {.importc.} = ref object of RootObj
  length* {.importc.}: float
  callee* {.importc.}: Function

type Array* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc newArray*(): Array {.importcpp: "new Array".}
proc toString*(self: Array): cstring {.importcpp.}
proc toLocaleString*(self: Array): cstring {.importcpp.}
proc push*(self: Array, items: Array): float {.importcpp.}
proc concat*(self: Array, items: Array): Array {.importcpp.}
proc join*(self: Array, separator: cstring): cstring {.importcpp.}
proc reverse*(self: Array): Array {.importcpp.}
proc slice*(self: Array, start: float, xEnd: float): Array {.importcpp.}
proc splice*(self: Array, start: float): Array {.importcpp.}
proc splice*(self: Array, start: float, deleteCount: float,
    items: Array): Array {.importcpp.}
proc unshift*(self: Array, items: Array): float {.importcpp.}

type RegExpMatchArray* {.importc.} = ref object of Array
  index* {.importc.}: float
  input* {.importc.}: cstring
proc newRegExpMatchArray*(): RegExpMatchArray {.importcpp: "new RegExpMatchArray".}

type RegExpExecArray* {.importc.} = ref object of Array
  index* {.importc.}: float
  input* {.importc.}: cstring

type RegExp* {.importc.} = ref object of RootObj
  source* {.importc.}: cstring
  global* {.importc.}: bool
  ignoreCase* {.importc.}: bool
  multiline* {.importc.}: bool
  lastIndex* {.importc.}: float
proc exec*(self: RegExp, string: cstring): RegExpExecArray {.importcpp.}
proc test*(self: RegExp, string: cstring): bool {.importcpp.}
proc compile*(self: RegExp): RegExp {.importcpp.}
var RegExpSource* {.importc: "RegExp.source", nodecl.}: cstring
var RegExpGlobal* {.importc: "RegExp.global", nodecl.}: bool
var RegExpIgnoreCase* {.importc: "RegExp.ignoreCase", nodecl.}: bool
var RegExpMultiline* {.importc: "RegExp.multiline", nodecl.}: bool
var RegExpLastIndex* {.importc: "RegExp.lastIndex", nodecl.}: float
proc RegExpExec*(string: cstring): RegExpExecArray {.importc: "RegExp.exec".}
proc RegExpTest*(string: cstring): bool {.importc: "RegExp.test".}
proc RegExpCompile*(): RegExp {.importc: "RegExp.compile".}

type String* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc toString*(self: String): cstring {.importcpp.}
proc charAt*(self: String, pos: float): cstring {.importcpp.}
proc charCodeAt*(self: String, index: float): float {.importcpp.}
proc indexOf*(self: String, searchString: cstring,
    position: float): float {.importcpp.}
proc lastIndexOf*(self: String, searchString: cstring,
    position: float): float {.importcpp.}
proc localeCompare*(self: String, that: cstring): float {.importcpp.}
proc match*(self: String, regexp: cstring): RegExpMatchArray {.importcpp.}
proc match*(self: String, regexp: RegExp): RegExpMatchArray {.importcpp.}
proc replace*(self: String, searchValue: cstring,
    replaceValue: cstring): cstring {.importcpp.}
proc replace*(self: String, searchValue: RegExp,
    replaceValue: cstring): cstring {.importcpp.}
proc search*(self: String, regexp: cstring): float {.importcpp.}
proc search*(self: String, regexp: RegExp): float {.importcpp.}
proc slice*(self: String, start: float, xEnd: float): cstring {.importcpp.}
proc substring*(self: String, start: float, xEnd: float): cstring {.importcpp.}
proc toLowerCase*(self: String): cstring {.importcpp.}
proc toLocaleLowerCase*(self: String): cstring {.importcpp.}
proc toUpperCase*(self: String): cstring {.importcpp.}
proc toLocaleUpperCase*(self: String): cstring {.importcpp.}
proc trim*(self: String): cstring {.importcpp.}
proc substr*(self: String, xFrom: float, length: float): cstring {.importcpp.}
proc valueOf*(self: String): cstring {.importcpp.}
proc `[]`*(self: String, index: float): cstring {.importcpp: "#[#]".}
proc `[]=`*(self: String, index: float, value: cstring) {.importcpp: "#[#] = #".}

type Boolean* {.importc.} = ref object of RootObj
proc valueOf*(self: Boolean): bool {.importcpp.}

type Number* {.importc.} = ref object of RootObj
proc toString*(self: Number, radix: float): cstring {.importcpp.}
proc toFixed*(self: Number, fractionDigits: float): cstring {.importcpp.}
proc toExponential*(self: Number, fractionDigits: float): cstring {.importcpp.}
proc toPrecision*(self: Number, precision: float): cstring {.importcpp.}
proc valueOf*(self: Number): float {.importcpp.}
var NumberMAX_VALUE* {.importc: "Number.MAX_VALUE", nodecl.}: float
var NumberMIN_VALUE* {.importc: "Number.MIN_VALUE", nodecl.}: float
var NumberNaN* {.importc: "Number.NaN", nodecl.}: float
var NumberNEGATIVE_INFINITY* {.importc: "Number.NEGATIVE_INFINITY",
    nodecl.}: float
var NumberPOSITIVE_INFINITY* {.importc: "Number.POSITIVE_INFINITY",
    nodecl.}: float

type TemplateStringsArray* {.importc.} = ref object of Array

type Math* {.importc.} = ref object of RootObj
  E* {.importc.}: float
  LN10* {.importc.}: float
  LN2* {.importc.}: float
  LOG2E* {.importc.}: float
  LOG10E* {.importc.}: float
  PI* {.importc.}: float
  SQRT1_2* {.importc.}: float
  SQRT2* {.importc.}: float
proc abs*(self: Math, x: float): float {.importcpp.}
proc acos*(self: Math, x: float): float {.importcpp.}
proc asin*(self: Math, x: float): float {.importcpp.}
proc atan*(self: Math, x: float): float {.importcpp.}
proc atan2*(self: Math, y: float, x: float): float {.importcpp.}
proc ceil*(self: Math, x: float): float {.importcpp.}
proc cos*(self: Math, x: float): float {.importcpp.}
proc exp*(self: Math, x: float): float {.importcpp.}
proc floor*(self: Math, x: float): float {.importcpp.}
proc log*(self: Math, x: float): float {.importcpp.}
proc pow*(self: Math, x: float, y: float): float {.importcpp.}
proc random*(self: Math): float {.importcpp.}
proc round*(self: Math, x: float): float {.importcpp.}
proc sin*(self: Math, x: float): float {.importcpp.}
proc sqrt*(self: Math, x: float): float {.importcpp.}
proc tan*(self: Math, x: float): float {.importcpp.}
var MathE* {.importc: "Math.E", nodecl.}: float
var MathLN10* {.importc: "Math.LN10", nodecl.}: float
var MathLN2* {.importc: "Math.LN2", nodecl.}: float
var MathLOG2E* {.importc: "Math.LOG2E", nodecl.}: float
var MathLOG10E* {.importc: "Math.LOG10E", nodecl.}: float
var MathPI* {.importc: "Math.PI", nodecl.}: float
var MathSQRT1_2* {.importc: "Math.SQRT1_2", nodecl.}: float
var MathSQRT2* {.importc: "Math.SQRT2", nodecl.}: float
proc MathAbs*(x: float): float {.importc: "Math.abs".}
proc MathAcos*(x: float): float {.importc: "Math.acos".}
proc MathAsin*(x: float): float {.importc: "Math.asin".}
proc MathAtan*(x: float): float {.importc: "Math.atan".}
proc MathAtan2*(y: float, x: float): float {.importc: "Math.atan2".}
proc MathCeil*(x: float): float {.importc: "Math.ceil".}
proc MathCos*(x: float): float {.importc: "Math.cos".}
proc MathExp*(x: float): float {.importc: "Math.exp".}
proc MathFloor*(x: float): float {.importc: "Math.floor".}
proc MathLog*(x: float): float {.importc: "Math.log".}
proc MathPow*(x: float, y: float): float {.importc: "Math.pow".}
proc MathRandom*(): float {.importc: "Math.random".}
proc MathRound*(x: float): float {.importc: "Math.round".}
proc MathSin*(x: float): float {.importc: "Math.sin".}
proc MathSqrt*(x: float): float {.importc: "Math.sqrt".}
proc MathTan*(x: float): float {.importc: "Math.tan".}

type Date* {.importc.} = ref object of RootObj
proc newDate*(): Date {.importcpp: "new Date".}
proc newDate*(value: float): Date {.importcpp: "new Date(@)".}
proc newDate*(value: cstring): Date {.importcpp: "new Date(@)".}
proc newDate*(year: float, month: float, date: float, hours: float,
    minutes: float, seconds: float,
    ms: float): Date {.importcpp: "new Date(@)".}
proc toString*(self: Date): cstring {.importcpp.}
proc toDateString*(self: Date): cstring {.importcpp.}
proc toTimeString*(self: Date): cstring {.importcpp.}
proc toLocaleString*(self: Date): cstring {.importcpp.}
proc toLocaleDateString*(self: Date): cstring {.importcpp.}
proc toLocaleTimeString*(self: Date): cstring {.importcpp.}
proc valueOf*(self: Date): float {.importcpp.}
proc getTime*(self: Date): float {.importcpp.}
proc getFullYear*(self: Date): float {.importcpp.}
proc getUTCFullYear*(self: Date): float {.importcpp.}
proc getMonth*(self: Date): float {.importcpp.}
proc getUTCMonth*(self: Date): float {.importcpp.}
proc getDate*(self: Date): float {.importcpp.}
proc getUTCDate*(self: Date): float {.importcpp.}
proc getDay*(self: Date): float {.importcpp.}
proc getUTCDay*(self: Date): float {.importcpp.}
proc getHours*(self: Date): float {.importcpp.}
proc getUTCHours*(self: Date): float {.importcpp.}
proc getMinutes*(self: Date): float {.importcpp.}
proc getUTCMinutes*(self: Date): float {.importcpp.}
proc getSeconds*(self: Date): float {.importcpp.}
proc getUTCSeconds*(self: Date): float {.importcpp.}
proc getMilliseconds*(self: Date): float {.importcpp.}
proc getUTCMilliseconds*(self: Date): float {.importcpp.}
proc getTimezoneOffset*(self: Date): float {.importcpp.}
proc setTime*(self: Date, time: float): float {.importcpp.}
proc setMilliseconds*(self: Date, ms: float): float {.importcpp.}
proc setUTCMilliseconds*(self: Date, ms: float): float {.importcpp.}
proc setSeconds*(self: Date, sec: float, ms: float): float {.importcpp.}
proc setUTCSeconds*(self: Date, sec: float, ms: float): float {.importcpp.}
proc setMinutes*(self: Date, min: float, sec: float,
    ms: float): float {.importcpp.}
proc setUTCMinutes*(self: Date, min: float, sec: float,
    ms: float): float {.importcpp.}
proc setHours*(self: Date, hours: float, min: float, sec: float,
    ms: float): float {.importcpp.}
proc setUTCHours*(self: Date, hours: float, min: float, sec: float,
    ms: float): float {.importcpp.}
proc setDate*(self: Date, date: float): float {.importcpp.}
proc setUTCDate*(self: Date, date: float): float {.importcpp.}
proc setMonth*(self: Date, month: float, date: float): float {.importcpp.}
proc setUTCMonth*(self: Date, month: float, date: float): float {.importcpp.}
proc setFullYear*(self: Date, year: float, month: float,
    date: float): float {.importcpp.}
proc setUTCFullYear*(self: Date, year: float, month: float,
    date: float): float {.importcpp.}
proc toUTCString*(self: Date): cstring {.importcpp.}
proc toISOString*(self: Date): cstring {.importcpp.}
proc DateParse*(s: cstring): float {.importc: "Date.parse".}
proc DateUTC*(year: float, month: float, date: float, hours: float,
    minutes: float, seconds: float, ms: float): float {.importc: "Date.UTC".}
proc DateNow*(): float {.importc: "Date.now".}

type RegExpConstructor* {.importc.} = ref object of RootObj
  prototype* {.importc.}: RegExp
  zz1* {.importc: "$$1".}: cstring
  zz2* {.importc: "$$2".}: cstring
  zz3* {.importc: "$$3".}: cstring
  zz4* {.importc: "$$4".}: cstring
  zz5* {.importc: "$$5".}: cstring
  zz6* {.importc: "$$6".}: cstring
  zz7* {.importc: "$$7".}: cstring
  zz8* {.importc: "$$8".}: cstring
  zz9* {.importc: "$$9".}: cstring
  lastMatch* {.importc.}: cstring

type Error* {.importc.} = ref object of RootObj
  name* {.importc.}: cstring
  message* {.importc.}: cstring
proc newError*(message: cstring): Error {.importcpp: "new Error(@)".}

type EvalError* {.importc.} = ref object of Error
proc newEvalError*(message: cstring): EvalError {.importcpp: "new EvalError(@)".}

type RangeError* {.importc.} = ref object of Error
proc newRangeError*(message: cstring): RangeError {.importcpp: "new RangeError(@)".}

type ReferenceError* {.importc.} = ref object of Error
proc newReferenceError*(message: cstring): ReferenceError {.importcpp: "new ReferenceError(@)".}

type SyntaxError* {.importc.} = ref object of Error
proc newSyntaxError*(message: cstring): SyntaxError {.importcpp: "new SyntaxError(@)".}

type TypeError* {.importc.} = ref object of Error
proc newTypeError*(message: cstring): TypeError {.importcpp: "new TypeError(@)".}

type URIError* {.importc.} = ref object of Error
proc newURIError*(message: cstring): URIError {.importcpp: "new URIError(@)".}

type JSON* {.importc.} = ref object of RootObj

type ArrayConstructor* {.importc.} = ref object of RootObj

type TypedPropertyDescriptor* {.importc.} = ref object of RootObj
  enumerable* {.importc.}: bool
  configurable* {.importc.}: bool
  writable* {.importc.}: bool

type PromiseLike* {.importc.} = ref object of RootObj

type ArrayLike* {.importc.} = ref object of RootObj
  length* {.importc.}: float

type ArrayBuffer* {.importc.} = ref object of RootObj
  byteLength* {.importc.}: float
proc newArrayBuffer*(byteLength: float): ArrayBuffer {.importcpp: "new ArrayBuffer(@)".}
proc slice*(self: ArrayBuffer, begin: float,
    xEnd: float): ArrayBuffer {.importcpp.}

type ArrayBufferView* {.importc.} = ref object of RootObj
  buffer* {.importc.}: ArrayBuffer
  byteLength* {.importc.}: float
  byteOffset* {.importc.}: float

type DataView* {.importc.} = ref object of RootObj
  buffer* {.importc.}: ArrayBuffer
  byteLength* {.importc.}: float
  byteOffset* {.importc.}: float
proc newDataView*(buffer: ArrayBuffer, byteOffset: float,
    byteLength: float): DataView {.importcpp: "new DataView(@)".}
proc getFloat32*(self: DataView, byteOffset: float,
    littleEndian: bool): float {.importcpp.}
proc getFloat64*(self: DataView, byteOffset: float,
    littleEndian: bool): float {.importcpp.}
proc getInt8*(self: DataView, byteOffset: float): float {.importcpp.}
proc getInt16*(self: DataView, byteOffset: float,
    littleEndian: bool): float {.importcpp.}
proc getInt32*(self: DataView, byteOffset: float,
    littleEndian: bool): float {.importcpp.}
proc getUint8*(self: DataView, byteOffset: float): float {.importcpp.}
proc getUint16*(self: DataView, byteOffset: float,
    littleEndian: bool): float {.importcpp.}
proc getUint32*(self: DataView, byteOffset: float,
    littleEndian: bool): float {.importcpp.}
proc setFloat32*(self: DataView, byteOffset: float, value: float,
    littleEndian: bool): void {.importcpp.}
proc setFloat64*(self: DataView, byteOffset: float, value: float,
    littleEndian: bool): void {.importcpp.}
proc setInt8*(self: DataView, byteOffset: float,
    value: float): void {.importcpp.}
proc setInt16*(self: DataView, byteOffset: float, value: float,
    littleEndian: bool): void {.importcpp.}
proc setInt32*(self: DataView, byteOffset: float, value: float,
    littleEndian: bool): void {.importcpp.}
proc setUint8*(self: DataView, byteOffset: float,
    value: float): void {.importcpp.}
proc setUint16*(self: DataView, byteOffset: float, value: float,
    littleEndian: bool): void {.importcpp.}
proc setUint32*(self: DataView, byteOffset: float, value: float,
    littleEndian: bool): void {.importcpp.}

type Int8Array* {.importc.} = ref object of RootObj
  BYTES_PER_ELEMENT* {.importc.}: float
  buffer* {.importc.}: ArrayBuffer
  byteLength* {.importc.}: float
  byteOffset* {.importc.}: float
  length* {.importc.}: float
proc newInt8Array*(length: float): Int8Array {.importcpp: "new Int8Array(@)".}
proc newInt8Array*(buffer: ArrayBuffer, byteOffset: float,
    length: float): Int8Array {.importcpp: "new Int8Array(@)".}
proc copyWithin*(self: Int8Array, target: float, start: float,
    xEnd: float): Int8Array {.importcpp.}
proc fill*(self: Int8Array, value: float, start: float,
    xEnd: float): Int8Array {.importcpp.}
proc indexOf*(self: Int8Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc join*(self: Int8Array, separator: cstring): cstring {.importcpp.}
proc lastIndexOf*(self: Int8Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc reduce*(self: Int8Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Int8Array): float,
    initialValue: float): float {.importcpp.}
proc reduceRight*(self: Int8Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Int8Array): float,
    initialValue: float): float {.importcpp.}
proc reverse*(self: Int8Array): Int8Array {.importcpp.}
proc set*(self: Int8Array, index: float, value: float): void {.importcpp.}
proc slice*(self: Int8Array, start: float, xEnd: float): Int8Array {.importcpp.}
proc sort*(self: Int8Array, compareFn: proc (a: float,
    b: float): float): Int8Array {.importcpp.}
proc subarray*(self: Int8Array, begin: float,
    xEnd: float): Int8Array {.importcpp.}
proc toLocaleString*(self: Int8Array): cstring {.importcpp.}
proc toString*(self: Int8Array): cstring {.importcpp.}
proc `[]`*(self: Int8Array, index: float): float {.importcpp: "#[#]".}
proc `[]=`*(self: Int8Array, index: float,
    value: float) {.importcpp: "#[#] = #".}
var Int8ArrayBYTES_PER_ELEMENT* {.importc: "Int8Array.BYTES_PER_ELEMENT",
    nodecl.}: float

type Uint8Array* {.importc.} = ref object of RootObj
  BYTES_PER_ELEMENT* {.importc.}: float
  buffer* {.importc.}: ArrayBuffer
  byteLength* {.importc.}: float
  byteOffset* {.importc.}: float
  length* {.importc.}: float
proc newUint8Array*(length: float): Uint8Array {.importcpp: "new Uint8Array(@)".}
proc newUint8Array*(buffer: ArrayBuffer, byteOffset: float,
    length: float): Uint8Array {.importcpp: "new Uint8Array(@)".}
proc copyWithin*(self: Uint8Array, target: float, start: float,
    xEnd: float): Uint8Array {.importcpp.}
proc fill*(self: Uint8Array, value: float, start: float,
    xEnd: float): Uint8Array {.importcpp.}
proc indexOf*(self: Uint8Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc join*(self: Uint8Array, separator: cstring): cstring {.importcpp.}
proc lastIndexOf*(self: Uint8Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc reduce*(self: Uint8Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Uint8Array): float,
    initialValue: float): float {.importcpp.}
proc reduceRight*(self: Uint8Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Uint8Array): float,
    initialValue: float): float {.importcpp.}
proc reverse*(self: Uint8Array): Uint8Array {.importcpp.}
proc set*(self: Uint8Array, index: float, value: float): void {.importcpp.}
proc slice*(self: Uint8Array, start: float,
    xEnd: float): Uint8Array {.importcpp.}
proc sort*(self: Uint8Array, compareFn: proc (a: float,
    b: float): float): Uint8Array {.importcpp.}
proc subarray*(self: Uint8Array, begin: float,
    xEnd: float): Uint8Array {.importcpp.}
proc toLocaleString*(self: Uint8Array): cstring {.importcpp.}
proc toString*(self: Uint8Array): cstring {.importcpp.}
proc `[]`*(self: Uint8Array, index: float): float {.importcpp: "#[#]".}
proc `[]=`*(self: Uint8Array, index: float,
    value: float) {.importcpp: "#[#] = #".}
var Uint8ArrayBYTES_PER_ELEMENT* {.importc: "Uint8Array.BYTES_PER_ELEMENT",
    nodecl.}: float

type Uint8ClampedArray* {.importc.} = ref object of RootObj
  BYTES_PER_ELEMENT* {.importc.}: float
  buffer* {.importc.}: ArrayBuffer
  byteLength* {.importc.}: float
  byteOffset* {.importc.}: float
  length* {.importc.}: float
proc newUint8ClampedArray*(length: float): Uint8ClampedArray {.importcpp: "new Uint8ClampedArray(@)".}
proc newUint8ClampedArray*(buffer: ArrayBuffer, byteOffset: float,
    length: float): Uint8ClampedArray {.importcpp: "new Uint8ClampedArray(@)".}
proc copyWithin*(self: Uint8ClampedArray, target: float, start: float,
    xEnd: float): Uint8ClampedArray {.importcpp.}
proc fill*(self: Uint8ClampedArray, value: float, start: float,
    xEnd: float): Uint8ClampedArray {.importcpp.}
proc indexOf*(self: Uint8ClampedArray, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc join*(self: Uint8ClampedArray, separator: cstring): cstring {.importcpp.}
proc lastIndexOf*(self: Uint8ClampedArray, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc reduce*(self: Uint8ClampedArray, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Uint8ClampedArray): float,
    initialValue: float): float {.importcpp.}
proc reduceRight*(self: Uint8ClampedArray, callbackfn: proc (
    previousValue: float, currentValue: float, currentIndex: float,
    array: Uint8ClampedArray): float, initialValue: float): float {.importcpp.}
proc reverse*(self: Uint8ClampedArray): Uint8ClampedArray {.importcpp.}
proc set*(self: Uint8ClampedArray, index: float,
    value: float): void {.importcpp.}
proc set*(self: Uint8ClampedArray, array: Uint8ClampedArray,
    offset: float): void {.importcpp.}
proc slice*(self: Uint8ClampedArray, start: float,
    xEnd: float): Uint8ClampedArray {.importcpp.}
proc sort*(self: Uint8ClampedArray, compareFn: proc (a: float,
    b: float): float): Uint8ClampedArray {.importcpp.}
proc subarray*(self: Uint8ClampedArray, begin: float,
    xEnd: float): Uint8ClampedArray {.importcpp.}
proc toLocaleString*(self: Uint8ClampedArray): cstring {.importcpp.}
proc toString*(self: Uint8ClampedArray): cstring {.importcpp.}
proc `[]`*(self: Uint8ClampedArray, index: float): float {.importcpp: "#[#]".}
proc `[]=`*(self: Uint8ClampedArray, index: float,
    value: float) {.importcpp: "#[#] = #".}
var Uint8ClampedArrayBYTES_PER_ELEMENT *
  {.importc: "Uint8ClampedArray.BYTES_PER_ELEMENT", nodecl.}: float

type Int16Array* {.importc.} = ref object of RootObj
  BYTES_PER_ELEMENT* {.importc.}: float
  buffer* {.importc.}: ArrayBuffer
  byteLength* {.importc.}: float
  byteOffset* {.importc.}: float
  length* {.importc.}: float
proc newInt16Array*(length: float): Int16Array {.importcpp: "new Int16Array(@)".}
proc newInt16Array*(buffer: ArrayBuffer, byteOffset: float,
    length: float): Int16Array {.importcpp: "new Int16Array(@)".}
proc copyWithin*(self: Int16Array, target: float, start: float,
    xEnd: float): Int16Array {.importcpp.}
proc fill*(self: Int16Array, value: float, start: float,
    xEnd: float): Int16Array {.importcpp.}
proc indexOf*(self: Int16Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc join*(self: Int16Array, separator: cstring): cstring {.importcpp.}
proc lastIndexOf*(self: Int16Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc reduce*(self: Int16Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Int16Array): float,
    initialValue: float): float {.importcpp.}
proc reduceRight*(self: Int16Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Int16Array): float,
    initialValue: float): float {.importcpp.}
proc reverse*(self: Int16Array): Int16Array {.importcpp.}
proc set*(self: Int16Array, index: float, value: float): void {.importcpp.}
proc slice*(self: Int16Array, start: float,
    xEnd: float): Int16Array {.importcpp.}
proc sort*(self: Int16Array, compareFn: proc (a: float,
    b: float): float): Int16Array {.importcpp.}
proc subarray*(self: Int16Array, begin: float,
    xEnd: float): Int16Array {.importcpp.}
proc toLocaleString*(self: Int16Array): cstring {.importcpp.}
proc toString*(self: Int16Array): cstring {.importcpp.}
proc `[]`*(self: Int16Array, index: float): float {.importcpp: "#[#]".}
proc `[]=`*(self: Int16Array, index: float,
    value: float) {.importcpp: "#[#] = #".}
var Int16ArrayBYTES_PER_ELEMENT* {.importc: "Int16Array.BYTES_PER_ELEMENT",
    nodecl.}: float

type Uint16Array* {.importc.} = ref object of RootObj
  BYTES_PER_ELEMENT* {.importc.}: float
  buffer* {.importc.}: ArrayBuffer
  byteLength* {.importc.}: float
  byteOffset* {.importc.}: float
  length* {.importc.}: float
proc newUint16Array*(length: float): Uint16Array {.importcpp: "new Uint16Array(@)".}
proc newUint16Array*(buffer: ArrayBuffer, byteOffset: float,
    length: float): Uint16Array {.importcpp: "new Uint16Array(@)".}
proc copyWithin*(self: Uint16Array, target: float, start: float,
    xEnd: float): Uint16Array {.importcpp.}
proc fill*(self: Uint16Array, value: float, start: float,
    xEnd: float): Uint16Array {.importcpp.}
proc indexOf*(self: Uint16Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc join*(self: Uint16Array, separator: cstring): cstring {.importcpp.}
proc lastIndexOf*(self: Uint16Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc reduce*(self: Uint16Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Uint16Array): float,
    initialValue: float): float {.importcpp.}
proc reduceRight*(self: Uint16Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Uint16Array): float,
    initialValue: float): float {.importcpp.}
proc reverse*(self: Uint16Array): Uint16Array {.importcpp.}
proc set*(self: Uint16Array, index: float, value: float): void {.importcpp.}
proc slice*(self: Uint16Array, start: float,
    xEnd: float): Uint16Array {.importcpp.}
proc sort*(self: Uint16Array, compareFn: proc (a: float,
    b: float): float): Uint16Array {.importcpp.}
proc subarray*(self: Uint16Array, begin: float,
    xEnd: float): Uint16Array {.importcpp.}
proc toLocaleString*(self: Uint16Array): cstring {.importcpp.}
proc toString*(self: Uint16Array): cstring {.importcpp.}
proc `[]`*(self: Uint16Array, index: float): float {.importcpp: "#[#]".}
proc `[]=`*(self: Uint16Array, index: float,
    value: float) {.importcpp: "#[#] = #".}
var Uint16ArrayBYTES_PER_ELEMENT* {.importc: "Uint16Array.BYTES_PER_ELEMENT",
    nodecl.}: float

type Int32Array* {.importc.} = ref object of RootObj
  BYTES_PER_ELEMENT* {.importc.}: float
  buffer* {.importc.}: ArrayBuffer
  byteLength* {.importc.}: float
  byteOffset* {.importc.}: float
  length* {.importc.}: float
proc newInt32Array*(length: float): Int32Array {.importcpp: "new Int32Array(@)".}
proc newInt32Array*(buffer: ArrayBuffer, byteOffset: float,
    length: float): Int32Array {.importcpp: "new Int32Array(@)".}
proc copyWithin*(self: Int32Array, target: float, start: float,
    xEnd: float): Int32Array {.importcpp.}
proc fill*(self: Int32Array, value: float, start: float,
    xEnd: float): Int32Array {.importcpp.}
proc indexOf*(self: Int32Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc join*(self: Int32Array, separator: cstring): cstring {.importcpp.}
proc lastIndexOf*(self: Int32Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc reduce*(self: Int32Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Int32Array): float,
    initialValue: float): float {.importcpp.}
proc reduceRight*(self: Int32Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Int32Array): float,
    initialValue: float): float {.importcpp.}
proc reverse*(self: Int32Array): Int32Array {.importcpp.}
proc set*(self: Int32Array, index: float, value: float): void {.importcpp.}
proc slice*(self: Int32Array, start: float,
    xEnd: float): Int32Array {.importcpp.}
proc sort*(self: Int32Array, compareFn: proc (a: float,
    b: float): float): Int32Array {.importcpp.}
proc subarray*(self: Int32Array, begin: float,
    xEnd: float): Int32Array {.importcpp.}
proc toLocaleString*(self: Int32Array): cstring {.importcpp.}
proc toString*(self: Int32Array): cstring {.importcpp.}
proc `[]`*(self: Int32Array, index: float): float {.importcpp: "#[#]".}
proc `[]=`*(self: Int32Array, index: float,
    value: float) {.importcpp: "#[#] = #".}
var Int32ArrayBYTES_PER_ELEMENT* {.importc: "Int32Array.BYTES_PER_ELEMENT",
    nodecl.}: float

type Uint32Array* {.importc.} = ref object of RootObj
  BYTES_PER_ELEMENT* {.importc.}: float
  buffer* {.importc.}: ArrayBuffer
  byteLength* {.importc.}: float
  byteOffset* {.importc.}: float
  length* {.importc.}: float
proc newUint32Array*(length: float): Uint32Array {.importcpp: "new Uint32Array(@)".}
proc newUint32Array*(buffer: ArrayBuffer, byteOffset: float,
    length: float): Uint32Array {.importcpp: "new Uint32Array(@)".}
proc copyWithin*(self: Uint32Array, target: float, start: float,
    xEnd: float): Uint32Array {.importcpp.}
proc fill*(self: Uint32Array, value: float, start: float,
    xEnd: float): Uint32Array {.importcpp.}
proc indexOf*(self: Uint32Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc join*(self: Uint32Array, separator: cstring): cstring {.importcpp.}
proc lastIndexOf*(self: Uint32Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc reduce*(self: Uint32Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Uint32Array): float,
    initialValue: float): float {.importcpp.}
proc reduceRight*(self: Uint32Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Uint32Array): float,
    initialValue: float): float {.importcpp.}
proc reverse*(self: Uint32Array): Uint32Array {.importcpp.}
proc set*(self: Uint32Array, index: float, value: float): void {.importcpp.}
proc slice*(self: Uint32Array, start: float,
    xEnd: float): Uint32Array {.importcpp.}
proc sort*(self: Uint32Array, compareFn: proc (a: float,
    b: float): float): Uint32Array {.importcpp.}
proc subarray*(self: Uint32Array, begin: float,
    xEnd: float): Uint32Array {.importcpp.}
proc toLocaleString*(self: Uint32Array): cstring {.importcpp.}
proc toString*(self: Uint32Array): cstring {.importcpp.}
proc `[]`*(self: Uint32Array, index: float): float {.importcpp: "#[#]".}
proc `[]=`*(self: Uint32Array, index: float,
    value: float) {.importcpp: "#[#] = #".}
var Uint32ArrayBYTES_PER_ELEMENT* {.importc: "Uint32Array.BYTES_PER_ELEMENT",
    nodecl.}: float

type Float32Array* {.importc.} = ref object of RootObj
  BYTES_PER_ELEMENT* {.importc.}: float
  buffer* {.importc.}: ArrayBuffer
  byteLength* {.importc.}: float
  byteOffset* {.importc.}: float
  length* {.importc.}: float
proc newFloat32Array*(length: float): Float32Array {.importcpp: "new Float32Array(@)".}
proc newFloat32Array*(buffer: ArrayBuffer, byteOffset: float,
    length: float): Float32Array {.importcpp: "new Float32Array(@)".}
proc copyWithin*(self: Float32Array, target: float, start: float,
    xEnd: float): Float32Array {.importcpp.}
proc fill*(self: Float32Array, value: float, start: float,
    xEnd: float): Float32Array {.importcpp.}
proc indexOf*(self: Float32Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc join*(self: Float32Array, separator: cstring): cstring {.importcpp.}
proc lastIndexOf*(self: Float32Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc reduce*(self: Float32Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Float32Array): float,
    initialValue: float): float {.importcpp.}
proc reduceRight*(self: Float32Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Float32Array): float,
    initialValue: float): float {.importcpp.}
proc reverse*(self: Float32Array): Float32Array {.importcpp.}
proc set*(self: Float32Array, index: float, value: float): void {.importcpp.}
proc slice*(self: Float32Array, start: float,
    xEnd: float): Float32Array {.importcpp.}
proc sort*(self: Float32Array, compareFn: proc (a: float,
    b: float): float): Float32Array {.importcpp.}
proc subarray*(self: Float32Array, begin: float,
    xEnd: float): Float32Array {.importcpp.}
proc toLocaleString*(self: Float32Array): cstring {.importcpp.}
proc toString*(self: Float32Array): cstring {.importcpp.}
proc `[]`*(self: Float32Array, index: float): float {.importcpp: "#[#]".}
proc `[]=`*(self: Float32Array, index: float,
    value: float) {.importcpp: "#[#] = #".}
var Float32ArrayBYTES_PER_ELEMENT* {.importc: "Float32Array.BYTES_PER_ELEMENT",
    nodecl.}: float

type Float64Array* {.importc.} = ref object of RootObj
  BYTES_PER_ELEMENT* {.importc.}: float
  buffer* {.importc.}: ArrayBuffer
  byteLength* {.importc.}: float
  byteOffset* {.importc.}: float
  length* {.importc.}: float
proc newFloat64Array*(length: float): Float64Array {.importcpp: "new Float64Array(@)".}
proc newFloat64Array*(buffer: ArrayBuffer, byteOffset: float,
    length: float): Float64Array {.importcpp: "new Float64Array(@)".}
proc copyWithin*(self: Float64Array, target: float, start: float,
    xEnd: float): Float64Array {.importcpp.}
proc fill*(self: Float64Array, value: float, start: float,
    xEnd: float): Float64Array {.importcpp.}
proc indexOf*(self: Float64Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc join*(self: Float64Array, separator: cstring): cstring {.importcpp.}
proc lastIndexOf*(self: Float64Array, searchElement: float,
    fromIndex: float): float {.importcpp.}
proc reduce*(self: Float64Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Float64Array): float,
    initialValue: float): float {.importcpp.}
proc reduceRight*(self: Float64Array, callbackfn: proc (previousValue: float,
    currentValue: float, currentIndex: float, array: Float64Array): float,
    initialValue: float): float {.importcpp.}
proc reverse*(self: Float64Array): Float64Array {.importcpp.}
proc set*(self: Float64Array, index: float, value: float): void {.importcpp.}
proc slice*(self: Float64Array, start: float,
    xEnd: float): Float64Array {.importcpp.}
proc sort*(self: Float64Array, compareFn: proc (a: float,
    b: float): float): Float64Array {.importcpp.}
proc subarray*(self: Float64Array, begin: float,
    xEnd: float): Float64Array {.importcpp.}
proc toLocaleString*(self: Float64Array): cstring {.importcpp.}
proc toString*(self: Float64Array): cstring {.importcpp.}
proc `[]`*(self: Float64Array, index: float): float {.importcpp: "#[#]".}
proc `[]=`*(self: Float64Array, index: float,
    value: float) {.importcpp: "#[#] = #".}
var Float64ArrayBYTES_PER_ELEMENT* {.importc: "Float64Array.BYTES_PER_ELEMENT",
    nodecl.}: float

type Algorithm* {.importc.} = ref object of RootObj
  name* {.importc.}: cstring

type EventInit* {.importc.} = ref object of RootObj
  bubbles* {.importc.}: bool
  cancelable* {.importc.}: bool
proc newEventInit*(): EventInit {.importcpp: "new EventInit".}

type AriaRequestEventInit* {.importc.} = ref object of EventInit
  attributeName* {.importc.}: cstring
  attributeValue* {.importc.}: cstring

type ClipboardEventInit* {.importc.} = ref object of EventInit
  data* {.importc.}: cstring
  dataType* {.importc.}: cstring

type CommandEventInit* {.importc.} = ref object of EventInit
  commandName* {.importc.}: cstring
  detail* {.importc.}: cstring

type EventListener* {.importc.} = ref object of RootObj

type DOMTokenList* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc newDOMTokenList*(): DOMTokenList {.importcpp: "new DOMTokenList".}
proc contains*(self: DOMTokenList, token: cstring): bool {.importcpp.}
proc item*(self: DOMTokenList, index: float): cstring {.importcpp.}
proc toString*(self: DOMTokenList): cstring {.importcpp.}
proc toggle*(self: DOMTokenList, token: cstring,
    force: bool): bool {.importcpp.}
proc `[]`*(self: DOMTokenList, index: float): cstring {.importcpp: "#[#]".}
proc `[]=`*(self: DOMTokenList, index: float,
    value: cstring) {.importcpp: "#[#] = #".}

type DOMStringMap* {.importc.} = ref object of RootObj
proc newDOMStringMap*(): DOMStringMap {.importcpp: "new DOMStringMap".}
proc `[]`*(self: DOMStringMap, name: cstring): cstring {.importcpp: "#[#]".}
proc `[]=`*(self: DOMStringMap, name: cstring,
    value: cstring) {.importcpp: "#[#] = #".}

type CSSStyleDeclaration* {.importc.} = ref object of RootObj
  alignContent* {.importc.}: cstring
  alignItems* {.importc.}: cstring
  alignSelf* {.importc.}: cstring
  alignmentBaseline* {.importc.}: cstring
  animation* {.importc.}: cstring
  animationDelay* {.importc.}: cstring
  animationDirection* {.importc.}: cstring
  animationDuration* {.importc.}: cstring
  animationFillMode* {.importc.}: cstring
  animationIterationCount* {.importc.}: cstring
  animationName* {.importc.}: cstring
  animationPlayState* {.importc.}: cstring
  animationTimingFunction* {.importc.}: cstring
  backfaceVisibility* {.importc.}: cstring
  background* {.importc.}: cstring
  backgroundAttachment* {.importc.}: cstring
  backgroundClip* {.importc.}: cstring
  backgroundColor* {.importc.}: cstring
  backgroundImage* {.importc.}: cstring
  backgroundOrigin* {.importc.}: cstring
  backgroundPosition* {.importc.}: cstring
  backgroundPositionX* {.importc.}: cstring
  backgroundPositionY* {.importc.}: cstring
  backgroundRepeat* {.importc.}: cstring
  backgroundSize* {.importc.}: cstring
  baselineShift* {.importc.}: cstring
  border* {.importc.}: cstring
  borderBottom* {.importc.}: cstring
  borderBottomColor* {.importc.}: cstring
  borderBottomLeftRadius* {.importc.}: cstring
  borderBottomRightRadius* {.importc.}: cstring
  borderBottomStyle* {.importc.}: cstring
  borderBottomWidth* {.importc.}: cstring
  borderCollapse* {.importc.}: cstring
  borderColor* {.importc.}: cstring
  borderImage* {.importc.}: cstring
  borderImageOutset* {.importc.}: cstring
  borderImageRepeat* {.importc.}: cstring
  borderImageSlice* {.importc.}: cstring
  borderImageSource* {.importc.}: cstring
  borderImageWidth* {.importc.}: cstring
  borderLeft* {.importc.}: cstring
  borderLeftColor* {.importc.}: cstring
  borderLeftStyle* {.importc.}: cstring
  borderLeftWidth* {.importc.}: cstring
  borderRadius* {.importc.}: cstring
  borderRight* {.importc.}: cstring
  borderRightColor* {.importc.}: cstring
  borderRightStyle* {.importc.}: cstring
  borderRightWidth* {.importc.}: cstring
  borderSpacing* {.importc.}: cstring
  borderStyle* {.importc.}: cstring
  borderTop* {.importc.}: cstring
  borderTopColor* {.importc.}: cstring
  borderTopLeftRadius* {.importc.}: cstring
  borderTopRightRadius* {.importc.}: cstring
  borderTopStyle* {.importc.}: cstring
  borderTopWidth* {.importc.}: cstring
  borderWidth* {.importc.}: cstring
  bottom* {.importc.}: cstring
  boxShadow* {.importc.}: cstring
  boxSizing* {.importc.}: cstring
  breakAfter* {.importc.}: cstring
  breakBefore* {.importc.}: cstring
  breakInside* {.importc.}: cstring
  captionSide* {.importc.}: cstring
  clear* {.importc.}: cstring
  clip* {.importc.}: cstring
  clipPath* {.importc.}: cstring
  clipRule* {.importc.}: cstring
  color* {.importc.}: cstring
  colorInterpolationFilters* {.importc.}: cstring
  columnFill* {.importc.}: cstring
  columnRule* {.importc.}: cstring
  columnRuleStyle* {.importc.}: cstring
  columnSpan* {.importc.}: cstring
  columns* {.importc.}: cstring
  content* {.importc.}: cstring
  counterIncrement* {.importc.}: cstring
  counterReset* {.importc.}: cstring
  cssFloat* {.importc.}: cstring
  cssText* {.importc.}: cstring
  cursor* {.importc.}: cstring
  direction* {.importc.}: cstring
  display* {.importc.}: cstring
  dominantBaseline* {.importc.}: cstring
  emptyCells* {.importc.}: cstring
  enableBackground* {.importc.}: cstring
  fill* {.importc.}: cstring
  fillOpacity* {.importc.}: cstring
  fillRule* {.importc.}: cstring
  filter* {.importc.}: cstring
  flex* {.importc.}: cstring
  flexBasis* {.importc.}: cstring
  flexDirection* {.importc.}: cstring
  flexFlow* {.importc.}: cstring
  flexGrow* {.importc.}: cstring
  flexShrink* {.importc.}: cstring
  flexWrap* {.importc.}: cstring
  floodColor* {.importc.}: cstring
  floodOpacity* {.importc.}: cstring
  font* {.importc.}: cstring
  fontFamily* {.importc.}: cstring
  fontFeatureSettings* {.importc.}: cstring
  fontSize* {.importc.}: cstring
  fontSizeAdjust* {.importc.}: cstring
  fontStretch* {.importc.}: cstring
  fontStyle* {.importc.}: cstring
  fontVariant* {.importc.}: cstring
  fontWeight* {.importc.}: cstring
  glyphOrientationHorizontal* {.importc.}: cstring
  glyphOrientationVertical* {.importc.}: cstring
  height* {.importc.}: cstring
  imeMode* {.importc.}: cstring
  justifyContent* {.importc.}: cstring
  kerning* {.importc.}: cstring
  left* {.importc.}: cstring
  length* {.importc.}: float
  letterSpacing* {.importc.}: cstring
  lightingColor* {.importc.}: cstring
  lineHeight* {.importc.}: cstring
  listStyle* {.importc.}: cstring
  listStyleImage* {.importc.}: cstring
  listStylePosition* {.importc.}: cstring
  listStyleType* {.importc.}: cstring
  margin* {.importc.}: cstring
  marginBottom* {.importc.}: cstring
  marginLeft* {.importc.}: cstring
  marginRight* {.importc.}: cstring
  marginTop* {.importc.}: cstring
  marker* {.importc.}: cstring
  markerEnd* {.importc.}: cstring
  markerMid* {.importc.}: cstring
  markerStart* {.importc.}: cstring
  mask* {.importc.}: cstring
  maxHeight* {.importc.}: cstring
  maxWidth* {.importc.}: cstring
  minHeight* {.importc.}: cstring
  minWidth* {.importc.}: cstring
  msContentZoomChaining* {.importc.}: cstring
  msContentZoomLimit* {.importc.}: cstring
  msContentZoomSnap* {.importc.}: cstring
  msContentZoomSnapPoints* {.importc.}: cstring
  msContentZoomSnapType* {.importc.}: cstring
  msContentZooming* {.importc.}: cstring
  msFlowFrom* {.importc.}: cstring
  msFlowInto* {.importc.}: cstring
  msFontFeatureSettings* {.importc.}: cstring
  msGridColumnAlign* {.importc.}: cstring
  msGridColumns* {.importc.}: cstring
  msGridRowAlign* {.importc.}: cstring
  msGridRows* {.importc.}: cstring
  msHighContrastAdjust* {.importc.}: cstring
  msHyphenateLimitChars* {.importc.}: cstring
  msHyphens* {.importc.}: cstring
  msImeAlign* {.importc.}: cstring
  msOverflowStyle* {.importc.}: cstring
  msScrollChaining* {.importc.}: cstring
  msScrollLimit* {.importc.}: cstring
  msScrollRails* {.importc.}: cstring
  msScrollSnapPointsX* {.importc.}: cstring
  msScrollSnapPointsY* {.importc.}: cstring
  msScrollSnapType* {.importc.}: cstring
  msScrollSnapX* {.importc.}: cstring
  msScrollSnapY* {.importc.}: cstring
  msScrollTranslation* {.importc.}: cstring
  msTextCombineHorizontal* {.importc.}: cstring
  msTouchAction* {.importc.}: cstring
  msTouchSelect* {.importc.}: cstring
  msUserSelect* {.importc.}: cstring
  msWrapFlow* {.importc.}: cstring
  msWrapThrough* {.importc.}: cstring
  opacity* {.importc.}: cstring
  order* {.importc.}: cstring
  orphans* {.importc.}: cstring
  outline* {.importc.}: cstring
  outlineColor* {.importc.}: cstring
  outlineStyle* {.importc.}: cstring
  outlineWidth* {.importc.}: cstring
  overflow* {.importc.}: cstring
  overflowX* {.importc.}: cstring
  overflowY* {.importc.}: cstring
  padding* {.importc.}: cstring
  paddingBottom* {.importc.}: cstring
  paddingLeft* {.importc.}: cstring
  paddingRight* {.importc.}: cstring
  paddingTop* {.importc.}: cstring
  pageBreakAfter* {.importc.}: cstring
  pageBreakBefore* {.importc.}: cstring
  pageBreakInside* {.importc.}: cstring
  perspective* {.importc.}: cstring
  perspectiveOrigin* {.importc.}: cstring
  pointerEvents* {.importc.}: cstring
  position* {.importc.}: cstring
  quotes* {.importc.}: cstring
  right* {.importc.}: cstring
  rubyAlign* {.importc.}: cstring
  rubyOverhang* {.importc.}: cstring
  rubyPosition* {.importc.}: cstring
  stopColor* {.importc.}: cstring
  stopOpacity* {.importc.}: cstring
  stroke* {.importc.}: cstring
  strokeDasharray* {.importc.}: cstring
  strokeDashoffset* {.importc.}: cstring
  strokeLinecap* {.importc.}: cstring
  strokeLinejoin* {.importc.}: cstring
  strokeMiterlimit* {.importc.}: cstring
  strokeOpacity* {.importc.}: cstring
  strokeWidth* {.importc.}: cstring
  tableLayout* {.importc.}: cstring
  textAlign* {.importc.}: cstring
  textAlignLast* {.importc.}: cstring
  textAnchor* {.importc.}: cstring
  textDecoration* {.importc.}: cstring
  textFillColor* {.importc.}: cstring
  textIndent* {.importc.}: cstring
  textJustify* {.importc.}: cstring
  textKashida* {.importc.}: cstring
  textKashidaSpace* {.importc.}: cstring
  textOverflow* {.importc.}: cstring
  textShadow* {.importc.}: cstring
  textTransform* {.importc.}: cstring
  textUnderlinePosition* {.importc.}: cstring
  top* {.importc.}: cstring
  touchAction* {.importc.}: cstring
  transform* {.importc.}: cstring
  transformOrigin* {.importc.}: cstring
  transformStyle* {.importc.}: cstring
  transition* {.importc.}: cstring
  transitionDelay* {.importc.}: cstring
  transitionDuration* {.importc.}: cstring
  transitionProperty* {.importc.}: cstring
  transitionTimingFunction* {.importc.}: cstring
  unicodeBidi* {.importc.}: cstring
  verticalAlign* {.importc.}: cstring
  visibility* {.importc.}: cstring
  webkitAlignContent* {.importc.}: cstring
  webkitAlignItems* {.importc.}: cstring
  webkitAlignSelf* {.importc.}: cstring
  webkitAnimation* {.importc.}: cstring
  webkitAnimationDelay* {.importc.}: cstring
  webkitAnimationDirection* {.importc.}: cstring
  webkitAnimationDuration* {.importc.}: cstring
  webkitAnimationFillMode* {.importc.}: cstring
  webkitAnimationIterationCount* {.importc.}: cstring
  webkitAnimationName* {.importc.}: cstring
  webkitAnimationPlayState* {.importc.}: cstring
  webkitAnimationTimingFunction* {.importc.}: cstring
  webkitAppearance* {.importc.}: cstring
  webkitBackfaceVisibility* {.importc.}: cstring
  webkitBackground* {.importc.}: cstring
  webkitBackgroundAttachment* {.importc.}: cstring
  webkitBackgroundClip* {.importc.}: cstring
  webkitBackgroundColor* {.importc.}: cstring
  webkitBackgroundImage* {.importc.}: cstring
  webkitBackgroundOrigin* {.importc.}: cstring
  webkitBackgroundPosition* {.importc.}: cstring
  webkitBackgroundPositionX* {.importc.}: cstring
  webkitBackgroundPositionY* {.importc.}: cstring
  webkitBackgroundRepeat* {.importc.}: cstring
  webkitBackgroundSize* {.importc.}: cstring
  webkitBorderBottomLeftRadius* {.importc.}: cstring
  webkitBorderBottomRightRadius* {.importc.}: cstring
  webkitBorderImage* {.importc.}: cstring
  webkitBorderImageOutset* {.importc.}: cstring
  webkitBorderImageRepeat* {.importc.}: cstring
  webkitBorderImageSlice* {.importc.}: cstring
  webkitBorderImageSource* {.importc.}: cstring
  webkitBorderImageWidth* {.importc.}: cstring
  webkitBorderRadius* {.importc.}: cstring
  webkitBorderTopLeftRadius* {.importc.}: cstring
  webkitBorderTopRightRadius* {.importc.}: cstring
  webkitBoxAlign* {.importc.}: cstring
  webkitBoxDirection* {.importc.}: cstring
  webkitBoxFlex* {.importc.}: cstring
  webkitBoxOrdinalGroup* {.importc.}: cstring
  webkitBoxOrient* {.importc.}: cstring
  webkitBoxPack* {.importc.}: cstring
  webkitBoxSizing* {.importc.}: cstring
  webkitColumnBreakAfter* {.importc.}: cstring
  webkitColumnBreakBefore* {.importc.}: cstring
  webkitColumnBreakInside* {.importc.}: cstring
  webkitColumnRule* {.importc.}: cstring
  webkitColumnRuleStyle* {.importc.}: cstring
  webkitColumnSpan* {.importc.}: cstring
  webkitColumns* {.importc.}: cstring
  webkitFilter* {.importc.}: cstring
  webkitFlex* {.importc.}: cstring
  webkitFlexBasis* {.importc.}: cstring
  webkitFlexDirection* {.importc.}: cstring
  webkitFlexFlow* {.importc.}: cstring
  webkitFlexGrow* {.importc.}: cstring
  webkitFlexShrink* {.importc.}: cstring
  webkitFlexWrap* {.importc.}: cstring
  webkitJustifyContent* {.importc.}: cstring
  webkitOrder* {.importc.}: cstring
  webkitPerspective* {.importc.}: cstring
  webkitPerspectiveOrigin* {.importc.}: cstring
  webkitTapHighlightColor* {.importc.}: cstring
  webkitTextFillColor* {.importc.}: cstring
  webkitTransform* {.importc.}: cstring
  webkitTransformOrigin* {.importc.}: cstring
  webkitTransformStyle* {.importc.}: cstring
  webkitTransition* {.importc.}: cstring
  webkitTransitionDelay* {.importc.}: cstring
  webkitTransitionDuration* {.importc.}: cstring
  webkitTransitionProperty* {.importc.}: cstring
  webkitTransitionTimingFunction* {.importc.}: cstring
  webkitUserSelect* {.importc.}: cstring
  webkitWritingMode* {.importc.}: cstring
  whiteSpace* {.importc.}: cstring
  widows* {.importc.}: cstring
  width* {.importc.}: cstring
  wordBreak* {.importc.}: cstring
  wordSpacing* {.importc.}: cstring
  wordWrap* {.importc.}: cstring
  writingMode* {.importc.}: cstring
  zIndex* {.importc.}: cstring
  zoom* {.importc.}: cstring
proc newCSSStyleDeclaration*(): CSSStyleDeclaration {.importcpp: "new CSSStyleDeclaration".}
proc getPropertyPriority*(self: CSSStyleDeclaration,
    propertyName: cstring): cstring {.importcpp.}
proc getPropertyValue*(self: CSSStyleDeclaration,
    propertyName: cstring): cstring {.importcpp.}
proc item*(self: CSSStyleDeclaration, index: float): cstring {.importcpp.}
proc removeProperty*(self: CSSStyleDeclaration,
    propertyName: cstring): cstring {.importcpp.}
proc setProperty*(self: CSSStyleDeclaration, propertyName: cstring,
    value: cstring, priority: cstring): void {.importcpp.}
proc `[]`*(self: CSSStyleDeclaration, index: float): cstring {.importcpp: "#[#]".}
proc `[]=`*(self: CSSStyleDeclaration, index: float,
    value: cstring) {.importcpp: "#[#] = #".}

type ClientRect* {.importc.} = ref object of RootObj
  bottom* {.importc.}: float
  height* {.importc.}: float
  left* {.importc.}: float
  right* {.importc.}: float
  top* {.importc.}: float
  width* {.importc.}: float
proc newClientRect*(): ClientRect {.importcpp: "new ClientRect".}

type Location* {.importc.} = ref object of RootObj
  hash* {.importc.}: cstring
  host* {.importc.}: cstring
  hostname* {.importc.}: cstring
  href* {.importc.}: cstring
  origin* {.importc.}: cstring
  pathname* {.importc.}: cstring
  port* {.importc.}: cstring
  protocol* {.importc.}: cstring
  search* {.importc.}: cstring
proc assign*(self: Location, url: cstring): void {.importcpp.}
proc reload*(self: Location, forcedReload: bool): void {.importcpp.}
proc replace*(self: Location, url: cstring): void {.importcpp.}
proc toString*(self: Location): cstring {.importcpp.}
var LocationHash* {.importc: "Location.hash", nodecl.}: cstring
var LocationHost* {.importc: "Location.host", nodecl.}: cstring
var LocationHostname* {.importc: "Location.hostname", nodecl.}: cstring
var LocationHref* {.importc: "Location.href", nodecl.}: cstring
var LocationOrigin* {.importc: "Location.origin", nodecl.}: cstring
var LocationPathname* {.importc: "Location.pathname", nodecl.}: cstring
var LocationPort* {.importc: "Location.port", nodecl.}: cstring
var LocationProtocol* {.importc: "Location.protocol", nodecl.}: cstring
var LocationSearch* {.importc: "Location.search", nodecl.}: cstring
proc LocationAssign*(url: cstring): void {.importc: "Location.assign".}
proc LocationReload*(forcedReload: bool): void {.importc: "Location.reload".}
proc LocationReplace*(url: cstring): void {.importc: "Location.replace".}
proc LocationToString*(): cstring {.importc: "Location.toString".}

type SVGMatrix* {.importc.} = ref object of RootObj
  a* {.importc.}: float
  b* {.importc.}: float
  c* {.importc.}: float
  d* {.importc.}: float
  e* {.importc.}: float
  f* {.importc.}: float
proc newSVGMatrix*(): SVGMatrix {.importcpp: "new SVGMatrix".}
proc flipX*(self: SVGMatrix): SVGMatrix {.importcpp.}
proc flipY*(self: SVGMatrix): SVGMatrix {.importcpp.}
proc inverse*(self: SVGMatrix): SVGMatrix {.importcpp.}
proc multiply*(self: SVGMatrix, secondMatrix: SVGMatrix): SVGMatrix {.importcpp.}
proc rotate*(self: SVGMatrix, angle: float): SVGMatrix {.importcpp.}
proc rotateFromVector*(self: SVGMatrix, x: float,
    y: float): SVGMatrix {.importcpp.}
proc scale*(self: SVGMatrix, scaleFactor: float): SVGMatrix {.importcpp.}
proc scaleNonUniform*(self: SVGMatrix, scaleFactorX: float,
    scaleFactorY: float): SVGMatrix {.importcpp.}
proc skewX*(self: SVGMatrix, angle: float): SVGMatrix {.importcpp.}
proc skewY*(self: SVGMatrix, angle: float): SVGMatrix {.importcpp.}
proc translate*(self: SVGMatrix, x: float, y: float): SVGMatrix {.importcpp.}

type SVGPoint* {.importc.} = ref object of RootObj
  x* {.importc.}: float
  y* {.importc.}: float
proc matrixTransform*(self: SVGPoint, matrix: SVGMatrix): SVGPoint {.importcpp.}
var SVGPointX* {.importc: "SVGPoint.x", nodecl.}: float
var SVGPointY* {.importc: "SVGPoint.y", nodecl.}: float
proc SVGPointMatrixTransform*(matrix: SVGMatrix): SVGPoint {.importc: "SVGPoint.matrixTransform".}

type SVGLength* {.importc.} = ref object of RootObj
  unitType* {.importc.}: float
  value* {.importc.}: float
  valueAsString* {.importc.}: cstring
  valueInSpecifiedUnits* {.importc.}: float
  SVG_LENGTHTYPE_CM* {.importc.}: float
  SVG_LENGTHTYPE_EMS* {.importc.}: float
  SVG_LENGTHTYPE_EXS* {.importc.}: float
  SVG_LENGTHTYPE_IN* {.importc.}: float
  SVG_LENGTHTYPE_MM* {.importc.}: float
  SVG_LENGTHTYPE_NUMBER* {.importc.}: float
  SVG_LENGTHTYPE_PC* {.importc.}: float
  SVG_LENGTHTYPE_PERCENTAGE* {.importc.}: float
  SVG_LENGTHTYPE_PT* {.importc.}: float
  SVG_LENGTHTYPE_PX* {.importc.}: float
  SVG_LENGTHTYPE_UNKNOWN* {.importc.}: float
proc convertToSpecifiedUnits*(self: SVGLength,
    unitType: float): void {.importcpp.}
proc newValueSpecifiedUnits*(self: SVGLength, unitType: float,
    valueInSpecifiedUnits: float): void {.importcpp.}
var SVGLengthUnitType* {.importc: "SVGLength.unitType", nodecl.}: float
var SVGLengthValue* {.importc: "SVGLength.value", nodecl.}: float
var SVGLengthValueAsString* {.importc: "SVGLength.valueAsString",
    nodecl.}: cstring
var SVGLengthValueInSpecifiedUnits* {.importc: "SVGLength.valueInSpecifiedUnits",
    nodecl.}: float
var SVGLengthSVG_LENGTHTYPE_CM* {.importc: "SVGLength.SVG_LENGTHTYPE_CM",
    nodecl.}: float
var SVGLengthSVG_LENGTHTYPE_EMS* {.importc: "SVGLength.SVG_LENGTHTYPE_EMS",
    nodecl.}: float
var SVGLengthSVG_LENGTHTYPE_EXS* {.importc: "SVGLength.SVG_LENGTHTYPE_EXS",
    nodecl.}: float
var SVGLengthSVG_LENGTHTYPE_IN* {.importc: "SVGLength.SVG_LENGTHTYPE_IN",
    nodecl.}: float
var SVGLengthSVG_LENGTHTYPE_MM* {.importc: "SVGLength.SVG_LENGTHTYPE_MM",
    nodecl.}: float
var SVGLengthSVG_LENGTHTYPE_NUMBER* {.importc: "SVGLength.SVG_LENGTHTYPE_NUMBER",
    nodecl.}: float
var SVGLengthSVG_LENGTHTYPE_PC* {.importc: "SVGLength.SVG_LENGTHTYPE_PC",
    nodecl.}: float
var SVGLengthSVG_LENGTHTYPE_PERCENTAGE *
  {.importc: "SVGLength.SVG_LENGTHTYPE_PERCENTAGE", nodecl.}: float
var SVGLengthSVG_LENGTHTYPE_PT* {.importc: "SVGLength.SVG_LENGTHTYPE_PT",
    nodecl.}: float
var SVGLengthSVG_LENGTHTYPE_PX* {.importc: "SVGLength.SVG_LENGTHTYPE_PX",
    nodecl.}: float
var SVGLengthSVG_LENGTHTYPE_UNKNOWN* {.importc: "SVGLength.SVG_LENGTHTYPE_UNKNOWN",
    nodecl.}: float
proc SVGLengthConvertToSpecifiedUnits*(unitType: float): void {.importc: "SVGLength.convertToSpecifiedUnits".}
proc SVGLengthNewValueSpecifiedUnits*(unitType: float,
    valueInSpecifiedUnits: float): void {.importc: "SVGLength.newValueSpecifiedUnits".}

type SVGAnimatedLength* {.importc.} = ref object of RootObj
  animVal* {.importc.}: SVGLength
  baseVal* {.importc.}: SVGLength
proc newSVGAnimatedLength*(): SVGAnimatedLength {.importcpp: "new SVGAnimatedLength".}

type SVGRect* {.importc.} = ref object of RootObj
  height* {.importc.}: float
  width* {.importc.}: float
  x* {.importc.}: float
  y* {.importc.}: float
var SVGRectHeight* {.importc: "SVGRect.height", nodecl.}: float
var SVGRectWidth* {.importc: "SVGRect.width", nodecl.}: float
var SVGRectX* {.importc: "SVGRect.x", nodecl.}: float
var SVGRectY* {.importc: "SVGRect.y", nodecl.}: float

type SVGAngle* {.importc.} = ref object of RootObj
  unitType* {.importc.}: float
  value* {.importc.}: float
  valueAsString* {.importc.}: cstring
  valueInSpecifiedUnits* {.importc.}: float
  SVG_ANGLETYPE_DEG* {.importc.}: float
  SVG_ANGLETYPE_GRAD* {.importc.}: float
  SVG_ANGLETYPE_RAD* {.importc.}: float
  SVG_ANGLETYPE_UNKNOWN* {.importc.}: float
  SVG_ANGLETYPE_UNSPECIFIED* {.importc.}: float
proc newSVGAngle*(): SVGAngle {.importcpp: "new SVGAngle".}
proc convertToSpecifiedUnits*(self: SVGAngle,
    unitType: float): void {.importcpp.}
proc newValueSpecifiedUnits*(self: SVGAngle, unitType: float,
    valueInSpecifiedUnits: float): void {.importcpp.}
var SVGAngleSVG_ANGLETYPE_DEG* {.importc: "SVGAngle.SVG_ANGLETYPE_DEG",
    nodecl.}: float
var SVGAngleSVG_ANGLETYPE_GRAD* {.importc: "SVGAngle.SVG_ANGLETYPE_GRAD",
    nodecl.}: float
var SVGAngleSVG_ANGLETYPE_RAD* {.importc: "SVGAngle.SVG_ANGLETYPE_RAD",
    nodecl.}: float
var SVGAngleSVG_ANGLETYPE_UNKNOWN* {.importc: "SVGAngle.SVG_ANGLETYPE_UNKNOWN",
    nodecl.}: float
var SVGAngleSVG_ANGLETYPE_UNSPECIFIED* {.importc: "SVGAngle.SVG_ANGLETYPE_UNSPECIFIED",
    nodecl.}: float

type SVGNumber* {.importc.} = ref object of RootObj
  value* {.importc.}: float
proc newSVGNumber*(): SVGNumber {.importcpp: "new SVGNumber".}

type SVGTransform* {.importc.} = ref object of RootObj
  angle* {.importc.}: float
  matrix* {.importc.}: SVGMatrix
  xType* {.importc: "type".}: float
  SVG_TRANSFORM_MATRIX* {.importc.}: float
  SVG_TRANSFORM_ROTATE* {.importc.}: float
  SVG_TRANSFORM_SCALE* {.importc.}: float
  SVG_TRANSFORM_SKEWX* {.importc.}: float
  SVG_TRANSFORM_SKEWY* {.importc.}: float
  SVG_TRANSFORM_TRANSLATE* {.importc.}: float
  SVG_TRANSFORM_UNKNOWN* {.importc.}: float
proc setMatrix*(self: SVGTransform, matrix: SVGMatrix): void {.importcpp.}
proc setRotate*(self: SVGTransform, angle: float, cx: float,
    cy: float): void {.importcpp.}
proc setScale*(self: SVGTransform, sx: float, sy: float): void {.importcpp.}
proc setSkewX*(self: SVGTransform, angle: float): void {.importcpp.}
proc setSkewY*(self: SVGTransform, angle: float): void {.importcpp.}
proc setTranslate*(self: SVGTransform, tx: float, ty: float): void {.importcpp.}
var SVGTransformAngle* {.importc: "SVGTransform.angle", nodecl.}: float
var SVGTransformMatrix* {.importc: "SVGTransform.matrix", nodecl.}: SVGMatrix
var SVGTransformType* {.importc: "SVGTransform.type", nodecl.}: float
var SVGTransformSVG_TRANSFORM_MATRIX* {.importc: "SVGTransform.SVG_TRANSFORM_MATRIX",
    nodecl.}: float
var SVGTransformSVG_TRANSFORM_ROTATE* {.importc: "SVGTransform.SVG_TRANSFORM_ROTATE",
    nodecl.}: float
var SVGTransformSVG_TRANSFORM_SCALE* {.importc: "SVGTransform.SVG_TRANSFORM_SCALE",
    nodecl.}: float
var SVGTransformSVG_TRANSFORM_SKEWX* {.importc: "SVGTransform.SVG_TRANSFORM_SKEWX",
    nodecl.}: float
var SVGTransformSVG_TRANSFORM_SKEWY* {.importc: "SVGTransform.SVG_TRANSFORM_SKEWY",
    nodecl.}: float
var SVGTransformSVG_TRANSFORM_TRANSLATE *
  {.importc: "SVGTransform.SVG_TRANSFORM_TRANSLATE", nodecl.}: float
var SVGTransformSVG_TRANSFORM_UNKNOWN* {.importc: "SVGTransform.SVG_TRANSFORM_UNKNOWN",
    nodecl.}: float
proc SVGTransformSetMatrix*(matrix: SVGMatrix): void {.importc: "SVGTransform.setMatrix".}
proc SVGTransformSetRotate*(angle: float, cx: float,
    cy: float): void {.importc: "SVGTransform.setRotate".}
proc SVGTransformSetScale*(sx: float, sy: float): void {.importc: "SVGTransform.setScale".}
proc SVGTransformSetSkewX*(angle: float): void {.importc: "SVGTransform.setSkewX".}
proc SVGTransformSetSkewY*(angle: float): void {.importc: "SVGTransform.setSkewY".}
proc SVGTransformSetTranslate*(tx: float,
    ty: float): void {.importc: "SVGTransform.setTranslate".}

type MediaList* {.importc.} = ref object of RootObj
  length* {.importc.}: float
  mediaText* {.importc.}: cstring
proc appendMedium*(self: MediaList, newMedium: cstring): void {.importcpp.}
proc deleteMedium*(self: MediaList, oldMedium: cstring): void {.importcpp.}
proc item*(self: MediaList, index: float): cstring {.importcpp.}
proc toString*(self: MediaList): cstring {.importcpp.}
proc `[]`*(self: MediaList, index: float): cstring {.importcpp: "#[#]".}
proc `[]=`*(self: MediaList, index: float,
    value: cstring) {.importcpp: "#[#] = #".}
var MediaListLength* {.importc: "MediaList.length", nodecl.}: float
var MediaListMediaText* {.importc: "MediaList.mediaText", nodecl.}: cstring
proc MediaListAppendMedium*(newMedium: cstring): void {.importc: "MediaList.appendMedium".}
proc MediaListDeleteMedium*(oldMedium: cstring): void {.importc: "MediaList.deleteMedium".}
proc MediaListItem*(index: float): cstring {.importc: "MediaList.item".}
proc MediaListToString*(): cstring {.importc: "MediaList.toString".}

type XPathNSResolver* {.importc.} = ref object of RootObj
proc lookupNamespaceURI*(self: XPathNSResolver,
    prefix: cstring): cstring {.importcpp.}
proc XPathNSResolverLookupNamespaceURI*(
  prefix: cstring): cstring {.importc: "XPathNSResolver.lookupNamespaceURI".}

type ClientRectList* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc newClientRectList*(): ClientRectList {.importcpp: "new ClientRectList".}
proc item*(self: ClientRectList, index: float): ClientRect {.importcpp.}
proc `[]`*(self: ClientRectList, index: float): ClientRect {.importcpp: "#[#]".}
proc `[]=`*(self: ClientRectList, index: float,
    value: ClientRect) {.importcpp: "#[#] = #".}

type MsZoomToOptions* {.importc.} = ref object of RootObj
  contentX* {.importc.}: float
  contentY* {.importc.}: float
  viewportX* {.importc.}: cstring
  viewportY* {.importc.}: cstring
  scaleFactor* {.importc.}: float
  animate* {.importc.}: cstring

type MSMimeTypesCollection* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc newMSMimeTypesCollection*(): MSMimeTypesCollection {.importcpp: "new MSMimeTypesCollection".}

type MSPluginsCollection* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc newMSPluginsCollection*(): MSPluginsCollection {.importcpp: "new MSPluginsCollection".}
proc refresh*(self: MSPluginsCollection, reload: bool): void {.importcpp.}

type MSLaunchUriCallback* {.importc.} = ref object of RootObj
proc newMSLaunchUriCallback*(): MSLaunchUriCallback {.importcpp: "new MSLaunchUriCallback".}

type SubtleCrypto* {.importc.} = ref object of RootObj

type Crypto* {.importc.} = ref object of Object
  subtle* {.importc.}: SubtleCrypto
proc newCrypto*(): Crypto {.importcpp: "new Crypto".}

type External* {.importc.} = ref object of RootObj
proc newExternal*(): External {.importcpp: "new External".}

type History* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc newHistory*(): History {.importcpp: "new History".}

type BarProp* {.importc.} = ref object of RootObj
  visible* {.importc.}: bool
proc newBarProp*(): BarProp {.importcpp: "new BarProp".}

type ErrorEventHandler* {.importc.} = ref object of RootObj
proc newErrorEventHandler*(): ErrorEventHandler {.importcpp: "new ErrorEventHandler".}

type PerformanceNavigation* {.importc.} = ref object of RootObj
  redirectCount* {.importc.}: float
  xType* {.importc: "type".}: float
  TYPE_BACK_FORWARD* {.importc.}: float
  TYPE_NAVIGATE* {.importc.}: float
  TYPE_RELOAD* {.importc.}: float
  TYPE_RESERVED* {.importc.}: float
var PerformanceNavigationRedirectCount *
  {.importc: "PerformanceNavigation.redirectCount", nodecl.}: float
var PerformanceNavigationType* {.importc: "PerformanceNavigation.type",
    nodecl.}: float
var PerformanceNavigationTYPE_BACK_FORWARD *
  {.importc: "PerformanceNavigation.TYPE_BACK_FORWARD", nodecl.}: float
var PerformanceNavigationTYPE_NAVIGATE *
  {.importc: "PerformanceNavigation.TYPE_NAVIGATE", nodecl.}: float
var PerformanceNavigationTYPE_RELOAD* {.importc: "PerformanceNavigation.TYPE_RELOAD",
    nodecl.}: float
var PerformanceNavigationTYPE_RESERVED *
  {.importc: "PerformanceNavigation.TYPE_RESERVED", nodecl.}: float

type PerformanceTiming* {.importc.} = ref object of RootObj
  connectEnd* {.importc.}: float
  connectStart* {.importc.}: float
  domComplete* {.importc.}: float
  domContentLoadedEventEnd* {.importc.}: float
  domContentLoadedEventStart* {.importc.}: float
  domInteractive* {.importc.}: float
  domLoading* {.importc.}: float
  domainLookupEnd* {.importc.}: float
  domainLookupStart* {.importc.}: float
  fetchStart* {.importc.}: float
  loadEventEnd* {.importc.}: float
  loadEventStart* {.importc.}: float
  msFirstPaint* {.importc.}: float
  navigationStart* {.importc.}: float
  redirectEnd* {.importc.}: float
  redirectStart* {.importc.}: float
  requestStart* {.importc.}: float
  responseEnd* {.importc.}: float
  responseStart* {.importc.}: float
  unloadEventEnd* {.importc.}: float
  unloadEventStart* {.importc.}: float
var PerformanceTimingConnectEnd* {.importc: "PerformanceTiming.connectEnd",
    nodecl.}: float
var PerformanceTimingConnectStart* {.importc: "PerformanceTiming.connectStart",
    nodecl.}: float
var PerformanceTimingDomComplete* {.importc: "PerformanceTiming.domComplete",
    nodecl.}: float
var PerformanceTimingDomContentLoadedEventEnd *
  {.importc: "PerformanceTiming.domContentLoadedEventEnd", nodecl.}: float
var PerformanceTimingDomContentLoadedEventStart *
  {.importc: "PerformanceTiming.domContentLoadedEventStart", nodecl.}: float
var PerformanceTimingDomInteractive* {.importc: "PerformanceTiming.domInteractive",
    nodecl.}: float
var PerformanceTimingDomLoading* {.importc: "PerformanceTiming.domLoading",
    nodecl.}: float
var PerformanceTimingDomainLookupEnd* {.importc: "PerformanceTiming.domainLookupEnd",
    nodecl.}: float
var PerformanceTimingDomainLookupStart *
  {.importc: "PerformanceTiming.domainLookupStart", nodecl.}: float
var PerformanceTimingFetchStart* {.importc: "PerformanceTiming.fetchStart",
    nodecl.}: float
var PerformanceTimingLoadEventEnd* {.importc: "PerformanceTiming.loadEventEnd",
    nodecl.}: float
var PerformanceTimingLoadEventStart* {.importc: "PerformanceTiming.loadEventStart",
    nodecl.}: float
var PerformanceTimingMsFirstPaint* {.importc: "PerformanceTiming.msFirstPaint",
    nodecl.}: float
var PerformanceTimingNavigationStart* {.importc: "PerformanceTiming.navigationStart",
    nodecl.}: float
var PerformanceTimingRedirectEnd* {.importc: "PerformanceTiming.redirectEnd",
    nodecl.}: float
var PerformanceTimingRedirectStart* {.importc: "PerformanceTiming.redirectStart",
    nodecl.}: float
var PerformanceTimingRequestStart* {.importc: "PerformanceTiming.requestStart",
    nodecl.}: float
var PerformanceTimingResponseEnd* {.importc: "PerformanceTiming.responseEnd",
    nodecl.}: float
var PerformanceTimingResponseStart* {.importc: "PerformanceTiming.responseStart",
    nodecl.}: float
var PerformanceTimingUnloadEventEnd* {.importc: "PerformanceTiming.unloadEventEnd",
    nodecl.}: float
var PerformanceTimingUnloadEventStart* {.importc: "PerformanceTiming.unloadEventStart",
    nodecl.}: float

type Performance* {.importc.} = ref object of RootObj
  navigation* {.importc.}: PerformanceNavigation
  timing* {.importc.}: PerformanceTiming
proc newPerformance*(): Performance {.importcpp: "new Performance".}
proc clearMarks*(self: Performance, markName: cstring): void {.importcpp.}
proc clearMeasures*(self: Performance, measureName: cstring): void {.importcpp.}
proc clearResourceTimings*(self: Performance): void {.importcpp.}
proc mark*(self: Performance, markName: cstring): void {.importcpp.}
proc measure*(self: Performance, measureName: cstring, startMarkName: cstring,
    endMarkName: cstring): void {.importcpp.}
proc now*(self: Performance): float {.importcpp.}
proc setResourceTimingBufferSize*(self: Performance,
    maxSize: float): void {.importcpp.}

type StyleMedia* {.importc.} = ref object of RootObj
  xType* {.importc: "type".}: cstring
proc newStyleMedia*(): StyleMedia {.importcpp: "new StyleMedia".}
proc matchMedium*(self: StyleMedia, mediaquery: cstring): bool {.importcpp.}

type URL* {.importc.} = ref object of RootObj
proc revokeObjectURL*(self: URL, url: cstring): void {.importcpp.}
proc URLRevokeObjectURL*(url: cstring): void {.importc: "URL.revokeObjectURL".}

type CSSRuleList* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc newCSSRuleList*(): CSSRuleList {.importcpp: "new CSSRuleList".}

type MediaQueryListListener* {.importc.} = ref object of RootObj
proc newMediaQueryListListener*(): MediaQueryListListener {.importcpp: "new MediaQueryListListener".}

type MediaQueryList* {.importc.} = ref object of RootObj
  matches* {.importc.}: bool
  media* {.importc.}: cstring
proc newMediaQueryList*(): MediaQueryList {.importcpp: "new MediaQueryList".}
proc addListener*(self: MediaQueryList, listener: MediaQueryListListener): void {.importcpp.}
proc removeListener*(self: MediaQueryList,
    listener: MediaQueryListListener): void {.importcpp.}

type FrameRequestCallback* {.importc.} = ref object of RootObj
proc newFrameRequestCallback*(): FrameRequestCallback {.importcpp: "new FrameRequestCallback".}

type WebKitPoint* {.importc.} = ref object of RootObj
  x* {.importc.}: float
  y* {.importc.}: float
proc newWebKitPoint*(x: float, y: float): WebKitPoint {.importcpp: "new WebKitPoint(@)".}

type
  EventTarget* {.importc.} = ref object of RootObj
  Screen* {.importc.} = ref object of EventTarget
    availHeight* {.importc.}: float
    availWidth* {.importc.}: float
    bufferDepth* {.importc.}: float
    colorDepth* {.importc.}: float
    deviceXDPI* {.importc.}: float
    deviceYDPI* {.importc.}: float
    fontSmoothingEnabled* {.importc.}: bool
    height* {.importc.}: float
    logicalXDPI* {.importc.}: float
    logicalYDPI* {.importc.}: float
    msOrientation* {.importc.}: cstring
    pixelDepth* {.importc.}: float
    systemXDPI* {.importc.}: float
    systemYDPI* {.importc.}: float
    width* {.importc.}: float
  Navigator* {.importc.} = ref object of Object
    appCodeName* {.importc.}: cstring
    appMinorVersion* {.importc.}: cstring
    browserLanguage* {.importc.}: cstring
    connectionSpeed* {.importc.}: float
    cookieEnabled* {.importc.}: bool
    cpuClass* {.importc.}: cstring
    language* {.importc.}: cstring
    maxTouchPoints* {.importc.}: float
    mimeTypes* {.importc.}: MSMimeTypesCollection
    msManipulationViewsEnabled* {.importc.}: bool
    msMaxTouchPoints* {.importc.}: float
    msPointerEnabled* {.importc.}: bool
    plugins* {.importc.}: MSPluginsCollection
    pointerEnabled* {.importc.}: bool
    systemLanguage* {.importc.}: cstring
    userLanguage* {.importc.}: cstring
    webdriver* {.importc.}: bool
  MSRangeCollection* {.importc.} = ref object of RootObj
    length* {.importc.}: float
  Selection* {.importc.} = ref object of RootObj
    anchorNode* {.importc.}: Node
    anchorOffset* {.importc.}: float
    focusNode* {.importc.}: Node
    focusOffset* {.importc.}: float
    isCollapsed* {.importc.}: bool
    rangeCount* {.importc.}: float
    xType* {.importc: "type".}: cstring
  TreeWalker* {.importc.} = ref object of RootObj
    currentNode* {.importc.}: Node
    expandEntityReferences* {.importc.}: bool
    filter* {.importc.}: NodeFilter
    root* {.importc.}: Node
    whatToShow* {.importc.}: float
  Range* {.importc.} = ref object of RootObj
    collapsed* {.importc.}: bool
    commonAncestorContainer* {.importc.}: Node
    endContainer* {.importc.}: Node
    endOffset* {.importc.}: float
    startContainer* {.importc.}: Node
    startOffset* {.importc.}: float
    END_TO_END* {.importc.}: float
    END_TO_START* {.importc.}: float
    START_TO_END* {.importc.}: float
    START_TO_START* {.importc.}: float
  Node* {.importc.} = ref object of EventTarget
    attributes* {.importc.}: NamedNodeMap
    baseURI* {.importc.}: cstring
    childNodes* {.importc.}: NodeList
    firstChild* {.importc.}: Node
    lastChild* {.importc.}: Node
    localName* {.importc.}: cstring
    namespaceURI* {.importc.}: cstring
    nextSibling* {.importc.}: Node
    nodeName* {.importc.}: cstring
    nodeType* {.importc.}: float
    nodeValue* {.importc.}: cstring
    ownerDocument* {.importc.}: Document
    parentElement* {.importc.}: HTMLElement
    parentNode* {.importc.}: Node
    prefix* {.importc.}: cstring
    previousSibling* {.importc.}: Node
    textContent* {.importc.}: cstring
    ATTRIBUTE_NODE* {.importc.}: float
    CDATA_SECTION_NODE* {.importc.}: float
    COMMENT_NODE* {.importc.}: float
    DOCUMENT_FRAGMENT_NODE* {.importc.}: float
    DOCUMENT_NODE* {.importc.}: float
    DOCUMENT_POSITION_CONTAINED_BY* {.importc.}: float
    DOCUMENT_POSITION_CONTAINS* {.importc.}: float
    DOCUMENT_POSITION_DISCONNECTED* {.importc.}: float
    DOCUMENT_POSITION_FOLLOWING* {.importc.}: float
    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC * {.importc.}: float
    DOCUMENT_POSITION_PRECEDING* {.importc.}: float
    DOCUMENT_TYPE_NODE* {.importc.}: float
    ELEMENT_NODE* {.importc.}: float
    ENTITY_NODE* {.importc.}: float
    ENTITY_REFERENCE_NODE* {.importc.}: float
    NOTATION_NODE* {.importc.}: float
    PROCESSING_INSTRUCTION_NODE* {.importc.}: float
    TEXT_NODE* {.importc.}: float
  CharacterData* {.importc.} = ref object of Node
    data* {.importc.}: cstring
    length* {.importc.}: float
  ProcessingInstruction* {.importc.} = ref object of CharacterData
    target* {.importc.}: cstring
  NodeIterator* {.importc.} = ref object of RootObj
    expandEntityReferences* {.importc.}: bool
    filter* {.importc.}: NodeFilter
    root* {.importc.}: Node
    whatToShow* {.importc.}: float
  NodeFilter* {.importc.} = ref object of RootObj
  XPathResult* {.importc.} = ref object of RootObj
    booleanValue* {.importc.}: bool
    invalidIteratorState* {.importc.}: bool
    numberValue* {.importc.}: float
    resultType* {.importc.}: float
    singleNodeValue* {.importc.}: Node
    snapshotLength* {.importc.}: float
    stringValue* {.importc.}: cstring
    ANY_TYPE* {.importc.}: float
    ANY_UNORDERED_NODE_TYPE* {.importc.}: float
    BOOLEAN_TYPE* {.importc.}: float
    FIRST_ORDERED_NODE_TYPE* {.importc.}: float
    NUMBER_TYPE* {.importc.}: float
    ORDERED_NODE_ITERATOR_TYPE* {.importc.}: float
    ORDERED_NODE_SNAPSHOT_TYPE* {.importc.}: float
    STRING_TYPE* {.importc.}: float
    UNORDERED_NODE_ITERATOR_TYPE* {.importc.}: float
    UNORDERED_NODE_SNAPSHOT_TYPE* {.importc.}: float
  XPathExpression* {.importc.} = ref object of RootObj
  DocumentFragment* {.importc.} = ref object of Node
  Comment* {.importc.} = ref object of CharacterData
    text* {.importc.}: cstring
  Text* {.importc.} = ref object of CharacterData
    wholeText* {.importc.}: cstring
  CDATASection* {.importc.} = ref object of Text
  Element* {.importc.} = ref object of Node
    classList* {.importc.}: DOMTokenList
    clientHeight* {.importc.}: float
    clientLeft* {.importc.}: float
    clientTop* {.importc.}: float
    clientWidth* {.importc.}: float
    msContentZoomFactor* {.importc.}: float
    msRegionOverflow* {.importc.}: cstring
    scrollHeight* {.importc.}: float
    scrollLeft* {.importc.}: float
    scrollTop* {.importc.}: float
    scrollWidth* {.importc.}: float
    tagName* {.importc.}: cstring
    id* {.importc.}: cstring
    className* {.importc.}: cstring
    innerHTML* {.importc.}: cstring
  HTMLElement* {.importc.} = ref object of Element
    accessKey* {.importc.}: cstring
    children* {.importc.}: HTMLCollection
    contentEditable* {.importc.}: cstring
    dataset* {.importc.}: DOMStringMap
    dir* {.importc.}: cstring
    draggable* {.importc.}: bool
    hidden* {.importc.}: bool
    hideFocus* {.importc.}: bool
    innerText* {.importc.}: cstring
    isContentEditable* {.importc.}: bool
    lang* {.importc.}: cstring
    offsetHeight* {.importc.}: float
    offsetLeft* {.importc.}: float
    offsetParent* {.importc.}: Element
    offsetTop* {.importc.}: float
    offsetWidth* {.importc.}: float
    outerHTML* {.importc.}: cstring
    outerText* {.importc.}: cstring
    spellcheck* {.importc.}: bool
    style* {.importc.}: CSSStyleDeclaration
    tabIndex* {.importc.}: float
    title* {.importc.}: cstring
  HTMLScriptElement* {.importc.} = ref object of HTMLElement
    async* {.importc.}: bool
    charset* {.importc.}: cstring
    xDefer* {.importc: "defer".}: bool
    event* {.importc.}: cstring
    htmlFor* {.importc.}: cstring
    src* {.importc.}: cstring
    text* {.importc.}: cstring
    xType* {.importc: "type".}: cstring
  StyleSheet* {.importc.} = ref object of RootObj
    disabled* {.importc.}: bool
    href* {.importc.}: cstring
    media* {.importc.}: MediaList
    ownerNode* {.importc.}: Node
    parentStyleSheet* {.importc.}: StyleSheet
    title* {.importc.}: cstring
    xType* {.importc: "type".}: cstring
  StyleSheetList* {.importc.} = ref object of RootObj
    length* {.importc.}: float
  SVGElement* {.importc.} = ref object of Element
    ownerSVGElement* {.importc.}: SVGSVGElement
    viewportElement* {.importc.}: SVGElement
    xmlbase* {.importc.}: cstring
  SVGSVGElement* {.importc.} = ref object of SVGElement
    contentScriptType* {.importc.}: cstring
    contentStyleType* {.importc.}: cstring
    currentScale* {.importc.}: float
    currentTranslate* {.importc.}: SVGPoint
    height* {.importc.}: SVGAnimatedLength
    pixelUnitToMillimeterX* {.importc.}: float
    pixelUnitToMillimeterY* {.importc.}: float
    screenPixelToMillimeterX* {.importc.}: float
    screenPixelToMillimeterY* {.importc.}: float
    viewport* {.importc.}: SVGRect
    width* {.importc.}: SVGAnimatedLength
    x* {.importc.}: SVGAnimatedLength
    y* {.importc.}: SVGAnimatedLength
  DOMImplementation* {.importc.} = ref object of RootObj
  HTMLHeadElement* {.importc.} = ref object of HTMLElement
    profile* {.importc.}: cstring
  DocumentType* {.importc.} = ref object of Node
    entities* {.importc.}: NamedNodeMap
    internalSubset* {.importc.}: cstring
    name* {.importc.}: cstring
    notations* {.importc.}: NamedNodeMap
    publicId* {.importc.}: cstring
    systemId* {.importc.}: cstring
  MSInputMethodContext* {.importc.} = ref object of EventTarget
    compositionEndOffset* {.importc.}: float
    compositionStartOffset* {.importc.}: float
    target* {.importc.}: HTMLElement
  HTMLCollection* {.importc.} = ref object of RootObj
    length* {.importc.}: float
  Document* {.importc.} = ref object of Node
    URL* {.importc.}: cstring
    URLUnencoded* {.importc.}: cstring
    activeElement* {.importc.}: Element
    alinkColor* {.importc.}: cstring
    all* {.importc.}: HTMLCollection
    anchors* {.importc.}: HTMLCollection
    applets* {.importc.}: HTMLCollection
    bgColor* {.importc.}: cstring
    body* {.importc.}: HTMLElement
    characterSet* {.importc.}: cstring
    charset* {.importc.}: cstring
    compatMode* {.importc.}: cstring
    cookie* {.importc.}: cstring
    defaultCharset* {.importc.}: cstring
    defaultView* {.importc.}: Window
    designMode* {.importc.}: cstring
    dir* {.importc.}: cstring
    doctype* {.importc.}: DocumentType
    documentElement* {.importc.}: HTMLElement
    domain* {.importc.}: cstring
    embeds* {.importc.}: HTMLCollection
    fgColor* {.importc.}: cstring
    forms* {.importc.}: HTMLCollection
    fullscreenElement* {.importc.}: Element
    fullscreenEnabled* {.importc.}: bool
    head* {.importc.}: HTMLHeadElement
    hidden* {.importc.}: bool
    images* {.importc.}: HTMLCollection
    implementation* {.importc.}: DOMImplementation
    inputEncoding* {.importc.}: cstring
    lastModified* {.importc.}: cstring
    linkColor* {.importc.}: cstring
    links* {.importc.}: HTMLCollection
    location* {.importc.}: Location
    media* {.importc.}: cstring
    msCSSOMElementFloatMetrics* {.importc.}: bool
    msCapsLockWarningOff* {.importc.}: bool
    msHidden* {.importc.}: bool
    msVisibilityState* {.importc.}: cstring
    plugins* {.importc.}: HTMLCollection
    pointerLockElement* {.importc.}: Element
    readyState* {.importc.}: cstring
    referrer* {.importc.}: cstring
    rootElement* {.importc.}: SVGSVGElement
    scripts* {.importc.}: HTMLCollection
    security* {.importc.}: cstring
    styleSheets* {.importc.}: StyleSheetList
    title* {.importc.}: cstring
    visibilityState* {.importc.}: cstring
    vlinkColor* {.importc.}: cstring
    webkitCurrentFullScreenElement* {.importc.}: Element
    webkitFullscreenElement* {.importc.}: Element
    webkitFullscreenEnabled* {.importc.}: bool
    webkitIsFullScreen* {.importc.}: bool
    xmlEncoding* {.importc.}: cstring
    xmlStandalone* {.importc.}: bool
    xmlVersion* {.importc.}: cstring
    currentScript* {.importc.}: HTMLScriptElement
  NodeList* {.importc.} = ref object of RootObj
    length* {.importc.}: float
  NamedNodeMap* {.importc.} = ref object of RootObj
    length* {.importc.}: float
  Attr* {.importc.} = ref object of Node
    name* {.importc.}: cstring
    ownerElement* {.importc.}: Element
    specified* {.importc.}: bool
    value* {.importc.}: cstring
  Event* {.importc.} = ref object of RootObj
    bubbles* {.importc.}: bool
    cancelBubble* {.importc.}: bool
    cancelable* {.importc.}: bool
    currentTarget* {.importc.}: EventTarget
    defaultPrevented* {.importc.}: bool
    eventPhase* {.importc.}: float
    isTrusted* {.importc.}: bool
    returnValue* {.importc.}: bool
    srcElement* {.importc.}: Element
    target* {.importc.}: EventTarget
    timeStamp* {.importc.}: float
    xType* {.importc: "type".}: cstring
    AT_TARGET* {.importc.}: float
    BUBBLING_PHASE* {.importc.}: float
    CAPTURING_PHASE* {.importc.}: float
  EventListenerObject* {.importc.} = ref object of RootObj
  ApplicationCache* {.importc.} = ref object of EventTarget
    status* {.importc.}: float
    CHECKING* {.importc.}: float
    DOWNLOADING* {.importc.}: float
    IDLE* {.importc.}: float
    OBSOLETE* {.importc.}: float
    UNCACHED* {.importc.}: float
    UPDATEREADY* {.importc.}: float
  Window* {.importc.} = ref object of EventTarget
    animationStartTime* {.importc.}: float
    applicationCache* {.importc.}: ApplicationCache
    clientInformation* {.importc.}: Navigator
    closed* {.importc.}: bool
    crypto* {.importc.}: Crypto
    defaultStatus* {.importc.}: cstring
    devicePixelRatio* {.importc.}: float
    doNotTrack* {.importc.}: cstring
    document* {.importc.}: Document
    event* {.importc.}: Event
    external* {.importc.}: External
    frameElement* {.importc.}: Element
    frames* {.importc.}: Window
    history* {.importc.}: History
    innerHeight* {.importc.}: float
    innerWidth* {.importc.}: float
    length* {.importc.}: float
    location* {.importc.}: Location
    locationbar* {.importc.}: BarProp
    menubar* {.importc.}: BarProp
    msAnimationStartTime* {.importc.}: float
    name* {.importc.}: cstring
    navigator* {.importc.}: Navigator
    onerror* {.importc.}: ErrorEventHandler
    opener* {.importc.}: Window
    outerHeight* {.importc.}: float
    outerWidth* {.importc.}: float
    pageXOffset* {.importc.}: float
    pageYOffset* {.importc.}: float
    parent* {.importc.}: Window
    performance* {.importc.}: Performance
    personalbar* {.importc.}: BarProp
    screen* {.importc.}: Screen
    screenLeft* {.importc.}: float
    screenTop* {.importc.}: float
    screenX* {.importc.}: float
    screenY* {.importc.}: float
    scrollX* {.importc.}: float
    scrollY* {.importc.}: float
    scrollbars* {.importc.}: BarProp
    self* {.importc.}: Window
    status* {.importc.}: cstring
    statusbar* {.importc.}: BarProp
    styleMedia* {.importc.}: StyleMedia
    toolbar* {.importc.}: BarProp
    top* {.importc.}: Window
    window* {.importc.}: Window
    URL* {.importc.}: URL
proc newEventTarget*(): EventTarget {.importcpp: "new EventTarget".}
proc addEventListener*(self: EventTarget, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: EventTarget, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc dispatchEvent*(self: EventTarget, evt: Event): bool {.importcpp.}
proc removeEventListener*(self: EventTarget, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc removeEventListener*(self: EventTarget, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc newScreen*(): Screen {.importcpp: "new Screen".}
proc msUnlockOrientation*(self: Screen): void {.importcpp.}
proc addEventListener*(self: Screen, xType: cstring, listener: EventListener,
    useCapture: bool): void {.importcpp.}
proc addEventListener*(self: Screen, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc newNavigator*(): Navigator {.importcpp: "new Navigator".}
proc javaEnabled*(self: Navigator): bool {.importcpp.}
proc msLaunchUri*(self: Navigator, uri: cstring,
    successCallback: MSLaunchUriCallback,
    noHandlerCallback: MSLaunchUriCallback): void {.importcpp.}
proc addEventListener*(self: Navigator, xType: cstring, listener: EventListener,
    useCapture: bool): void {.importcpp.}
proc addEventListener*(self: Navigator, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc item*(self: MSRangeCollection, index: float): Range {.importcpp.}
proc `[]`*(self: MSRangeCollection, index: float): Range {.importcpp: "#[#]".}
proc `[]=`*(self: MSRangeCollection, index: float,
    value: Range) {.importcpp: "#[#] = #".}
var MSRangeCollectionLength* {.importc: "MSRangeCollection.length",
    nodecl.}: float
proc MSRangeCollectionItem*(index: float): Range {.importc: "MSRangeCollection.item".}
proc addRange*(self: Selection, range: Range): void {.importcpp.}
proc collapse*(self: Selection, parentNode: Node,
    offset: float): void {.importcpp.}
proc collapseToEnd*(self: Selection): void {.importcpp.}
proc collapseToStart*(self: Selection): void {.importcpp.}
proc containsNode*(self: Selection, node: Node,
    partlyContained: bool): bool {.importcpp.}
proc deleteFromDocument*(self: Selection): void {.importcpp.}
proc empty*(self: Selection): void {.importcpp.}
proc extend*(self: Selection, newNode: Node, offset: float): void {.importcpp.}
proc getRangeAt*(self: Selection, index: float): Range {.importcpp.}
proc removeAllRanges*(self: Selection): void {.importcpp.}
proc removeRange*(self: Selection, range: Range): void {.importcpp.}
proc selectAllChildren*(self: Selection, parentNode: Node): void {.importcpp.}
proc setBaseAndExtent*(self: Selection, baseNode: Node, baseOffset: float,
    extentNode: Node, extentOffset: float): void {.importcpp.}
proc toString*(self: Selection): cstring {.importcpp.}
var SelectionAnchorNode* {.importc: "Selection.anchorNode", nodecl.}: Node
var SelectionAnchorOffset* {.importc: "Selection.anchorOffset", nodecl.}: float
var SelectionFocusNode* {.importc: "Selection.focusNode", nodecl.}: Node
var SelectionFocusOffset* {.importc: "Selection.focusOffset", nodecl.}: float
var SelectionIsCollapsed* {.importc: "Selection.isCollapsed", nodecl.}: bool
var SelectionRangeCount* {.importc: "Selection.rangeCount", nodecl.}: float
var SelectionType* {.importc: "Selection.type", nodecl.}: cstring
proc SelectionAddRange*(range: Range): void {.importc: "Selection.addRange".}
proc SelectionCollapse*(parentNode: Node,
    offset: float): void {.importc: "Selection.collapse".}
proc SelectionCollapseToEnd*(): void {.importc: "Selection.collapseToEnd".}
proc SelectionCollapseToStart*(): void {.importc: "Selection.collapseToStart".}
proc SelectionContainsNode*(node: Node, partlyContained: bool): bool {.importc: "Selection.containsNode".}
proc SelectionDeleteFromDocument*(): void {.importc: "Selection.deleteFromDocument".}
proc SelectionEmpty*(): void {.importc: "Selection.empty".}
proc SelectionExtend*(newNode: Node, offset: float): void {.importc: "Selection.extend".}
proc SelectionGetRangeAt*(index: float): Range {.importc: "Selection.getRangeAt".}
proc SelectionRemoveAllRanges*(): void {.importc: "Selection.removeAllRanges".}
proc SelectionRemoveRange*(range: Range): void {.importc: "Selection.removeRange".}
proc SelectionSelectAllChildren*(parentNode: Node): void {.importc: "Selection.selectAllChildren".}
proc SelectionSetBaseAndExtent*(baseNode: Node, baseOffset: float,
    extentNode: Node,
    extentOffset: float): void {.importc: "Selection.setBaseAndExtent".}
proc SelectionToString*(): cstring {.importc: "Selection.toString".}
proc firstChild*(self: TreeWalker): Node {.importcpp.}
proc lastChild*(self: TreeWalker): Node {.importcpp.}
proc nextNode*(self: TreeWalker): Node {.importcpp.}
proc nextSibling*(self: TreeWalker): Node {.importcpp.}
proc parentNode*(self: TreeWalker): Node {.importcpp.}
proc previousNode*(self: TreeWalker): Node {.importcpp.}
proc previousSibling*(self: TreeWalker): Node {.importcpp.}
var TreeWalkerCurrentNode* {.importc: "TreeWalker.currentNode", nodecl.}: Node
var TreeWalkerExpandEntityReferences* {.importc: "TreeWalker.expandEntityReferences", nodecl.}: bool
var TreeWalkerFilter* {.importc: "TreeWalker.filter", nodecl.}: NodeFilter
var TreeWalkerRoot* {.importc: "TreeWalker.root", nodecl.}: Node
var TreeWalkerWhatToShow* {.importc: "TreeWalker.whatToShow", nodecl.}: float
proc TreeWalkerFirstChild*(): Node {.importc: "TreeWalker.firstChild".}
proc TreeWalkerLastChild*(): Node {.importc: "TreeWalker.lastChild".}
proc TreeWalkerNextNode*(): Node {.importc: "TreeWalker.nextNode".}
proc TreeWalkerNextSibling*(): Node {.importc: "TreeWalker.nextSibling".}
proc TreeWalkerParentNode*(): Node {.importc: "TreeWalker.parentNode".}
proc TreeWalkerPreviousNode*(): Node {.importc: "TreeWalker.previousNode".}
proc TreeWalkerPreviousSibling*(): Node {.importc: "TreeWalker.previousSibling".}
proc cloneContents*(self: Range): DocumentFragment {.importcpp.}
proc cloneRange*(self: Range): Range {.importcpp.}
proc collapse*(self: Range, toStart: bool): void {.importcpp.}
proc compareBoundaryPoints*(self: Range, how: float,
    sourceRange: Range): float {.importcpp.}
proc createContextualFragment*(self: Range,
    fragment: cstring): DocumentFragment {.importcpp.}
proc deleteContents*(self: Range): void {.importcpp.}
proc detach*(self: Range): void {.importcpp.}
proc expand*(self: Range, Unit: cstring): bool {.importcpp.}
proc extractContents*(self: Range): DocumentFragment {.importcpp.}
proc getBoundingClientRect*(self: Range): ClientRect {.importcpp.}
proc getClientRects*(self: Range): ClientRectList {.importcpp.}
proc insertNode*(self: Range, newNode: Node): void {.importcpp.}
proc selectNode*(self: Range, refNode: Node): void {.importcpp.}
proc selectNodeContents*(self: Range, refNode: Node): void {.importcpp.}
proc setEnd*(self: Range, refNode: Node, offset: float): void {.importcpp.}
proc setEndAfter*(self: Range, refNode: Node): void {.importcpp.}
proc setEndBefore*(self: Range, refNode: Node): void {.importcpp.}
proc setStart*(self: Range, refNode: Node, offset: float): void {.importcpp.}
proc setStartAfter*(self: Range, refNode: Node): void {.importcpp.}
proc setStartBefore*(self: Range, refNode: Node): void {.importcpp.}
proc surroundContents*(self: Range, newParent: Node): void {.importcpp.}
proc toString*(self: Range): cstring {.importcpp.}
var RangeCollapsed* {.importc: "Range.collapsed", nodecl.}: bool
var RangeCommonAncestorContainer* {.importc: "Range.commonAncestorContainer", nodecl.}: Node
var RangeEndContainer* {.importc: "Range.endContainer", nodecl.}: Node
var RangeEndOffset* {.importc: "Range.endOffset", nodecl.}: float
var RangeStartContainer* {.importc: "Range.startContainer", nodecl.}: Node
var RangeStartOffset* {.importc: "Range.startOffset", nodecl.}: float
var RangeEND_TO_END* {.importc: "Range.END_TO_END", nodecl.}: float
var RangeEND_TO_START* {.importc: "Range.END_TO_START", nodecl.}: float
var RangeSTART_TO_END* {.importc: "Range.START_TO_END", nodecl.}: float
var RangeSTART_TO_START* {.importc: "Range.START_TO_START", nodecl.}: float
proc RangeCloneContents*(): DocumentFragment {.importc: "Range.cloneContents".}
proc RangeCloneRange*(): Range {.importc: "Range.cloneRange".}
proc RangeCollapse*(toStart: bool): void {.importc: "Range.collapse".}
proc RangeCompareBoundaryPoints*(how: float,
    sourceRange: Range): float {.importc: "Range.compareBoundaryPoints".}
proc RangeCreateContextualFragment*(fragment: cstring): DocumentFragment {.importc: "Range.createContextualFragment".}
proc RangeDeleteContents*(): void {.importc: "Range.deleteContents".}
proc RangeDetach*(): void {.importc: "Range.detach".}
proc RangeExpand*(Unit: cstring): bool {.importc: "Range.expand".}
proc RangeExtractContents*(): DocumentFragment {.importc: "Range.extractContents".}
proc RangeGetBoundingClientRect*(): ClientRect {.importc: "Range.getBoundingClientRect".}
proc RangeGetClientRects*(): ClientRectList {.importc: "Range.getClientRects".}
proc RangeInsertNode*(newNode: Node): void {.importc: "Range.insertNode".}
proc RangeSelectNode*(refNode: Node): void {.importc: "Range.selectNode".}
proc RangeSelectNodeContents*(refNode: Node): void {.importc: "Range.selectNodeContents".}
proc RangeSetEnd*(refNode: Node, offset: float): void {.importc: "Range.setEnd".}
proc RangeSetEndAfter*(refNode: Node): void {.importc: "Range.setEndAfter".}
proc RangeSetEndBefore*(refNode: Node): void {.importc: "Range.setEndBefore".}
proc RangeSetStart*(refNode: Node, offset: float): void {.importc: "Range.setStart".}
proc RangeSetStartAfter*(refNode: Node): void {.importc: "Range.setStartAfter".}
proc RangeSetStartBefore*(refNode: Node): void {.importc: "Range.setStartBefore".}
proc RangeSurroundContents*(newParent: Node): void {.importc: "Range.surroundContents".}
proc RangeToString*(): cstring {.importc: "Range.toString".}
proc newNode*(): Node {.importcpp: "new Node".}
proc appendChild*(self: Node, newChild: Node): Node {.importcpp.}
proc cloneNode*(self: Node, deep: bool): Node {.importcpp.}
proc compareDocumentPosition*(self: Node, other: Node): float {.importcpp.}
proc hasAttributes*(self: Node): bool {.importcpp.}
proc hasChildNodes*(self: Node): bool {.importcpp.}
proc insertBefore*(self: Node, newChild: Node,
    refChild: Node): Node {.importcpp.}
proc isDefaultNamespace*(self: Node, namespaceURI: cstring): bool {.importcpp.}
proc isEqualNode*(self: Node, arg: Node): bool {.importcpp.}
proc isSameNode*(self: Node, other: Node): bool {.importcpp.}
proc lookupNamespaceURI*(self: Node, prefix: cstring): cstring {.importcpp.}
proc lookupPrefix*(self: Node, namespaceURI: cstring): cstring {.importcpp.}
proc normalize*(self: Node): void {.importcpp.}
proc removeChild*(self: Node, oldChild: Node): Node {.importcpp.}
proc replaceChild*(self: Node, newChild: Node,
    oldChild: Node): Node {.importcpp.}
proc contains*(self: Node, node: Node): bool {.importcpp.}
proc newCharacterData*(): CharacterData {.importcpp: "new CharacterData".}
proc appendData*(self: CharacterData, arg: cstring): void {.importcpp.}
proc deleteData*(self: CharacterData, offset: float,
    count: float): void {.importcpp.}
proc insertData*(self: CharacterData, offset: float,
    arg: cstring): void {.importcpp.}
proc replaceData*(self: CharacterData, offset: float, count: float,
    arg: cstring): void {.importcpp.}
proc substringData*(self: CharacterData, offset: float,
    count: float): cstring {.importcpp.}
proc addEventListener*(self: CharacterData, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: CharacterData, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var ProcessingInstructionTarget* {.importc: "ProcessingInstruction.target",
    nodecl.}: cstring
proc detach*(self: NodeIterator): void {.importcpp.}
proc nextNode*(self: NodeIterator): Node {.importcpp.}
proc previousNode*(self: NodeIterator): Node {.importcpp.}
var NodeIteratorExpandEntityReferences *
  {.importc: "NodeIterator.expandEntityReferences", nodecl.}: bool
var NodeIteratorFilter* {.importc: "NodeIterator.filter", nodecl.}: NodeFilter
var NodeIteratorRoot* {.importc: "NodeIterator.root", nodecl.}: Node
var NodeIteratorWhatToShow* {.importc: "NodeIterator.whatToShow",
    nodecl.}: float
proc NodeIteratorDetach*(): void {.importc: "NodeIterator.detach".}
proc NodeIteratorNextNode*(): Node {.importc: "NodeIterator.nextNode".}
proc NodeIteratorPreviousNode*(): Node {.importc: "NodeIterator.previousNode".}
proc acceptNode*(self: NodeFilter, n: Node): float {.importcpp.}
proc NodeFilterAcceptNode*(n: Node): float {.importc: "NodeFilter.acceptNode".}
proc iterateNext*(self: XPathResult): Node {.importcpp.}
proc snapshotItem*(self: XPathResult, index: float): Node {.importcpp.}
var XPathResultBooleanValue* {.importc: "XPathResult.booleanValue", nodecl.}: bool
var XPathResultInvalidIteratorState* {.importc: "XPathResult.invalidIteratorState", nodecl.}: bool
var XPathResultNumberValue* {.importc: "XPathResult.numberValue",
    nodecl.}: float
var XPathResultResultType* {.importc: "XPathResult.resultType", nodecl.}: float
var XPathResultSingleNodeValue* {.importc: "XPathResult.singleNodeValue", nodecl.}: Node
var XPathResultSnapshotLength* {.importc: "XPathResult.snapshotLength",
    nodecl.}: float
var XPathResultStringValue* {.importc: "XPathResult.stringValue",
    nodecl.}: cstring
var XPathResultANY_TYPE* {.importc: "XPathResult.ANY_TYPE", nodecl.}: float
var XPathResultANY_UNORDERED_NODE_TYPE *
  {.importc: "XPathResult.ANY_UNORDERED_NODE_TYPE", nodecl.}: float
var XPathResultBOOLEAN_TYPE* {.importc: "XPathResult.BOOLEAN_TYPE",
    nodecl.}: float
var XPathResultFIRST_ORDERED_NODE_TYPE *
  {.importc: "XPathResult.FIRST_ORDERED_NODE_TYPE", nodecl.}: float
var XPathResultNUMBER_TYPE* {.importc: "XPathResult.NUMBER_TYPE",
    nodecl.}: float
var XPathResultORDERED_NODE_ITERATOR_TYPE *
  {.importc: "XPathResult.ORDERED_NODE_ITERATOR_TYPE", nodecl.}: float
var XPathResultORDERED_NODE_SNAPSHOT_TYPE *
  {.importc: "XPathResult.ORDERED_NODE_SNAPSHOT_TYPE", nodecl.}: float
var XPathResultSTRING_TYPE* {.importc: "XPathResult.STRING_TYPE",
    nodecl.}: float
var XPathResultUNORDERED_NODE_ITERATOR_TYPE *
  {.importc: "XPathResult.UNORDERED_NODE_ITERATOR_TYPE", nodecl.}: float
var XPathResultUNORDERED_NODE_SNAPSHOT_TYPE *
  {.importc: "XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE", nodecl.}: float
proc XPathResultIterateNext*(): Node {.importc: "XPathResult.iterateNext".}
proc XPathResultSnapshotItem*(index: float): Node {.importc: "XPathResult.snapshotItem".}
proc evaluate*(self: XPathExpression, contextNode: Node, xType: float,
    result: XPathResult): XPathExpression {.importcpp.}
proc XPathExpressionEvaluate*(contextNode: Node, xType: float,
    result: XPathResult): XPathExpression {.importc: "XPathExpression.evaluate".}
proc addEventListener*(self: DocumentFragment, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: DocumentFragment, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc DocumentFragmentAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "DocumentFragment.addEventListener".}
proc DocumentFragmentAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "DocumentFragment.addEventListener".}
proc newComment*(): Comment {.importcpp: "new Comment".}
proc newText*(): Text {.importcpp: "new Text".}
proc replaceWholeText*(self: Text, content: cstring): Text {.importcpp.}
proc splitText*(self: Text, offset: float): Text {.importcpp.}
proc newCDATASection*(): CDATASection {.importcpp: "new CDATASection".}
proc getAttribute*(self: Element, name: cstring): cstring {.importcpp.}
proc getAttributeNS*(self: Element, namespaceURI: cstring,
    localName: cstring): cstring {.importcpp.}
proc getAttributeNode*(self: Element, name: cstring): Attr {.importcpp.}
proc getAttributeNodeNS*(self: Element, namespaceURI: cstring,
    localName: cstring): Attr {.importcpp.}
proc getBoundingClientRect*(self: Element): ClientRect {.importcpp.}
proc getClientRects*(self: Element): ClientRectList {.importcpp.}
proc hasAttribute*(self: Element, name: cstring): bool {.importcpp.}
proc hasAttributeNS*(self: Element, namespaceURI: cstring,
    localName: cstring): bool {.importcpp.}
proc msGetRegionContent*(self: Element): MSRangeCollection {.importcpp.}
proc msGetUntransformedBounds*(self: Element): ClientRect {.importcpp.}
proc msMatchesSelector*(self: Element, selectors: cstring): bool {.importcpp.}
proc msReleasePointerCapture*(self: Element,
    pointerId: float): void {.importcpp.}
proc msSetPointerCapture*(self: Element, pointerId: float): void {.importcpp.}
proc msZoomTo*(self: Element, args: MsZoomToOptions): void {.importcpp.}
proc releasePointerCapture*(self: Element, pointerId: float): void {.importcpp.}
proc removeAttribute*(self: Element, name: cstring): void {.importcpp.}
proc removeAttributeNS*(self: Element, namespaceURI: cstring,
    localName: cstring): void {.importcpp.}
proc removeAttributeNode*(self: Element, oldAttr: Attr): Attr {.importcpp.}
proc requestFullscreen*(self: Element): void {.importcpp.}
proc requestPointerLock*(self: Element): void {.importcpp.}
proc setAttribute*(self: Element, name: cstring,
    value: cstring): void {.importcpp.}
proc setAttributeNS*(self: Element, namespaceURI: cstring,
    qualifiedName: cstring, value: cstring): void {.importcpp.}
proc setAttributeNode*(self: Element, newAttr: Attr): Attr {.importcpp.}
proc setAttributeNodeNS*(self: Element, newAttr: Attr): Attr {.importcpp.}
proc setPointerCapture*(self: Element, pointerId: float): void {.importcpp.}
proc webkitMatchesSelector*(self: Element,
    selectors: cstring): bool {.importcpp.}
proc webkitRequestFullscreen*(self: Element): void {.importcpp.}
proc matches*(self: Element, selector: cstring): bool {.importcpp.}
proc addEventListener*(self: Element, xType: cstring, listener: EventListener,
    useCapture: bool): void {.importcpp.}
proc addEventListener*(self: Element, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var ElementClassList* {.importc: "Element.classList", nodecl.}: DOMTokenList
var ElementClientHeight* {.importc: "Element.clientHeight", nodecl.}: float
var ElementClientLeft* {.importc: "Element.clientLeft", nodecl.}: float
var ElementClientTop* {.importc: "Element.clientTop", nodecl.}: float
var ElementClientWidth* {.importc: "Element.clientWidth", nodecl.}: float
var ElementMsContentZoomFactor* {.importc: "Element.msContentZoomFactor",
    nodecl.}: float
var ElementMsRegionOverflow* {.importc: "Element.msRegionOverflow",
    nodecl.}: cstring
var ElementScrollHeight* {.importc: "Element.scrollHeight", nodecl.}: float
var ElementScrollLeft* {.importc: "Element.scrollLeft", nodecl.}: float
var ElementScrollTop* {.importc: "Element.scrollTop", nodecl.}: float
var ElementScrollWidth* {.importc: "Element.scrollWidth", nodecl.}: float
var ElementTagName* {.importc: "Element.tagName", nodecl.}: cstring
var ElementId* {.importc: "Element.id", nodecl.}: cstring
var ElementClassName* {.importc: "Element.className", nodecl.}: cstring
var ElementInnerHTML* {.importc: "Element.innerHTML", nodecl.}: cstring
proc ElementGetAttribute*(name: cstring): cstring {.importc: "Element.getAttribute".}
proc ElementGetAttributeNS*(namespaceURI: cstring,
    localName: cstring): cstring {.importc: "Element.getAttributeNS".}
proc ElementGetAttributeNode*(name: cstring): Attr {.importc: "Element.getAttributeNode".}
proc ElementGetAttributeNodeNS*(namespaceURI: cstring,
    localName: cstring): Attr {.importc: "Element.getAttributeNodeNS".}
proc ElementGetBoundingClientRect*(): ClientRect {.importc: "Element.getBoundingClientRect".}
proc ElementGetClientRects*(): ClientRectList {.importc: "Element.getClientRects".}
proc ElementHasAttribute*(name: cstring): bool {.importc: "Element.hasAttribute".}
proc ElementHasAttributeNS*(namespaceURI: cstring,
    localName: cstring): bool {.importc: "Element.hasAttributeNS".}
proc ElementMsGetRegionContent*(): MSRangeCollection {.importc: "Element.msGetRegionContent".}
proc ElementMsGetUntransformedBounds*(): ClientRect {.importc: "Element.msGetUntransformedBounds".}
proc ElementMsMatchesSelector*(selectors: cstring): bool {.importc: "Element.msMatchesSelector".}
proc ElementMsReleasePointerCapture*(pointerId: float): void {.importc: "Element.msReleasePointerCapture".}
proc ElementMsSetPointerCapture*(pointerId: float): void {.importc: "Element.msSetPointerCapture".}
proc ElementMsZoomTo*(args: MsZoomToOptions): void {.importc: "Element.msZoomTo".}
proc ElementReleasePointerCapture*(pointerId: float): void {.importc: "Element.releasePointerCapture".}
proc ElementRemoveAttribute*(name: cstring): void {.importc: "Element.removeAttribute".}
proc ElementRemoveAttributeNS*(namespaceURI: cstring,
    localName: cstring): void {.importc: "Element.removeAttributeNS".}
proc ElementRemoveAttributeNode*(oldAttr: Attr): Attr {.importc: "Element.removeAttributeNode".}
proc ElementRequestFullscreen*(): void {.importc: "Element.requestFullscreen".}
proc ElementRequestPointerLock*(): void {.importc: "Element.requestPointerLock".}
proc ElementSetAttribute*(name: cstring,
    value: cstring): void {.importc: "Element.setAttribute".}
proc ElementSetAttributeNS*(namespaceURI: cstring, qualifiedName: cstring,
    value: cstring): void {.importc: "Element.setAttributeNS".}
proc ElementSetAttributeNode*(newAttr: Attr): Attr {.importc: "Element.setAttributeNode".}
proc ElementSetAttributeNodeNS*(newAttr: Attr): Attr {.importc: "Element.setAttributeNodeNS".}
proc ElementSetPointerCapture*(pointerId: float): void {.importc: "Element.setPointerCapture".}
proc ElementWebkitMatchesSelector*(selectors: cstring): bool {.importc: "Element.webkitMatchesSelector".}
proc ElementWebkitRequestFullscreen*(): void {.importc: "Element.webkitRequestFullscreen".}
proc ElementMatches*(selector: cstring): bool {.importc: "Element.matches".}
proc ElementAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "Element.addEventListener".}
proc ElementAddEventListener*(xType: cstring, listener: EventListenerObject,
    useCapture: bool): void {.importc: "Element.addEventListener".}
proc blur*(self: HTMLElement): void {.importcpp.}
proc click*(self: HTMLElement): void {.importcpp.}
proc dragDrop*(self: HTMLElement): bool {.importcpp.}
proc focus*(self: HTMLElement): void {.importcpp.}
proc insertAdjacentElement*(self: HTMLElement, position: cstring,
    insertedElement: Element): Element {.importcpp.}
proc insertAdjacentHTML*(self: HTMLElement, where: cstring,
    html: cstring): void {.importcpp.}
proc insertAdjacentText*(self: HTMLElement, where: cstring,
    text: cstring): void {.importcpp.}
proc msGetInputContext*(self: HTMLElement): MSInputMethodContext {.importcpp.}
proc scrollIntoView*(self: HTMLElement, top: bool): void {.importcpp.}
proc setActive*(self: HTMLElement): void {.importcpp.}
proc addEventListener*(self: HTMLElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var HTMLElementAccessKey* {.importc: "HTMLElement.accessKey", nodecl.}: cstring
var HTMLElementChildren* {.importc: "HTMLElement.children",
    nodecl.}: HTMLCollection
var HTMLElementContentEditable* {.importc: "HTMLElement.contentEditable",
    nodecl.}: cstring
var HTMLElementDataset* {.importc: "HTMLElement.dataset", nodecl.}: DOMStringMap
var HTMLElementDir* {.importc: "HTMLElement.dir", nodecl.}: cstring
var HTMLElementDraggable* {.importc: "HTMLElement.draggable", nodecl.}: bool
var HTMLElementHidden* {.importc: "HTMLElement.hidden", nodecl.}: bool
var HTMLElementHideFocus* {.importc: "HTMLElement.hideFocus", nodecl.}: bool
var HTMLElementInnerHTML* {.importc: "HTMLElement.innerHTML", nodecl.}: cstring
var HTMLElementInnerText* {.importc: "HTMLElement.innerText", nodecl.}: cstring
var HTMLElementIsContentEditable* {.importc: "HTMLElement.isContentEditable", nodecl.}: bool
var HTMLElementLang* {.importc: "HTMLElement.lang", nodecl.}: cstring
var HTMLElementOffsetHeight* {.importc: "HTMLElement.offsetHeight",
    nodecl.}: float
var HTMLElementOffsetLeft* {.importc: "HTMLElement.offsetLeft", nodecl.}: float
var HTMLElementOffsetParent* {.importc: "HTMLElement.offsetParent",
    nodecl.}: Element
var HTMLElementOffsetTop* {.importc: "HTMLElement.offsetTop", nodecl.}: float
var HTMLElementOffsetWidth* {.importc: "HTMLElement.offsetWidth",
    nodecl.}: float
var HTMLElementOuterHTML* {.importc: "HTMLElement.outerHTML", nodecl.}: cstring
var HTMLElementOuterText* {.importc: "HTMLElement.outerText", nodecl.}: cstring
var HTMLElementSpellcheck* {.importc: "HTMLElement.spellcheck", nodecl.}: bool
var HTMLElementStyle* {.importc: "HTMLElement.style",
    nodecl.}: CSSStyleDeclaration
var HTMLElementTabIndex* {.importc: "HTMLElement.tabIndex", nodecl.}: float
var HTMLElementTitle* {.importc: "HTMLElement.title", nodecl.}: cstring
proc HTMLElementBlur*(): void {.importc: "HTMLElement.blur".}
proc HTMLElementClick*(): void {.importc: "HTMLElement.click".}
proc HTMLElementDragDrop*(): bool {.importc: "HTMLElement.dragDrop".}
proc HTMLElementFocus*(): void {.importc: "HTMLElement.focus".}
proc HTMLElementInsertAdjacentElement*(position: cstring,
    insertedElement: Element): Element {.importc: "HTMLElement.insertAdjacentElement".}
proc HTMLElementInsertAdjacentHTML*(where: cstring,
    html: cstring): void {.importc: "HTMLElement.insertAdjacentHTML".}
proc HTMLElementInsertAdjacentText*(where: cstring,
    text: cstring): void {.importc: "HTMLElement.insertAdjacentText".}
proc HTMLElementMsGetInputContext*(): MSInputMethodContext {.importc: "HTMLElement.msGetInputContext".}
proc HTMLElementScrollIntoView*(top: bool): void {.importc: "HTMLElement.scrollIntoView".}
proc HTMLElementSetActive*(): void {.importc: "HTMLElement.setActive".}
proc HTMLElementAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "HTMLElement.addEventListener".}
proc HTMLElementAddEventListener*(xType: cstring, listener: EventListenerObject,
    useCapture: bool): void {.importc: "HTMLElement.addEventListener".}
var HTMLScriptElementAsync* {.importc: "HTMLScriptElement.async", nodecl.}: bool
var HTMLScriptElementCharset* {.importc: "HTMLScriptElement.charset",
    nodecl.}: cstring
var HTMLScriptElementDefer* {.importc: "HTMLScriptElement.defer", nodecl.}: bool
var HTMLScriptElementEvent* {.importc: "HTMLScriptElement.event",
    nodecl.}: cstring
var HTMLScriptElementHtmlFor* {.importc: "HTMLScriptElement.htmlFor",
    nodecl.}: cstring
var HTMLScriptElementSrc* {.importc: "HTMLScriptElement.src", nodecl.}: cstring
var HTMLScriptElementText* {.importc: "HTMLScriptElement.text",
    nodecl.}: cstring
var HTMLScriptElementType* {.importc: "HTMLScriptElement.type",
    nodecl.}: cstring
proc newStyleSheet*(): StyleSheet {.importcpp: "new StyleSheet".}
proc item*(self: StyleSheetList, index: float): StyleSheet {.importcpp.}
proc `[]`*(self: StyleSheetList, index: float): StyleSheet {.importcpp: "#[#]".}
proc `[]=`*(self: StyleSheetList, index: float,
    value: StyleSheet) {.importcpp: "#[#] = #".}
var StyleSheetListLength* {.importc: "StyleSheetList.length", nodecl.}: float
proc StyleSheetListItem*(index: float): StyleSheet {.importc: "StyleSheetList.item".}
proc newSVGElement*(): SVGElement {.importcpp: "new SVGElement".}
proc addEventListener*(self: SVGElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc checkEnclosure*(self: SVGSVGElement, element: SVGElement,
    rect: SVGRect): bool {.importcpp.}
proc checkIntersection*(self: SVGSVGElement, element: SVGElement,
    rect: SVGRect): bool {.importcpp.}
proc createSVGAngle*(self: SVGSVGElement): SVGAngle {.importcpp.}
proc createSVGLength*(self: SVGSVGElement): SVGLength {.importcpp.}
proc createSVGMatrix*(self: SVGSVGElement): SVGMatrix {.importcpp.}
proc createSVGNumber*(self: SVGSVGElement): SVGNumber {.importcpp.}
proc createSVGPoint*(self: SVGSVGElement): SVGPoint {.importcpp.}
proc createSVGRect*(self: SVGSVGElement): SVGRect {.importcpp.}
proc createSVGTransform*(self: SVGSVGElement): SVGTransform {.importcpp.}
proc createSVGTransformFromMatrix*(self: SVGSVGElement,
    matrix: SVGMatrix): SVGTransform {.importcpp.}
proc deselectAll*(self: SVGSVGElement): void {.importcpp.}
proc forceRedraw*(self: SVGSVGElement): void {.importcpp.}
proc getComputedStyle*(self: SVGSVGElement, elt: Element,
    pseudoElt: cstring): CSSStyleDeclaration {.importcpp.}
proc getCurrentTime*(self: SVGSVGElement): float {.importcpp.}
proc getElementById*(self: SVGSVGElement,
    elementId: cstring): Element {.importcpp.}
proc getEnclosureList*(self: SVGSVGElement, rect: SVGRect,
    referenceElement: SVGElement): NodeList {.importcpp.}
proc getIntersectionList*(self: SVGSVGElement, rect: SVGRect,
    referenceElement: SVGElement): NodeList {.importcpp.}
proc pauseAnimations*(self: SVGSVGElement): void {.importcpp.}
proc setCurrentTime*(self: SVGSVGElement, seconds: float): void {.importcpp.}
proc suspendRedraw*(self: SVGSVGElement,
    maxWaitMilliseconds: float): float {.importcpp.}
proc unpauseAnimations*(self: SVGSVGElement): void {.importcpp.}
proc unsuspendRedraw*(self: SVGSVGElement,
    suspendHandleID: float): void {.importcpp.}
proc unsuspendRedrawAll*(self: SVGSVGElement): void {.importcpp.}
proc addEventListener*(self: SVGSVGElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGSVGElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var SVGSVGElementContentScriptType* {.importc: "SVGSVGElement.contentScriptType",
    nodecl.}: cstring
var SVGSVGElementContentStyleType* {.importc: "SVGSVGElement.contentStyleType",
    nodecl.}: cstring
var SVGSVGElementCurrentScale* {.importc: "SVGSVGElement.currentScale",
    nodecl.}: float
var SVGSVGElementCurrentTranslate* {.importc: "SVGSVGElement.currentTranslate",
    nodecl.}: SVGPoint
var SVGSVGElementHeight* {.importc: "SVGSVGElement.height",
    nodecl.}: SVGAnimatedLength
var SVGSVGElementPixelUnitToMillimeterX *
  {.importc: "SVGSVGElement.pixelUnitToMillimeterX", nodecl.}: float
var SVGSVGElementPixelUnitToMillimeterY *
  {.importc: "SVGSVGElement.pixelUnitToMillimeterY", nodecl.}: float
var SVGSVGElementScreenPixelToMillimeterX *
  {.importc: "SVGSVGElement.screenPixelToMillimeterX", nodecl.}: float
var SVGSVGElementScreenPixelToMillimeterY *
  {.importc: "SVGSVGElement.screenPixelToMillimeterY", nodecl.}: float
var SVGSVGElementViewport* {.importc: "SVGSVGElement.viewport",
    nodecl.}: SVGRect
var SVGSVGElementWidth* {.importc: "SVGSVGElement.width",
    nodecl.}: SVGAnimatedLength
var SVGSVGElementX* {.importc: "SVGSVGElement.x", nodecl.}: SVGAnimatedLength
var SVGSVGElementY* {.importc: "SVGSVGElement.y", nodecl.}: SVGAnimatedLength
proc SVGSVGElementCheckEnclosure*(element: SVGElement,
    rect: SVGRect): bool {.importc: "SVGSVGElement.checkEnclosure".}
proc SVGSVGElementCheckIntersection*(element: SVGElement,
    rect: SVGRect): bool {.importc: "SVGSVGElement.checkIntersection".}
proc SVGSVGElementCreateSVGAngle*(): SVGAngle {.importc: "SVGSVGElement.createSVGAngle".}
proc SVGSVGElementCreateSVGLength*(): SVGLength {.importc: "SVGSVGElement.createSVGLength".}
proc SVGSVGElementCreateSVGMatrix*(): SVGMatrix {.importc: "SVGSVGElement.createSVGMatrix".}
proc SVGSVGElementCreateSVGNumber*(): SVGNumber {.importc: "SVGSVGElement.createSVGNumber".}
proc SVGSVGElementCreateSVGPoint*(): SVGPoint {.importc: "SVGSVGElement.createSVGPoint".}
proc SVGSVGElementCreateSVGRect*(): SVGRect {.importc: "SVGSVGElement.createSVGRect".}
proc SVGSVGElementCreateSVGTransform*(): SVGTransform {.importc: "SVGSVGElement.createSVGTransform".}
proc SVGSVGElementCreateSVGTransformFromMatrix*(
  matrix: SVGMatrix): SVGTransform {.importc: "SVGSVGElement.createSVGTransformFromMatrix".}
proc SVGSVGElementDeselectAll*(): void {.importc: "SVGSVGElement.deselectAll".}
proc SVGSVGElementForceRedraw*(): void {.importc: "SVGSVGElement.forceRedraw".}
proc SVGSVGElementGetComputedStyle*(elt: Element,
    pseudoElt: cstring): CSSStyleDeclaration {.importc: "SVGSVGElement.getComputedStyle".}
proc SVGSVGElementGetCurrentTime*(): float {.importc: "SVGSVGElement.getCurrentTime".}
proc SVGSVGElementGetElementById*(elementId: cstring): Element {.importc: "SVGSVGElement.getElementById".}
proc SVGSVGElementGetEnclosureList*(rect: SVGRect,
    referenceElement: SVGElement): NodeList {.importc: "SVGSVGElement.getEnclosureList".}
proc SVGSVGElementGetIntersectionList*(rect: SVGRect,
    referenceElement: SVGElement): NodeList {.importc: "SVGSVGElement.getIntersectionList".}
proc SVGSVGElementPauseAnimations*(): void {.importc: "SVGSVGElement.pauseAnimations".}
proc SVGSVGElementSetCurrentTime*(seconds: float): void {.importc: "SVGSVGElement.setCurrentTime".}
proc SVGSVGElementSuspendRedraw*(maxWaitMilliseconds: float): float {.importc: "SVGSVGElement.suspendRedraw".}
proc SVGSVGElementUnpauseAnimations*(): void {.importc: "SVGSVGElement.unpauseAnimations".}
proc SVGSVGElementUnsuspendRedraw*(suspendHandleID: float): void {.importc: "SVGSVGElement.unsuspendRedraw".}
proc SVGSVGElementUnsuspendRedrawAll*(): void {.importc: "SVGSVGElement.unsuspendRedrawAll".}
proc SVGSVGElementAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "SVGSVGElement.addEventListener".}
proc SVGSVGElementAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "SVGSVGElement.addEventListener".}
proc newDOMImplementation*(): DOMImplementation {.importcpp: "new DOMImplementation".}
proc createDocument*(self: DOMImplementation, namespaceURI: cstring,
    qualifiedName: cstring, doctype: DocumentType): Document {.importcpp.}
proc createDocumentType*(self: DOMImplementation, qualifiedName: cstring,
    publicId: cstring, systemId: cstring): DocumentType {.importcpp.}
proc createHTMLDocument*(self: DOMImplementation,
    title: cstring): Document {.importcpp.}
proc hasFeature*(self: DOMImplementation, feature: cstring,
    version: cstring): bool {.importcpp.}
var HTMLHeadElementProfile* {.importc: "HTMLHeadElement.profile",
    nodecl.}: cstring
proc addEventListener*(self: DocumentType, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: DocumentType, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var DocumentTypeEntities* {.importc: "DocumentType.entities",
    nodecl.}: NamedNodeMap
var DocumentTypeInternalSubset* {.importc: "DocumentType.internalSubset",
    nodecl.}: cstring
var DocumentTypeName* {.importc: "DocumentType.name", nodecl.}: cstring
var DocumentTypeNotations* {.importc: "DocumentType.notations",
    nodecl.}: NamedNodeMap
var DocumentTypePublicId* {.importc: "DocumentType.publicId", nodecl.}: cstring
var DocumentTypeSystemId* {.importc: "DocumentType.systemId", nodecl.}: cstring
proc DocumentTypeAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "DocumentType.addEventListener".}
proc DocumentTypeAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "DocumentType.addEventListener".}
proc getCandidateWindowClientRect*(self: MSInputMethodContext): ClientRect {.importcpp.}
proc hasComposition*(self: MSInputMethodContext): bool {.importcpp.}
proc isCandidateWindowVisible*(self: MSInputMethodContext): bool {.importcpp.}
proc addEventListener*(self: MSInputMethodContext, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: MSInputMethodContext, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var MSInputMethodContextCompositionEndOffset *
  {.importc: "MSInputMethodContext.compositionEndOffset", nodecl.}: float
var MSInputMethodContextCompositionStartOffset *
  {.importc: "MSInputMethodContext.compositionStartOffset", nodecl.}: float
var MSInputMethodContextTarget* {.importc: "MSInputMethodContext.target",
    nodecl.}: HTMLElement
proc MSInputMethodContextGetCandidateWindowClientRect*(): ClientRect {.importc: "MSInputMethodContext.getCandidateWindowClientRect".}
proc MSInputMethodContextHasComposition*(): bool {.importc: "MSInputMethodContext.hasComposition".}
proc MSInputMethodContextIsCandidateWindowVisible*(): bool {.importc: "MSInputMethodContext.isCandidateWindowVisible".}
proc MSInputMethodContextAddEventListener*(xType: cstring,
    listener: EventListener,
    useCapture: bool): void {.importc: "MSInputMethodContext.addEventListener".}
proc MSInputMethodContextAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "MSInputMethodContext.addEventListener".}
proc namedItem*(self: HTMLCollection, name: cstring): Element {.importcpp.}
proc `[]`*(self: HTMLCollection, index: float): Element {.importcpp: "#[#]".}
proc `[]=`*(self: HTMLCollection, index: float,
    value: Element) {.importcpp: "#[#] = #".}
var HTMLCollectionLength* {.importc: "HTMLCollection.length", nodecl.}: float
proc HTMLCollectionNamedItem*(name: cstring): Element {.importc: "HTMLCollection.namedItem".}
proc adoptNode*(self: Document, source: Node): Node {.importcpp.}
proc captureEvents*(self: Document): void {.importcpp.}
proc clear*(self: Document): void {.importcpp.}
proc close*(self: Document): void {.importcpp.}
proc createAttribute*(self: Document, name: cstring): Attr {.importcpp.}
proc createAttributeNS*(self: Document, namespaceURI: cstring,
    qualifiedName: cstring): Attr {.importcpp.}
proc createCDATASection*(self: Document,
    data: cstring): CDATASection {.importcpp.}
proc createComment*(self: Document, data: cstring): Comment {.importcpp.}
proc createDocumentFragment*(self: Document): DocumentFragment {.importcpp.}
proc createElement*(self: Document, tagName: cstring): HTMLElement {.importcpp.}
proc createElementNS*(self: Document, namespaceURI: cstring,
    qualifiedName: cstring): Element {.importcpp.}
proc createExpression*(self: Document, expression: cstring,
    resolver: XPathNSResolver): XPathExpression {.importcpp.}
proc createNSResolver*(self: Document, nodeResolver: Node): XPathNSResolver {.importcpp.}
proc createNodeIterator*(self: Document, root: Node, whatToShow: float,
    filter: NodeFilter,
    entityReferenceExpansion: bool): NodeIterator {.importcpp.}
proc createProcessingInstruction*(self: Document, target: cstring,
    data: cstring): ProcessingInstruction {.importcpp.}
proc createRange*(self: Document): Range {.importcpp.}
proc createTextNode*(self: Document, data: cstring): Text {.importcpp.}
proc createTreeWalker*(self: Document, root: Node, whatToShow: float,
    filter: NodeFilter,
    entityReferenceExpansion: bool): TreeWalker {.importcpp.}
proc elementFromPoint*(self: Document, x: float,
    y: float): Element {.importcpp.}
proc evaluate*(self: Document, expression: cstring, contextNode: Node,
    resolver: XPathNSResolver, xType: float,
    result: XPathResult): XPathResult {.importcpp.}
proc execCommandShowHelp*(self: Document,
    commandId: cstring): bool {.importcpp.}
proc exitFullscreen*(self: Document): void {.importcpp.}
proc exitPointerLock*(self: Document): void {.importcpp.}
proc focus*(self: Document): void {.importcpp.}
proc getElementById*(self: Document, elementId: cstring): HTMLElement {.importcpp.}
proc getSelection*(self: Document): Selection {.importcpp.}
proc hasFocus*(self: Document): bool {.importcpp.}
proc importNode*(self: Document, importedNode: Node,
    deep: bool): Node {.importcpp.}
proc msElementsFromPoint*(self: Document, x: float,
    y: float): NodeList {.importcpp.}
proc msElementsFromRect*(self: Document, left: float, top: float, width: float,
    height: float): NodeList {.importcpp.}
proc open*(self: Document, url: cstring, name: cstring, features: cstring,
    replace: bool): Document {.importcpp.}
proc queryCommandEnabled*(self: Document,
    commandId: cstring): bool {.importcpp.}
proc queryCommandIndeterm*(self: Document,
    commandId: cstring): bool {.importcpp.}
proc queryCommandState*(self: Document, commandId: cstring): bool {.importcpp.}
proc queryCommandSupported*(self: Document,
    commandId: cstring): bool {.importcpp.}
proc queryCommandText*(self: Document, commandId: cstring): cstring {.importcpp.}
proc queryCommandValue*(self: Document, commandId: cstring): cstring {.importcpp.}
proc releaseEvents*(self: Document): void {.importcpp.}
proc updateSettings*(self: Document): void {.importcpp.}
proc webkitCancelFullScreen*(self: Document): void {.importcpp.}
proc webkitExitFullscreen*(self: Document): void {.importcpp.}
proc addEventListener*(self: Document, xType: cstring, listener: EventListener,
    useCapture: bool): void {.importcpp.}
proc addEventListener*(self: Document, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var DocumentURL* {.importc: "Document.URL", nodecl.}: cstring
var DocumentURLUnencoded* {.importc: "Document.URLUnencoded", nodecl.}: cstring
var DocumentActiveElement* {.importc: "Document.activeElement",
    nodecl.}: Element
var DocumentAlinkColor* {.importc: "Document.alinkColor", nodecl.}: cstring
var DocumentAll* {.importc: "Document.all", nodecl.}: HTMLCollection
var DocumentAnchors* {.importc: "Document.anchors", nodecl.}: HTMLCollection
var DocumentApplets* {.importc: "Document.applets", nodecl.}: HTMLCollection
var DocumentBgColor* {.importc: "Document.bgColor", nodecl.}: cstring
var DocumentBody* {.importc: "Document.body", nodecl.}: HTMLElement
var DocumentCharacterSet* {.importc: "Document.characterSet", nodecl.}: cstring
var DocumentCharset* {.importc: "Document.charset", nodecl.}: cstring
var DocumentCompatMode* {.importc: "Document.compatMode", nodecl.}: cstring
var DocumentCookie* {.importc: "Document.cookie", nodecl.}: cstring
var DocumentDefaultCharset* {.importc: "Document.defaultCharset",
    nodecl.}: cstring
var DocumentDefaultView* {.importc: "Document.defaultView", nodecl.}: Window
var DocumentDesignMode* {.importc: "Document.designMode", nodecl.}: cstring
var DocumentDir* {.importc: "Document.dir", nodecl.}: cstring
var DocumentDoctype* {.importc: "Document.doctype", nodecl.}: DocumentType
var DocumentDocumentElement* {.importc: "Document.documentElement",
    nodecl.}: HTMLElement
var DocumentDomain* {.importc: "Document.domain", nodecl.}: cstring
var DocumentEmbeds* {.importc: "Document.embeds", nodecl.}: HTMLCollection
var DocumentFgColor* {.importc: "Document.fgColor", nodecl.}: cstring
var DocumentForms* {.importc: "Document.forms", nodecl.}: HTMLCollection
var DocumentFullscreenElement* {.importc: "Document.fullscreenElement",
    nodecl.}: Element
var DocumentFullscreenEnabled* {.importc: "Document.fullscreenEnabled", nodecl.}: bool
var DocumentHead* {.importc: "Document.head", nodecl.}: HTMLHeadElement
var DocumentHidden* {.importc: "Document.hidden", nodecl.}: bool
var DocumentImages* {.importc: "Document.images", nodecl.}: HTMLCollection
var DocumentImplementation* {.importc: "Document.implementation",
    nodecl.}: DOMImplementation
var DocumentInputEncoding* {.importc: "Document.inputEncoding",
    nodecl.}: cstring
var DocumentLastModified* {.importc: "Document.lastModified", nodecl.}: cstring
var DocumentLinkColor* {.importc: "Document.linkColor", nodecl.}: cstring
var DocumentLinks* {.importc: "Document.links", nodecl.}: HTMLCollection
var DocumentLocation* {.importc: "Document.location", nodecl.}: Location
var DocumentMedia* {.importc: "Document.media", nodecl.}: cstring
var DocumentMsCSSOMElementFloatMetrics *
  {.importc: "Document.msCSSOMElementFloatMetrics", nodecl.}: bool
var DocumentMsCapsLockWarningOff* {.importc: "Document.msCapsLockWarningOff", nodecl.}: bool
var DocumentMsHidden* {.importc: "Document.msHidden", nodecl.}: bool
var DocumentMsVisibilityState* {.importc: "Document.msVisibilityState",
    nodecl.}: cstring
var DocumentPlugins* {.importc: "Document.plugins", nodecl.}: HTMLCollection
var DocumentPointerLockElement* {.importc: "Document.pointerLockElement",
    nodecl.}: Element
var DocumentReadyState* {.importc: "Document.readyState", nodecl.}: cstring
var DocumentReferrer* {.importc: "Document.referrer", nodecl.}: cstring
var DocumentRootElement* {.importc: "Document.rootElement",
    nodecl.}: SVGSVGElement
var DocumentScripts* {.importc: "Document.scripts", nodecl.}: HTMLCollection
var DocumentSecurity* {.importc: "Document.security", nodecl.}: cstring
var DocumentStyleSheets* {.importc: "Document.styleSheets",
    nodecl.}: StyleSheetList
var DocumentTitle* {.importc: "Document.title", nodecl.}: cstring
var DocumentVisibilityState* {.importc: "Document.visibilityState",
    nodecl.}: cstring
var DocumentVlinkColor* {.importc: "Document.vlinkColor", nodecl.}: cstring
var DocumentWebkitCurrentFullScreenElement *
  {.importc: "Document.webkitCurrentFullScreenElement", nodecl.}: Element
var DocumentWebkitFullscreenElement* {.importc: "Document.webkitFullscreenElement",
    nodecl.}: Element
var DocumentWebkitFullscreenEnabled* {.importc: "Document.webkitFullscreenEnabled", nodecl.}: bool
var DocumentWebkitIsFullScreen* {.importc: "Document.webkitIsFullScreen", nodecl.}: bool
var DocumentXmlEncoding* {.importc: "Document.xmlEncoding", nodecl.}: cstring
var DocumentXmlStandalone* {.importc: "Document.xmlStandalone", nodecl.}: bool
var DocumentXmlVersion* {.importc: "Document.xmlVersion", nodecl.}: cstring
var DocumentCurrentScript* {.importc: "Document.currentScript",
    nodecl.}: HTMLScriptElement
proc DocumentAdoptNode*(source: Node): Node {.importc: "Document.adoptNode".}
proc DocumentCaptureEvents*(): void {.importc: "Document.captureEvents".}
proc DocumentClear*(): void {.importc: "Document.clear".}
proc DocumentClose*(): void {.importc: "Document.close".}
proc DocumentCreateAttribute*(name: cstring): Attr {.importc: "Document.createAttribute".}
proc DocumentCreateAttributeNS*(namespaceURI: cstring,
    qualifiedName: cstring): Attr {.importc: "Document.createAttributeNS".}
proc DocumentCreateCDATASection*(data: cstring): CDATASection {.importc: "Document.createCDATASection".}
proc DocumentCreateComment*(data: cstring): Comment {.importc: "Document.createComment".}
proc DocumentCreateDocumentFragment*(): DocumentFragment {.importc: "Document.createDocumentFragment".}
proc DocumentCreateElement*(tagName: cstring): HTMLElement {.importc: "Document.createElement".}
proc DocumentCreateElementNS*(namespaceURI: cstring,
    qualifiedName: cstring): Element {.importc: "Document.createElementNS".}
proc DocumentCreateExpression*(expression: cstring,
    resolver: XPathNSResolver): XPathExpression {.importc: "Document.createExpression".}
proc DocumentCreateNSResolver*(nodeResolver: Node): XPathNSResolver {.importc: "Document.createNSResolver".}
proc DocumentCreateNodeIterator*(root: Node, whatToShow: float,
    filter: NodeFilter,
    entityReferenceExpansion: bool): NodeIterator {.importc: "Document.createNodeIterator".}
proc DocumentCreateProcessingInstruction*(target: cstring,
    data: cstring): ProcessingInstruction {.importc: "Document.createProcessingInstruction".}
proc DocumentCreateRange*(): Range {.importc: "Document.createRange".}
proc DocumentCreateTextNode*(data: cstring): Text {.importc: "Document.createTextNode".}
proc DocumentCreateTreeWalker*(root: Node, whatToShow: float,
    filter: NodeFilter,
    entityReferenceExpansion: bool): TreeWalker {.importc: "Document.createTreeWalker".}
proc DocumentElementFromPoint*(x: float,
    y: float): Element {.importc: "Document.elementFromPoint".}
proc DocumentEvaluate*(expression: cstring, contextNode: Node,
    resolver: XPathNSResolver, xType: float,
    result: XPathResult): XPathResult {.importc: "Document.evaluate".}
proc DocumentExecCommandShowHelp*(commandId: cstring): bool {.importc: "Document.execCommandShowHelp".}
proc DocumentExitFullscreen*(): void {.importc: "Document.exitFullscreen".}
proc DocumentExitPointerLock*(): void {.importc: "Document.exitPointerLock".}
proc DocumentFocus*(): void {.importc: "Document.focus".}
proc DocumentGetElementById*(elementId: cstring): HTMLElement {.importc: "Document.getElementById".}
proc DocumentGetSelection*(): Selection {.importc: "Document.getSelection".}
proc DocumentHasFocus*(): bool {.importc: "Document.hasFocus".}
proc DocumentImportNode*(importedNode: Node,
    deep: bool): Node {.importc: "Document.importNode".}
proc DocumentMsElementsFromPoint*(x: float,
    y: float): NodeList {.importc: "Document.msElementsFromPoint".}
proc DocumentMsElementsFromRect*(left: float, top: float, width: float,
    height: float): NodeList {.importc: "Document.msElementsFromRect".}
proc DocumentOpen*(url: cstring, name: cstring, features: cstring,
    replace: bool): Document {.importc: "Document.open".}
proc DocumentQueryCommandEnabled*(commandId: cstring): bool {.importc: "Document.queryCommandEnabled".}
proc DocumentQueryCommandIndeterm*(commandId: cstring): bool {.importc: "Document.queryCommandIndeterm".}
proc DocumentQueryCommandState*(commandId: cstring): bool {.importc: "Document.queryCommandState".}
proc DocumentQueryCommandSupported*(commandId: cstring): bool {.importc: "Document.queryCommandSupported".}
proc DocumentQueryCommandText*(commandId: cstring): cstring {.importc: "Document.queryCommandText".}
proc DocumentQueryCommandValue*(commandId: cstring): cstring {.importc: "Document.queryCommandValue".}
proc DocumentReleaseEvents*(): void {.importc: "Document.releaseEvents".}
proc DocumentUpdateSettings*(): void {.importc: "Document.updateSettings".}
proc DocumentWebkitCancelFullScreen*(): void {.importc: "Document.webkitCancelFullScreen".}
proc DocumentWebkitExitFullscreen*(): void {.importc: "Document.webkitExitFullscreen".}
proc DocumentAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "Document.addEventListener".}
proc DocumentAddEventListener*(xType: cstring, listener: EventListenerObject,
    useCapture: bool): void {.importc: "Document.addEventListener".}
proc item*(self: NodeList, index: float): Node {.importcpp.}
proc `[]`*(self: NodeList, index: float): Node {.importcpp: "#[#]".}
proc `[]=`*(self: NodeList, index: float, value: Node) {.importcpp: "#[#] = #".}
var NodeListLength* {.importc: "NodeList.length", nodecl.}: float
proc NodeListItem*(index: float): Node {.importc: "NodeList.item".}
proc getNamedItem*(self: NamedNodeMap, name: cstring): Attr {.importcpp.}
proc getNamedItemNS*(self: NamedNodeMap, namespaceURI: cstring,
    localName: cstring): Attr {.importcpp.}
proc item*(self: NamedNodeMap, index: float): Attr {.importcpp.}
proc removeNamedItem*(self: NamedNodeMap, name: cstring): Attr {.importcpp.}
proc removeNamedItemNS*(self: NamedNodeMap, namespaceURI: cstring,
    localName: cstring): Attr {.importcpp.}
proc setNamedItem*(self: NamedNodeMap, arg: Attr): Attr {.importcpp.}
proc setNamedItemNS*(self: NamedNodeMap, arg: Attr): Attr {.importcpp.}
proc `[]`*(self: NamedNodeMap, index: float): Attr {.importcpp: "#[#]".}
proc `[]=`*(self: NamedNodeMap, index: float,
    value: Attr) {.importcpp: "#[#] = #".}
var NamedNodeMapLength* {.importc: "NamedNodeMap.length", nodecl.}: float
proc NamedNodeMapGetNamedItem*(name: cstring): Attr {.importc: "NamedNodeMap.getNamedItem".}
proc NamedNodeMapGetNamedItemNS*(namespaceURI: cstring,
    localName: cstring): Attr {.importc: "NamedNodeMap.getNamedItemNS".}
proc NamedNodeMapItem*(index: float): Attr {.importc: "NamedNodeMap.item".}
proc NamedNodeMapRemoveNamedItem*(name: cstring): Attr {.importc: "NamedNodeMap.removeNamedItem".}
proc NamedNodeMapRemoveNamedItemNS*(namespaceURI: cstring,
    localName: cstring): Attr {.importc: "NamedNodeMap.removeNamedItemNS".}
proc NamedNodeMapSetNamedItem*(arg: Attr): Attr {.importc: "NamedNodeMap.setNamedItem".}
proc NamedNodeMapSetNamedItemNS*(arg: Attr): Attr {.importc: "NamedNodeMap.setNamedItemNS".}
proc newAttr*(): Attr {.importcpp: "new Attr".}
proc initEvent*(self: Event, eventTypeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool): void {.importcpp.}
proc preventDefault*(self: Event): void {.importcpp.}
proc stopImmediatePropagation*(self: Event): void {.importcpp.}
proc stopPropagation*(self: Event): void {.importcpp.}
var EventBubbles* {.importc: "Event.bubbles", nodecl.}: bool
var EventCancelBubble* {.importc: "Event.cancelBubble", nodecl.}: bool
var EventCancelable* {.importc: "Event.cancelable", nodecl.}: bool
var EventCurrentTarget* {.importc: "Event.currentTarget", nodecl.}: EventTarget
var EventDefaultPrevented* {.importc: "Event.defaultPrevented", nodecl.}: bool
var EventEventPhase* {.importc: "Event.eventPhase", nodecl.}: float
var EventIsTrusted* {.importc: "Event.isTrusted", nodecl.}: bool
var EventReturnValue* {.importc: "Event.returnValue", nodecl.}: bool
var EventSrcElement* {.importc: "Event.srcElement", nodecl.}: Element
var EventTimeStamp* {.importc: "Event.timeStamp", nodecl.}: float
var EventType* {.importc: "Event.type", nodecl.}: cstring
var EventAT_TARGET* {.importc: "Event.AT_TARGET", nodecl.}: float
var EventBUBBLING_PHASE* {.importc: "Event.BUBBLING_PHASE", nodecl.}: float
var EventCAPTURING_PHASE* {.importc: "Event.CAPTURING_PHASE", nodecl.}: float
proc EventInitEvent*(eventTypeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool): void {.importc: "Event.initEvent".}
proc EventPreventDefault*(): void {.importc: "Event.preventDefault".}
proc EventStopImmediatePropagation*(): void {.importc: "Event.stopImmediatePropagation".}
proc EventStopPropagation*(): void {.importc: "Event.stopPropagation".}
proc newEventListenerObject*(): EventListenerObject {.importcpp: "new EventListenerObject".}
proc handleEvent*(self: EventListenerObject, evt: Event): void {.importcpp.}
proc newApplicationCache*(): ApplicationCache {.importcpp: "new ApplicationCache".}
proc abort*(self: ApplicationCache): void {.importcpp.}
proc swapCache*(self: ApplicationCache): void {.importcpp.}
proc update*(self: ApplicationCache): void {.importcpp.}
proc addEventListener*(self: ApplicationCache, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: ApplicationCache, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var ApplicationCacheCHECKING* {.importc: "ApplicationCache.CHECKING",
    nodecl.}: float
var ApplicationCacheDOWNLOADING* {.importc: "ApplicationCache.DOWNLOADING",
    nodecl.}: float
var ApplicationCacheIDLE* {.importc: "ApplicationCache.IDLE", nodecl.}: float
var ApplicationCacheOBSOLETE* {.importc: "ApplicationCache.OBSOLETE",
    nodecl.}: float
var ApplicationCacheUNCACHED* {.importc: "ApplicationCache.UNCACHED",
    nodecl.}: float
var ApplicationCacheUPDATEREADY* {.importc: "ApplicationCache.UPDATEREADY",
    nodecl.}: float
proc blur*(self: Window): void {.importcpp.}
proc cancelAnimationFrame*(self: Window, handle: float): void {.importcpp.}
proc captureEvents*(self: Window): void {.importcpp.}
proc close*(self: Window): void {.importcpp.}
proc confirm*(self: Window, message: cstring): bool {.importcpp.}
proc focus*(self: Window): void {.importcpp.}
proc getComputedStyle*(self: Window, elt: Element,
    pseudoElt: cstring): CSSStyleDeclaration {.importcpp.}
proc getMatchedCSSRules*(self: Window, elt: Element,
    pseudoElt: cstring): CSSRuleList {.importcpp.}
proc getSelection*(self: Window): Selection {.importcpp.}
proc matchMedia*(self: Window, mediaQuery: cstring): MediaQueryList {.importcpp.}
proc moveBy*(self: Window, x: float, y: float): void {.importcpp.}
proc moveTo*(self: Window, x: float, y: float): void {.importcpp.}
proc msCancelRequestAnimationFrame*(self: Window,
    handle: float): void {.importcpp.}
proc msMatchMedia*(self: Window, mediaQuery: cstring): MediaQueryList {.importcpp.}
proc msRequestAnimationFrame*(self: Window,
    callback: FrameRequestCallback): float {.importcpp.}
proc msWriteProfilerMark*(self: Window, profilerMarkName: cstring): void {.importcpp.}
proc open*(self: Window, url: cstring, target: cstring, features: cstring,
    replace: bool): Window {.importcpp.}
proc print*(self: Window): void {.importcpp.}
proc prompt*(self: Window, message: cstring,
    zDefault: cstring): cstring {.importcpp.}
proc releaseEvents*(self: Window): void {.importcpp.}
proc requestAnimationFrame*(self: Window,
    callback: FrameRequestCallback): float {.importcpp.}
proc resizeBy*(self: Window, x: float, y: float): void {.importcpp.}
proc resizeTo*(self: Window, x: float, y: float): void {.importcpp.}
proc scroll*(self: Window, x: float, y: float): void {.importcpp.}
proc scrollBy*(self: Window, x: float, y: float): void {.importcpp.}
proc scrollTo*(self: Window, x: float, y: float): void {.importcpp.}
proc webkitConvertPointFromNodeToPage*(self: Window, node: Node,
    pt: WebKitPoint): WebKitPoint {.importcpp.}
proc webkitConvertPointFromPageToNode*(self: Window, node: Node,
    pt: WebKitPoint): WebKitPoint {.importcpp.}
proc addEventListener*(self: Window, xType: cstring, listener: EventListener,
    useCapture: bool): void {.importcpp.}
proc addEventListener*(self: Window, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc `[]`*(self: Window, index: float): Window {.importcpp: "#[#]".}
proc `[]=`*(self: Window, index: float, value: Window) {.importcpp: "#[#] = #".}
var WindowAnimationStartTime* {.importc: "Window.animationStartTime",
    nodecl.}: float
var WindowApplicationCache* {.importc: "Window.applicationCache",
    nodecl.}: ApplicationCache
var WindowClientInformation* {.importc: "Window.clientInformation",
    nodecl.}: Navigator
var WindowClosed* {.importc: "Window.closed", nodecl.}: bool
var WindowCrypto* {.importc: "Window.crypto", nodecl.}: Crypto
var WindowDefaultStatus* {.importc: "Window.defaultStatus", nodecl.}: cstring
var WindowDevicePixelRatio* {.importc: "Window.devicePixelRatio",
    nodecl.}: float
var WindowDoNotTrack* {.importc: "Window.doNotTrack", nodecl.}: cstring
var WindowDocument* {.importc: "Window.document", nodecl.}: Document
var WindowEvent* {.importc: "Window.event", nodecl.}: Event
var WindowExternal* {.importc: "Window.external", nodecl.}: External
var WindowFrameElement* {.importc: "Window.frameElement", nodecl.}: Element
var WindowFrames* {.importc: "Window.frames", nodecl.}: Window
var WindowHistory* {.importc: "Window.history", nodecl.}: History
var WindowInnerHeight* {.importc: "Window.innerHeight", nodecl.}: float
var WindowInnerWidth* {.importc: "Window.innerWidth", nodecl.}: float
var WindowLength* {.importc: "Window.length", nodecl.}: float
var WindowLocation* {.importc: "Window.location", nodecl.}: Location
var WindowLocationbar* {.importc: "Window.locationbar", nodecl.}: BarProp
var WindowMenubar* {.importc: "Window.menubar", nodecl.}: BarProp
var WindowMsAnimationStartTime* {.importc: "Window.msAnimationStartTime",
    nodecl.}: float
var WindowName* {.importc: "Window.name", nodecl.}: cstring
var WindowNavigator* {.importc: "Window.navigator", nodecl.}: Navigator
var WindowOnerror* {.importc: "Window.onerror", nodecl.}: ErrorEventHandler
var WindowOpener* {.importc: "Window.opener", nodecl.}: Window
var WindowOuterHeight* {.importc: "Window.outerHeight", nodecl.}: float
var WindowOuterWidth* {.importc: "Window.outerWidth", nodecl.}: float
var WindowPageXOffset* {.importc: "Window.pageXOffset", nodecl.}: float
var WindowPageYOffset* {.importc: "Window.pageYOffset", nodecl.}: float
var WindowParent* {.importc: "Window.parent", nodecl.}: Window
var WindowPerformance* {.importc: "Window.performance", nodecl.}: Performance
var WindowPersonalbar* {.importc: "Window.personalbar", nodecl.}: BarProp
var WindowScreen* {.importc: "Window.screen", nodecl.}: Screen
var WindowScreenLeft* {.importc: "Window.screenLeft", nodecl.}: float
var WindowScreenTop* {.importc: "Window.screenTop", nodecl.}: float
var WindowScreenX* {.importc: "Window.screenX", nodecl.}: float
var WindowScreenY* {.importc: "Window.screenY", nodecl.}: float
var WindowScrollX* {.importc: "Window.scrollX", nodecl.}: float
var WindowScrollY* {.importc: "Window.scrollY", nodecl.}: float
var WindowScrollbars* {.importc: "Window.scrollbars", nodecl.}: BarProp
var WindowSelf* {.importc: "Window.self", nodecl.}: Window
var WindowStatus* {.importc: "Window.status", nodecl.}: cstring
var WindowStatusbar* {.importc: "Window.statusbar", nodecl.}: BarProp
var WindowStyleMedia* {.importc: "Window.styleMedia", nodecl.}: StyleMedia
var WindowToolbar* {.importc: "Window.toolbar", nodecl.}: BarProp
var WindowTop* {.importc: "Window.top", nodecl.}: Window
var WindowWindow* {.importc: "Window.window", nodecl.}: Window
var WindowURL* {.importc: "Window.URL", nodecl.}: URL
proc WindowBlur*(): void {.importc: "Window.blur".}
proc WindowCancelAnimationFrame*(handle: float): void {.importc: "Window.cancelAnimationFrame".}
proc WindowCaptureEvents*(): void {.importc: "Window.captureEvents".}
proc WindowClose*(): void {.importc: "Window.close".}
proc WindowConfirm*(message: cstring): bool {.importc: "Window.confirm".}
proc WindowFocus*(): void {.importc: "Window.focus".}
proc WindowGetComputedStyle*(elt: Element,
    pseudoElt: cstring): CSSStyleDeclaration {.importc: "Window.getComputedStyle".}
proc WindowGetMatchedCSSRules*(elt: Element,
    pseudoElt: cstring): CSSRuleList {.importc: "Window.getMatchedCSSRules".}
proc WindowGetSelection*(): Selection {.importc: "Window.getSelection".}
proc WindowMatchMedia*(mediaQuery: cstring): MediaQueryList {.importc: "Window.matchMedia".}
proc WindowMoveBy*(x: float, y: float): void {.importc: "Window.moveBy".}
proc WindowMoveTo*(x: float, y: float): void {.importc: "Window.moveTo".}
proc WindowMsCancelRequestAnimationFrame*(
  handle: float): void {.importc: "Window.msCancelRequestAnimationFrame".}
proc WindowMsMatchMedia*(mediaQuery: cstring): MediaQueryList {.importc: "Window.msMatchMedia".}
proc WindowMsRequestAnimationFrame*(callback: FrameRequestCallback): float {.importc: "Window.msRequestAnimationFrame".}
proc WindowMsWriteProfilerMark*(profilerMarkName: cstring): void {.importc: "Window.msWriteProfilerMark".}
proc WindowOpen*(url: cstring, target: cstring, features: cstring,
    replace: bool): Window {.importc: "Window.open".}
proc WindowPrint*(): void {.importc: "Window.print".}
proc WindowPrompt*(message: cstring, zDefault: cstring): cstring {.importc: "Window.prompt".}
proc WindowReleaseEvents*(): void {.importc: "Window.releaseEvents".}
proc WindowRequestAnimationFrame*(callback: FrameRequestCallback): float {.importc: "Window.requestAnimationFrame".}
proc WindowResizeBy*(x: float, y: float): void {.importc: "Window.resizeBy".}
proc WindowResizeTo*(x: float, y: float): void {.importc: "Window.resizeTo".}
proc WindowScroll*(x: float, y: float): void {.importc: "Window.scroll".}
proc WindowScrollBy*(x: float, y: float): void {.importc: "Window.scrollBy".}
proc WindowScrollTo*(x: float, y: float): void {.importc: "Window.scrollTo".}
proc WindowWebkitConvertPointFromNodeToPage*(node: Node,
    pt: WebKitPoint): WebKitPoint {.importc: "Window.webkitConvertPointFromNodeToPage".}
proc WindowWebkitConvertPointFromPageToNode*(node: Node,
    pt: WebKitPoint): WebKitPoint {.importc: "Window.webkitConvertPointFromPageToNode".}
proc WindowAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "Window.addEventListener".}
proc WindowAddEventListener*(xType: cstring, listener: EventListenerObject,
    useCapture: bool): void {.importc: "Window.addEventListener".}

type UIEventInit* {.importc.} = ref object of EventInit
  view* {.importc.}: Window
  detail* {.importc.}: float
proc newUIEventInit*(): UIEventInit {.importcpp: "new UIEventInit".}

type CompositionEventInit* {.importc.} = ref object of UIEventInit
  data* {.importc.}: cstring

type ExceptionInformation* {.importc.} = ref object of RootObj
  domain* {.importc.}: cstring
proc newExceptionInformation*(): ExceptionInformation {.importcpp: "new ExceptionInformation".}

type ConfirmSiteSpecificExceptionsInformation *
  {.importc.} = ref object of ExceptionInformation

type CustomEventInit* {.importc.} = ref object of EventInit

type DeviceAccelerationDict* {.importc.} = ref object of RootObj
  x* {.importc.}: float
  y* {.importc.}: float
  z* {.importc.}: float

type DeviceRotationRateDict* {.importc.} = ref object of RootObj
  alpha* {.importc.}: float
  beta* {.importc.}: float
  gamma* {.importc.}: float

type FocusEventInit* {.importc.} = ref object of UIEventInit
  relatedTarget* {.importc.}: EventTarget

type HashChangeEventInit* {.importc.} = ref object of EventInit
  newURL* {.importc.}: cstring
  oldURL* {.importc.}: cstring

type KeyAlgorithm* {.importc.} = ref object of RootObj
  name* {.importc.}: cstring

type SharedKeyboardAndMouseEventInit* {.importc.} = ref object of UIEventInit
  ctrlKey* {.importc.}: bool
  shiftKey* {.importc.}: bool
  altKey* {.importc.}: bool
  metaKey* {.importc.}: bool
  keyModifierStateAltGraph* {.importc.}: bool
  keyModifierStateCapsLock* {.importc.}: bool
  keyModifierStateFn* {.importc.}: bool
  keyModifierStateFnLock* {.importc.}: bool
  keyModifierStateHyper* {.importc.}: bool
  keyModifierStateNumLock* {.importc.}: bool
  keyModifierStateOS* {.importc.}: bool
  keyModifierStateScrollLock* {.importc.}: bool
  keyModifierStateSuper* {.importc.}: bool
  keyModifierStateSymbol* {.importc.}: bool
  keyModifierStateSymbolLock* {.importc.}: bool
proc newSharedKeyboardAndMouseEventInit*(): SharedKeyboardAndMouseEventInit {.importcpp: "new SharedKeyboardAndMouseEventInit".}

type KeyboardEventInit* {.importc.} = ref object of SharedKeyboardAndMouseEventInit
  key* {.importc.}: cstring
  location* {.importc.}: float
  repeat* {.importc.}: bool

type MouseEventInit* {.importc.} = ref object of SharedKeyboardAndMouseEventInit
  screenX* {.importc.}: float
  screenY* {.importc.}: float
  clientX* {.importc.}: float
  clientY* {.importc.}: float
  button* {.importc.}: float
  buttons* {.importc.}: float
  relatedTarget* {.importc.}: EventTarget

type MutationObserverInit* {.importc.} = ref object of RootObj
  childList* {.importc.}: bool
  attributes* {.importc.}: bool
  characterData* {.importc.}: bool
  subtree* {.importc.}: bool
  attributeOldValue* {.importc.}: bool
  characterDataOldValue* {.importc.}: bool

type ObjectURLOptions* {.importc.} = ref object of RootObj
  oneTimeOnly* {.importc.}: bool

type PointerEventInit* {.importc.} = ref object of MouseEventInit
  pointerId* {.importc.}: float
  width* {.importc.}: float
  height* {.importc.}: float
  pressure* {.importc.}: float
  tiltX* {.importc.}: float
  tiltY* {.importc.}: float
  pointerType* {.importc.}: cstring
  isPrimary* {.importc.}: bool

type PositionOptions* {.importc.} = ref object of RootObj
  enableHighAccuracy* {.importc.}: bool
  timeout* {.importc.}: float
  maximumAge* {.importc.}: float

type StoreExceptionsInformation* {.importc.} = ref object of ExceptionInformation
  siteName* {.importc.}: cstring
  explanationString* {.importc.}: cstring
  detailURI* {.importc.}: cstring

type StoreSiteSpecificExceptionsInformation *
  {.importc.} = ref object of StoreExceptionsInformation

type WebGLContextAttributes* {.importc.} = ref object of RootObj
  alpha* {.importc.}: bool
  depth* {.importc.}: bool
  stencil* {.importc.}: bool
  antialias* {.importc.}: bool
  premultipliedAlpha* {.importc.}: bool
  preserveDrawingBuffer* {.importc.}: bool

type WebGLContextEventInit* {.importc.} = ref object of EventInit
  statusMessage* {.importc.}: cstring

type WheelEventInit* {.importc.} = ref object of MouseEventInit
  deltaX* {.importc.}: float
  deltaY* {.importc.}: float
  deltaZ* {.importc.}: float
  deltaMode* {.importc.}: float

type ANGLE_instanced_arrays* {.importc.} = ref object of RootObj
  VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE* {.importc.}: float
proc newANGLE_instanced_arrays*(): ANGLE_instanced_arrays {.importcpp: "new ANGLE_instanced_arrays".}
proc drawArraysInstancedANGLE*(self: ANGLE_instanced_arrays, mode: float,
    first: float, count: float, primcount: float): void {.importcpp.}
proc drawElementsInstancedANGLE*(self: ANGLE_instanced_arrays, mode: float,
    count: float, xType: float, offset: float,
    primcount: float): void {.importcpp.}
proc vertexAttribDivisorANGLE*(self: ANGLE_instanced_arrays, index: float,
    divisor: float): void {.importcpp.}
var ANGLE_instanced_arraysVERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE *
  {.importc: "ANGLE_instanced_arrays.VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE",
    nodecl.}: float

type AudioListener* {.importc.} = ref object of RootObj
  dopplerFactor* {.importc.}: float
  speedOfSound* {.importc.}: float
proc setOrientation*(self: AudioListener, x: float, y: float, z: float,
    xUp: float, yUp: float, zUp: float): void {.importcpp.}
proc setPosition*(self: AudioListener, x: float, y: float,
    z: float): void {.importcpp.}
proc setVelocity*(self: AudioListener, x: float, y: float,
    z: float): void {.importcpp.}
var AudioListenerDopplerFactor* {.importc: "AudioListener.dopplerFactor",
    nodecl.}: float
var AudioListenerSpeedOfSound* {.importc: "AudioListener.speedOfSound",
    nodecl.}: float
proc AudioListenerSetOrientation*(x: float, y: float, z: float, xUp: float,
    yUp: float, zUp: float): void {.importc: "AudioListener.setOrientation".}
proc AudioListenerSetPosition*(x: float, y: float,
    z: float): void {.importc: "AudioListener.setPosition".}
proc AudioListenerSetVelocity*(x: float, y: float,
    z: float): void {.importc: "AudioListener.setVelocity".}

type AudioParam* {.importc.} = ref object of RootObj
  defaultValue* {.importc.}: float
  value* {.importc.}: float
proc cancelScheduledValues*(self: AudioParam,
    startTime: float): void {.importcpp.}
proc exponentialRampToValueAtTime*(self: AudioParam, value: float,
    endTime: float): void {.importcpp.}
proc linearRampToValueAtTime*(self: AudioParam, value: float,
    endTime: float): void {.importcpp.}
proc setTargetAtTime*(self: AudioParam, target: float, startTime: float,
    timeConstant: float): void {.importcpp.}
proc setValueAtTime*(self: AudioParam, value: float,
    startTime: float): void {.importcpp.}
proc setValueCurveAtTime*(self: AudioParam, values: Float32Array,
    startTime: float, duration: float): void {.importcpp.}
var AudioParamDefaultValue* {.importc: "AudioParam.defaultValue",
    nodecl.}: float
var AudioParamValue* {.importc: "AudioParam.value", nodecl.}: float
proc AudioParamCancelScheduledValues*(startTime: float): void {.importc: "AudioParam.cancelScheduledValues".}
proc AudioParamExponentialRampToValueAtTime*(value: float,
    endTime: float): void {.importc: "AudioParam.exponentialRampToValueAtTime".}
proc AudioParamLinearRampToValueAtTime*(value: float,
    endTime: float): void {.importc: "AudioParam.linearRampToValueAtTime".}
proc AudioParamSetTargetAtTime*(target: float, startTime: float,
    timeConstant: float): void {.importc: "AudioParam.setTargetAtTime".}
proc AudioParamSetValueAtTime*(value: float,
    startTime: float): void {.importc: "AudioParam.setValueAtTime".}
proc AudioParamSetValueCurveAtTime*(values: Float32Array, startTime: float,
    duration: float): void {.importc: "AudioParam.setValueCurveAtTime".}

type AudioBuffer* {.importc.} = ref object of RootObj
  duration* {.importc.}: float
  length* {.importc.}: float
  numberOfChannels* {.importc.}: float
  sampleRate* {.importc.}: float
proc newAudioBuffer*(): AudioBuffer {.importcpp: "new AudioBuffer".}
proc getChannelData*(self: AudioBuffer, channel: float): Float32Array {.importcpp.}

type TimeRanges* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc xEnd*(self: TimeRanges, index: float): float {.importcpp: "end".}
proc start*(self: TimeRanges, index: float): float {.importcpp.}
var TimeRangesLength* {.importc: "TimeRanges.length", nodecl.}: float
proc TimeRangesEnd*(index: float): float {.importc: "TimeRanges.end".}
proc TimeRangesStart*(index: float): float {.importc: "TimeRanges.start".}

type MSStream* {.importc.} = ref object of RootObj
  xType* {.importc: "type".}: cstring
proc newMSStream*(): MSStream {.importcpp: "new MSStream".}
proc msClose*(self: MSStream): void {.importcpp.}

type
  VideoTrack* {.importc.} = ref object of RootObj
    id* {.importc.}: cstring
    kind* {.importc.}: cstring
    label* {.importc.}: cstring
    language* {.importc.}: cstring
    selected* {.importc.}: bool
    sourceBuffer* {.importc.}: SourceBuffer
  VideoTrackList* {.importc.} = ref object of EventTarget
    length* {.importc.}: float
    selectedIndex* {.importc.}: float
  SourceBuffer* {.importc.} = ref object of EventTarget
    appendWindowEnd* {.importc.}: float
    appendWindowStart* {.importc.}: float
    audioTracks* {.importc.}: AudioTrackList
    buffered* {.importc.}: TimeRanges
    mode* {.importc.}: cstring
    timestampOffset* {.importc.}: float
    updating* {.importc.}: bool
    videoTracks* {.importc.}: VideoTrackList
  AudioTrack* {.importc.} = ref object of RootObj
    enabled* {.importc.}: bool
    id* {.importc.}: cstring
    kind* {.importc.}: cstring
    label* {.importc.}: cstring
    language* {.importc.}: cstring
    sourceBuffer* {.importc.}: SourceBuffer
  AudioTrackList* {.importc.} = ref object of EventTarget
    length* {.importc.}: float
proc newVideoTrack*(): VideoTrack {.importcpp: "new VideoTrack".}
proc getTrackById*(self: VideoTrackList, id: cstring): VideoTrack {.importcpp.}
proc item*(self: VideoTrackList, index: float): VideoTrack {.importcpp.}
proc addEventListener*(self: VideoTrackList, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: VideoTrackList, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc `[]`*(self: VideoTrackList, index: float): VideoTrack {.importcpp: "#[#]".}
proc `[]=`*(self: VideoTrackList, index: float,
    value: VideoTrack) {.importcpp: "#[#] = #".}
var VideoTrackListLength* {.importc: "VideoTrackList.length", nodecl.}: float
var VideoTrackListSelectedIndex* {.importc: "VideoTrackList.selectedIndex",
    nodecl.}: float
proc VideoTrackListGetTrackById*(id: cstring): VideoTrack {.importc: "VideoTrackList.getTrackById".}
proc VideoTrackListItem*(index: float): VideoTrack {.importc: "VideoTrackList.item".}
proc VideoTrackListAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "VideoTrackList.addEventListener".}
proc VideoTrackListAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "VideoTrackList.addEventListener".}
proc abort*(self: SourceBuffer): void {.importcpp.}
proc appendBuffer*(self: SourceBuffer, data: ArrayBuffer): void {.importcpp.}
proc appendBuffer*(self: SourceBuffer, data: ArrayBufferView): void {.importcpp.}
proc appendStream*(self: SourceBuffer, stream: MSStream,
    maxSize: float): void {.importcpp.}
proc remove*(self: SourceBuffer, start: float, xEnd: float): void {.importcpp.}
var SourceBufferAppendWindowEnd* {.importc: "SourceBuffer.appendWindowEnd",
    nodecl.}: float
var SourceBufferAppendWindowStart* {.importc: "SourceBuffer.appendWindowStart",
    nodecl.}: float
var SourceBufferAudioTracks* {.importc: "SourceBuffer.audioTracks",
    nodecl.}: AudioTrackList
var SourceBufferBuffered* {.importc: "SourceBuffer.buffered",
    nodecl.}: TimeRanges
var SourceBufferMode* {.importc: "SourceBuffer.mode", nodecl.}: cstring
var SourceBufferTimestampOffset* {.importc: "SourceBuffer.timestampOffset",
    nodecl.}: float
var SourceBufferUpdating* {.importc: "SourceBuffer.updating", nodecl.}: bool
var SourceBufferVideoTracks* {.importc: "SourceBuffer.videoTracks",
    nodecl.}: VideoTrackList
proc SourceBufferAbort*(): void {.importc: "SourceBuffer.abort".}
proc SourceBufferAppendBuffer*(data: ArrayBuffer): void {.importc: "SourceBuffer.appendBuffer".}
proc SourceBufferAppendBuffer*(data: ArrayBufferView): void {.importc: "SourceBuffer.appendBuffer".}
proc SourceBufferAppendStream*(stream: MSStream,
    maxSize: float): void {.importc: "SourceBuffer.appendStream".}
proc SourceBufferRemove*(start: float, xEnd: float): void {.importc: "SourceBuffer.remove".}
proc newAudioTrack*(): AudioTrack {.importcpp: "new AudioTrack".}
proc newAudioTrackList*(): AudioTrackList {.importcpp: "new AudioTrackList".}
proc getTrackById*(self: AudioTrackList, id: cstring): AudioTrack {.importcpp.}
proc item*(self: AudioTrackList, index: float): AudioTrack {.importcpp.}
proc addEventListener*(self: AudioTrackList, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: AudioTrackList, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc `[]`*(self: AudioTrackList, index: float): AudioTrack {.importcpp: "#[#]".}
proc `[]=`*(self: AudioTrackList, index: float,
    value: AudioTrack) {.importcpp: "#[#] = #".}

type MediaError* {.importc.} = ref object of RootObj
  code* {.importc.}: float
  msExtendedCode* {.importc.}: float
  MEDIA_ERR_ABORTED* {.importc.}: float
  MEDIA_ERR_DECODE* {.importc.}: float
  MEDIA_ERR_NETWORK* {.importc.}: float
  MEDIA_ERR_SRC_NOT_SUPPORTED* {.importc.}: float
  MS_MEDIA_ERR_ENCRYPTED* {.importc.}: float
var MediaErrorCode* {.importc: "MediaError.code", nodecl.}: float
var MediaErrorMsExtendedCode* {.importc: "MediaError.msExtendedCode",
    nodecl.}: float
var MediaErrorMEDIA_ERR_ABORTED* {.importc: "MediaError.MEDIA_ERR_ABORTED",
    nodecl.}: float
var MediaErrorMEDIA_ERR_DECODE* {.importc: "MediaError.MEDIA_ERR_DECODE",
    nodecl.}: float
var MediaErrorMEDIA_ERR_NETWORK* {.importc: "MediaError.MEDIA_ERR_NETWORK",
    nodecl.}: float
var MediaErrorMEDIA_ERR_SRC_NOT_SUPPORTED *
  {.importc: "MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED", nodecl.}: float
var MediaErrorMS_MEDIA_ERR_ENCRYPTED* {.importc: "MediaError.MS_MEDIA_ERR_ENCRYPTED",
    nodecl.}: float

type MSGraphicsTrust* {.importc.} = ref object of RootObj
  constrictionActive* {.importc.}: bool
  status* {.importc.}: cstring
var MSGraphicsTrustConstrictionActive* {.importc: "MSGraphicsTrust.constrictionActive", nodecl.}: bool
var MSGraphicsTrustStatus* {.importc: "MSGraphicsTrust.status",
    nodecl.}: cstring

type MSMediaKeyError* {.importc.} = ref object of RootObj
  code* {.importc.}: float
  systemCode* {.importc.}: float
  MS_MEDIA_KEYERR_CLIENT* {.importc.}: float
  MS_MEDIA_KEYERR_DOMAIN* {.importc.}: float
  MS_MEDIA_KEYERR_HARDWARECHANGE* {.importc.}: float
  MS_MEDIA_KEYERR_OUTPUT* {.importc.}: float
  MS_MEDIA_KEYERR_SERVICE* {.importc.}: float
  MS_MEDIA_KEYERR_UNKNOWN* {.importc.}: float
proc newMSMediaKeyError*(): MSMediaKeyError {.importcpp: "new MSMediaKeyError".}
var MSMediaKeyErrorMS_MEDIA_KEYERR_CLIENT *
  {.importc: "MSMediaKeyError.MS_MEDIA_KEYERR_CLIENT", nodecl.}: float
var MSMediaKeyErrorMS_MEDIA_KEYERR_DOMAIN *
  {.importc: "MSMediaKeyError.MS_MEDIA_KEYERR_DOMAIN", nodecl.}: float
var MSMediaKeyErrorMS_MEDIA_KEYERR_HARDWARECHANGE *
  {.importc: "MSMediaKeyError.MS_MEDIA_KEYERR_HARDWARECHANGE", nodecl.}: float
var MSMediaKeyErrorMS_MEDIA_KEYERR_OUTPUT *
  {.importc: "MSMediaKeyError.MS_MEDIA_KEYERR_OUTPUT", nodecl.}: float
var MSMediaKeyErrorMS_MEDIA_KEYERR_SERVICE *
  {.importc: "MSMediaKeyError.MS_MEDIA_KEYERR_SERVICE", nodecl.}: float
var MSMediaKeyErrorMS_MEDIA_KEYERR_UNKNOWN *
  {.importc: "MSMediaKeyError.MS_MEDIA_KEYERR_UNKNOWN", nodecl.}: float

type MSMediaKeySession* {.importc.} = ref object of EventTarget
  error* {.importc.}: MSMediaKeyError
  keySystem* {.importc.}: cstring
  sessionId* {.importc.}: cstring
proc newMSMediaKeySession*(): MSMediaKeySession {.importcpp: "new MSMediaKeySession".}
proc close*(self: MSMediaKeySession): void {.importcpp.}
proc update*(self: MSMediaKeySession, key: Uint8Array): void {.importcpp.}

type MSMediaKeys* {.importc.} = ref object of RootObj
  keySystem* {.importc.}: cstring
proc createSession*(self: MSMediaKeys, xType: cstring, initData: Uint8Array,
    cdmData: Uint8Array): MSMediaKeySession {.importcpp.}
var MSMediaKeysKeySystem* {.importc: "MSMediaKeys.keySystem", nodecl.}: cstring
proc MSMediaKeysCreateSession*(xType: cstring, initData: Uint8Array,
    cdmData: Uint8Array): MSMediaKeySession {.importc: "MSMediaKeys.createSession".}

type
  TextTrackCue* {.importc.} = ref object of EventTarget
    endTime* {.importc.}: float
    id* {.importc.}: cstring
    pauseOnExit* {.importc.}: bool
    startTime* {.importc.}: float
    text* {.importc.}: cstring
    track* {.importc.}: TextTrack
  TextTrackCueList* {.importc.} = ref object of RootObj
    length* {.importc.}: float
  TextTrack* {.importc.} = ref object of EventTarget
    activeCues* {.importc.}: TextTrackCueList
    cues* {.importc.}: TextTrackCueList
    inBandMetadataTrackDispatchType* {.importc.}: cstring
    kind* {.importc.}: cstring
    label* {.importc.}: cstring
    language* {.importc.}: cstring
    readyState* {.importc.}: float
    DISABLED* {.importc.}: float
    ERROR* {.importc.}: float
    HIDDEN* {.importc.}: float
    LOADED* {.importc.}: float
    LOADING* {.importc.}: float
    NONE* {.importc.}: float
    SHOWING* {.importc.}: float
proc newTextTrackCue*(): TextTrackCue {.importcpp: "new TextTrackCue".}
proc getCueAsHTML*(self: TextTrackCue): DocumentFragment {.importcpp.}
proc addEventListener*(self: TextTrackCue, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: TextTrackCue, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc getCueById*(self: TextTrackCueList,
    id: cstring): TextTrackCue {.importcpp.}
proc item*(self: TextTrackCueList, index: float): TextTrackCue {.importcpp.}
proc `[]`*(self: TextTrackCueList, index: float): TextTrackCue {.importcpp: "#[#]".}
proc `[]=`*(self: TextTrackCueList, index: float,
    value: TextTrackCue) {.importcpp: "#[#] = #".}
var TextTrackCueListLength* {.importc: "TextTrackCueList.length",
    nodecl.}: float
proc TextTrackCueListGetCueById*(id: cstring): TextTrackCue {.importc: "TextTrackCueList.getCueById".}
proc TextTrackCueListItem*(index: float): TextTrackCue {.importc: "TextTrackCueList.item".}
proc addCue*(self: TextTrack, cue: TextTrackCue): void {.importcpp.}
proc removeCue*(self: TextTrack, cue: TextTrackCue): void {.importcpp.}
proc addEventListener*(self: TextTrack, xType: cstring, listener: EventListener,
    useCapture: bool): void {.importcpp.}
proc addEventListener*(self: TextTrack, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var TextTrackActiveCues* {.importc: "TextTrack.activeCues",
    nodecl.}: TextTrackCueList
var TextTrackCues* {.importc: "TextTrack.cues", nodecl.}: TextTrackCueList
var TextTrackInBandMetadataTrackDispatchType *
  {.importc: "TextTrack.inBandMetadataTrackDispatchType", nodecl.}: cstring
var TextTrackKind* {.importc: "TextTrack.kind", nodecl.}: cstring
var TextTrackLabel* {.importc: "TextTrack.label", nodecl.}: cstring
var TextTrackLanguage* {.importc: "TextTrack.language", nodecl.}: cstring
var TextTrackReadyState* {.importc: "TextTrack.readyState", nodecl.}: float
var TextTrackDISABLED* {.importc: "TextTrack.DISABLED", nodecl.}: float
var TextTrackERROR* {.importc: "TextTrack.ERROR", nodecl.}: float
var TextTrackHIDDEN* {.importc: "TextTrack.HIDDEN", nodecl.}: float
var TextTrackLOADED* {.importc: "TextTrack.LOADED", nodecl.}: float
var TextTrackLOADING* {.importc: "TextTrack.LOADING", nodecl.}: float
var TextTrackNONE* {.importc: "TextTrack.NONE", nodecl.}: float
var TextTrackSHOWING* {.importc: "TextTrack.SHOWING", nodecl.}: float
proc TextTrackAddCue*(cue: TextTrackCue): void {.importc: "TextTrack.addCue".}
proc TextTrackRemoveCue*(cue: TextTrackCue): void {.importc: "TextTrack.removeCue".}
proc TextTrackAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "TextTrack.addEventListener".}
proc TextTrackAddEventListener*(xType: cstring, listener: EventListenerObject,
    useCapture: bool): void {.importc: "TextTrack.addEventListener".}

type TextTrackList* {.importc.} = ref object of EventTarget
  length* {.importc.}: float
proc item*(self: TextTrackList, index: float): TextTrack {.importcpp.}
proc addEventListener*(self: TextTrackList, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: TextTrackList, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc `[]`*(self: TextTrackList, index: float): TextTrack {.importcpp: "#[#]".}
proc `[]=`*(self: TextTrackList, index: float,
    value: TextTrack) {.importcpp: "#[#] = #".}
var TextTrackListLength* {.importc: "TextTrackList.length", nodecl.}: float
proc TextTrackListItem*(index: float): TextTrack {.importc: "TextTrackList.item".}
proc TextTrackListAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "TextTrackList.addEventListener".}
proc TextTrackListAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "TextTrackList.addEventListener".}

type HTMLMediaElement* {.importc.} = ref object of HTMLElement
  audioTracks* {.importc.}: AudioTrackList
  autoplay* {.importc.}: bool
  buffered* {.importc.}: TimeRanges
  controls* {.importc.}: bool
  currentSrc* {.importc.}: cstring
  currentTime* {.importc.}: float
  defaultMuted* {.importc.}: bool
  defaultPlaybackRate* {.importc.}: float
  duration* {.importc.}: float
  ended* {.importc.}: bool
  error* {.importc.}: MediaError
  loop* {.importc.}: bool
  msAudioCategory* {.importc.}: cstring
  msAudioDeviceType* {.importc.}: cstring
  msGraphicsTrustStatus* {.importc.}: MSGraphicsTrust
  msKeys* {.importc.}: MSMediaKeys
  msPlayToDisabled* {.importc.}: bool
  msPlayToPreferredSourceUri* {.importc.}: cstring
  msPlayToPrimary* {.importc.}: bool
  msRealTime* {.importc.}: bool
  muted* {.importc.}: bool
  networkState* {.importc.}: float
  paused* {.importc.}: bool
  playbackRate* {.importc.}: float
  played* {.importc.}: TimeRanges
  preload* {.importc.}: cstring
  readyState* {.importc.}: float
  seekable* {.importc.}: TimeRanges
  seeking* {.importc.}: bool
  src* {.importc.}: cstring
  textTracks* {.importc.}: TextTrackList
  videoTracks* {.importc.}: VideoTrackList
  volume* {.importc.}: float
  HAVE_CURRENT_DATA* {.importc.}: float
  HAVE_ENOUGH_DATA* {.importc.}: float
  HAVE_FUTURE_DATA* {.importc.}: float
  HAVE_METADATA* {.importc.}: float
  HAVE_NOTHING* {.importc.}: float
  NETWORK_EMPTY* {.importc.}: float
  NETWORK_IDLE* {.importc.}: float
  NETWORK_LOADING* {.importc.}: float
  NETWORK_NO_SOURCE* {.importc.}: float
proc addTextTrack*(self: HTMLMediaElement, kind: cstring, label: cstring,
    language: cstring): TextTrack {.importcpp.}
proc canPlayType*(self: HTMLMediaElement, xType: cstring): cstring {.importcpp.}
proc load*(self: HTMLMediaElement): void {.importcpp.}
proc msClearEffects*(self: HTMLMediaElement): void {.importcpp.}
proc msSetMediaKeys*(self: HTMLMediaElement,
    mediaKeys: MSMediaKeys): void {.importcpp.}
proc pause*(self: HTMLMediaElement): void {.importcpp.}
proc play*(self: HTMLMediaElement): void {.importcpp.}
proc addEventListener*(self: HTMLMediaElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLMediaElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var HTMLMediaElementAudioTracks* {.importc: "HTMLMediaElement.audioTracks",
    nodecl.}: AudioTrackList
var HTMLMediaElementAutoplay* {.importc: "HTMLMediaElement.autoplay", nodecl.}: bool
var HTMLMediaElementBuffered* {.importc: "HTMLMediaElement.buffered",
    nodecl.}: TimeRanges
var HTMLMediaElementControls* {.importc: "HTMLMediaElement.controls", nodecl.}: bool
var HTMLMediaElementCurrentSrc* {.importc: "HTMLMediaElement.currentSrc",
    nodecl.}: cstring
var HTMLMediaElementCurrentTime* {.importc: "HTMLMediaElement.currentTime",
    nodecl.}: float
var HTMLMediaElementDefaultMuted* {.importc: "HTMLMediaElement.defaultMuted", nodecl.}: bool
var HTMLMediaElementDefaultPlaybackRate *
  {.importc: "HTMLMediaElement.defaultPlaybackRate", nodecl.}: float
var HTMLMediaElementDuration* {.importc: "HTMLMediaElement.duration",
    nodecl.}: float
var HTMLMediaElementEnded* {.importc: "HTMLMediaElement.ended", nodecl.}: bool
var HTMLMediaElementError* {.importc: "HTMLMediaElement.error",
    nodecl.}: MediaError
var HTMLMediaElementLoop* {.importc: "HTMLMediaElement.loop", nodecl.}: bool
var HTMLMediaElementMsAudioCategory* {.importc: "HTMLMediaElement.msAudioCategory",
    nodecl.}: cstring
var HTMLMediaElementMsAudioDeviceType* {.importc: "HTMLMediaElement.msAudioDeviceType",
    nodecl.}: cstring
var HTMLMediaElementMsGraphicsTrustStatus *
  {.importc: "HTMLMediaElement.msGraphicsTrustStatus", nodecl.}: MSGraphicsTrust
var HTMLMediaElementMsKeys* {.importc: "HTMLMediaElement.msKeys",
    nodecl.}: MSMediaKeys
var HTMLMediaElementMsPlayToDisabled* {.importc: "HTMLMediaElement.msPlayToDisabled", nodecl.}: bool
var HTMLMediaElementMsPlayToPreferredSourceUri *
  {.importc: "HTMLMediaElement.msPlayToPreferredSourceUri", nodecl.}: cstring
var HTMLMediaElementMsPlayToPrimary* {.importc: "HTMLMediaElement.msPlayToPrimary", nodecl.}: bool
var HTMLMediaElementMsRealTime* {.importc: "HTMLMediaElement.msRealTime", nodecl.}: bool
var HTMLMediaElementMuted* {.importc: "HTMLMediaElement.muted", nodecl.}: bool
var HTMLMediaElementNetworkState* {.importc: "HTMLMediaElement.networkState",
    nodecl.}: float
var HTMLMediaElementPaused* {.importc: "HTMLMediaElement.paused", nodecl.}: bool
var HTMLMediaElementPlaybackRate* {.importc: "HTMLMediaElement.playbackRate",
    nodecl.}: float
var HTMLMediaElementPlayed* {.importc: "HTMLMediaElement.played",
    nodecl.}: TimeRanges
var HTMLMediaElementPreload* {.importc: "HTMLMediaElement.preload",
    nodecl.}: cstring
var HTMLMediaElementReadyState* {.importc: "HTMLMediaElement.readyState",
    nodecl.}: float
var HTMLMediaElementSeekable* {.importc: "HTMLMediaElement.seekable",
    nodecl.}: TimeRanges
var HTMLMediaElementSeeking* {.importc: "HTMLMediaElement.seeking", nodecl.}: bool
var HTMLMediaElementSrc* {.importc: "HTMLMediaElement.src", nodecl.}: cstring
var HTMLMediaElementTextTracks* {.importc: "HTMLMediaElement.textTracks",
    nodecl.}: TextTrackList
var HTMLMediaElementVideoTracks* {.importc: "HTMLMediaElement.videoTracks",
    nodecl.}: VideoTrackList
var HTMLMediaElementVolume* {.importc: "HTMLMediaElement.volume",
    nodecl.}: float
var HTMLMediaElementHAVE_CURRENT_DATA* {.importc: "HTMLMediaElement.HAVE_CURRENT_DATA",
    nodecl.}: float
var HTMLMediaElementHAVE_ENOUGH_DATA* {.importc: "HTMLMediaElement.HAVE_ENOUGH_DATA",
    nodecl.}: float
var HTMLMediaElementHAVE_FUTURE_DATA* {.importc: "HTMLMediaElement.HAVE_FUTURE_DATA",
    nodecl.}: float
var HTMLMediaElementHAVE_METADATA* {.importc: "HTMLMediaElement.HAVE_METADATA",
    nodecl.}: float
var HTMLMediaElementHAVE_NOTHING* {.importc: "HTMLMediaElement.HAVE_NOTHING",
    nodecl.}: float
var HTMLMediaElementNETWORK_EMPTY* {.importc: "HTMLMediaElement.NETWORK_EMPTY",
    nodecl.}: float
var HTMLMediaElementNETWORK_IDLE* {.importc: "HTMLMediaElement.NETWORK_IDLE",
    nodecl.}: float
var HTMLMediaElementNETWORK_LOADING* {.importc: "HTMLMediaElement.NETWORK_LOADING",
    nodecl.}: float
var HTMLMediaElementNETWORK_NO_SOURCE* {.importc: "HTMLMediaElement.NETWORK_NO_SOURCE",
    nodecl.}: float
proc HTMLMediaElementAddTextTrack*(kind: cstring, label: cstring,
    language: cstring): TextTrack {.importc: "HTMLMediaElement.addTextTrack".}
proc HTMLMediaElementCanPlayType*(xType: cstring): cstring {.importc: "HTMLMediaElement.canPlayType".}
proc HTMLMediaElementLoad*(): void {.importc: "HTMLMediaElement.load".}
proc HTMLMediaElementMsClearEffects*(): void {.importc: "HTMLMediaElement.msClearEffects".}
proc HTMLMediaElementMsSetMediaKeys*(mediaKeys: MSMediaKeys): void {.importc: "HTMLMediaElement.msSetMediaKeys".}
proc HTMLMediaElementPause*(): void {.importc: "HTMLMediaElement.pause".}
proc HTMLMediaElementPlay*(): void {.importc: "HTMLMediaElement.play".}
proc HTMLMediaElementAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "HTMLMediaElement.addEventListener".}
proc HTMLMediaElementAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "HTMLMediaElement.addEventListener".}

type PeriodicWave* {.importc.} = ref object of RootObj

type DecodeSuccessCallback* {.importc.} = ref object of RootObj
proc newDecodeSuccessCallback*(): DecodeSuccessCallback {.importcpp: "new DecodeSuccessCallback".}

type DecodeErrorCallback* {.importc.} = ref object of RootObj
proc newDecodeErrorCallback*(): DecodeErrorCallback {.importcpp: "new DecodeErrorCallback".}

type
  AudioNode* {.importc.} = ref object of EventTarget
    channelCount* {.importc.}: float
    channelCountMode* {.importc.}: cstring
    channelInterpretation* {.importc.}: cstring
    context* {.importc.}: AudioContext
    numberOfInputs* {.importc.}: float
    numberOfOutputs* {.importc.}: float
  WaveShaperNode* {.importc.} = ref object of AudioNode
    curve* {.importc.}: Float32Array
    oversample* {.importc.}: cstring
  StereoPannerNode* {.importc.} = ref object of AudioNode
    pan* {.importc.}: AudioParam
  ScriptProcessorNode* {.importc.} = ref object of AudioNode
    bufferSize* {.importc.}: float
  PannerNode* {.importc.} = ref object of AudioNode
    coneInnerAngle* {.importc.}: float
    coneOuterAngle* {.importc.}: float
    coneOuterGain* {.importc.}: float
    distanceModel* {.importc.}: cstring
    maxDistance* {.importc.}: float
    panningModel* {.importc.}: cstring
    refDistance* {.importc.}: float
    rolloffFactor* {.importc.}: float
  OscillatorNode* {.importc.} = ref object of AudioNode
    detune* {.importc.}: AudioParam
    frequency* {.importc.}: AudioParam
    xType* {.importc: "type".}: cstring
  MediaElementAudioSourceNode* {.importc.} = ref object of AudioNode
  GainNode* {.importc.} = ref object of AudioNode
    gain* {.importc.}: AudioParam
  DynamicsCompressorNode* {.importc.} = ref object of AudioNode
    attack* {.importc.}: AudioParam
    knee* {.importc.}: AudioParam
    ratio* {.importc.}: AudioParam
    reduction* {.importc.}: AudioParam
    release* {.importc.}: AudioParam
    threshold* {.importc.}: AudioParam
  DelayNode* {.importc.} = ref object of AudioNode
    delayTime* {.importc.}: AudioParam
  ConvolverNode* {.importc.} = ref object of AudioNode
    buffer* {.importc.}: AudioBuffer
    normalize* {.importc.}: bool
  ChannelSplitterNode* {.importc.} = ref object of AudioNode
  ChannelMergerNode* {.importc.} = ref object of AudioNode
  AudioBufferSourceNode* {.importc.} = ref object of AudioNode
    buffer* {.importc.}: AudioBuffer
    loop* {.importc.}: bool
    loopEnd* {.importc.}: float
    loopStart* {.importc.}: float
    playbackRate* {.importc.}: AudioParam
  BiquadFilterNode* {.importc.} = ref object of AudioNode
    Q* {.importc.}: AudioParam
    detune* {.importc.}: AudioParam
    frequency* {.importc.}: AudioParam
    gain* {.importc.}: AudioParam
    xType* {.importc: "type".}: cstring
  AudioDestinationNode* {.importc.} = ref object of AudioNode
    maxChannelCount* {.importc.}: float
  AudioContext* {.importc.} = ref object of EventTarget
    currentTime* {.importc.}: float
    destination* {.importc.}: AudioDestinationNode
    listener* {.importc.}: AudioListener
    sampleRate* {.importc.}: float
    state* {.importc.}: cstring
  AnalyserNode* {.importc.} = ref object of AudioNode
    fftSize* {.importc.}: float
    frequencyBinCount* {.importc.}: float
    maxDecibels* {.importc.}: float
    minDecibels* {.importc.}: float
    smoothingTimeConstant* {.importc.}: float
proc newAudioNode*(): AudioNode {.importcpp: "new AudioNode".}
proc connect*(self: AudioNode, destination: AudioNode, output: float,
    input: float): void {.importcpp.}
proc disconnect*(self: AudioNode, output: float): void {.importcpp.}
var WaveShaperNodeCurve* {.importc: "WaveShaperNode.curve",
    nodecl.}: Float32Array
var WaveShaperNodeOversample* {.importc: "WaveShaperNode.oversample",
    nodecl.}: cstring
var StereoPannerNodePan* {.importc: "StereoPannerNode.pan", nodecl.}: AudioParam
proc addEventListener*(self: ScriptProcessorNode, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: ScriptProcessorNode, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var ScriptProcessorNodeBufferSize* {.importc: "ScriptProcessorNode.bufferSize",
    nodecl.}: float
proc ScriptProcessorNodeAddEventListener*(xType: cstring,
    listener: EventListener,
    useCapture: bool): void {.importc: "ScriptProcessorNode.addEventListener".}
proc ScriptProcessorNodeAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "ScriptProcessorNode.addEventListener".}
proc setOrientation*(self: PannerNode, x: float, y: float,
    z: float): void {.importcpp.}
proc setPosition*(self: PannerNode, x: float, y: float,
    z: float): void {.importcpp.}
proc setVelocity*(self: PannerNode, x: float, y: float,
    z: float): void {.importcpp.}
var PannerNodeConeInnerAngle* {.importc: "PannerNode.coneInnerAngle",
    nodecl.}: float
var PannerNodeConeOuterAngle* {.importc: "PannerNode.coneOuterAngle",
    nodecl.}: float
var PannerNodeConeOuterGain* {.importc: "PannerNode.coneOuterGain",
    nodecl.}: float
var PannerNodeDistanceModel* {.importc: "PannerNode.distanceModel",
    nodecl.}: cstring
var PannerNodeMaxDistance* {.importc: "PannerNode.maxDistance", nodecl.}: float
var PannerNodePanningModel* {.importc: "PannerNode.panningModel",
    nodecl.}: cstring
var PannerNodeRefDistance* {.importc: "PannerNode.refDistance", nodecl.}: float
var PannerNodeRolloffFactor* {.importc: "PannerNode.rolloffFactor",
    nodecl.}: float
proc PannerNodeSetOrientation*(x: float, y: float,
    z: float): void {.importc: "PannerNode.setOrientation".}
proc PannerNodeSetPosition*(x: float, y: float,
    z: float): void {.importc: "PannerNode.setPosition".}
proc PannerNodeSetVelocity*(x: float, y: float,
    z: float): void {.importc: "PannerNode.setVelocity".}
proc setPeriodicWave*(self: OscillatorNode,
    periodicWave: PeriodicWave): void {.importcpp.}
proc start*(self: OscillatorNode, xWhen: float): void {.importcpp.}
proc stop*(self: OscillatorNode, xWhen: float): void {.importcpp.}
proc addEventListener*(self: OscillatorNode, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: OscillatorNode, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var OscillatorNodeDetune* {.importc: "OscillatorNode.detune",
    nodecl.}: AudioParam
var OscillatorNodeFrequency* {.importc: "OscillatorNode.frequency",
    nodecl.}: AudioParam
var OscillatorNodeType* {.importc: "OscillatorNode.type", nodecl.}: cstring
proc OscillatorNodeSetPeriodicWave*(periodicWave: PeriodicWave): void {.importc: "OscillatorNode.setPeriodicWave".}
proc OscillatorNodeStart*(xWhen: float): void {.importc: "OscillatorNode.start".}
proc OscillatorNodeStop*(xWhen: float): void {.importc: "OscillatorNode.stop".}
proc OscillatorNodeAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "OscillatorNode.addEventListener".}
proc OscillatorNodeAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "OscillatorNode.addEventListener".}
var GainNodeGain* {.importc: "GainNode.gain", nodecl.}: AudioParam
var DynamicsCompressorNodeAttack* {.importc: "DynamicsCompressorNode.attack",
    nodecl.}: AudioParam
var DynamicsCompressorNodeKnee* {.importc: "DynamicsCompressorNode.knee",
    nodecl.}: AudioParam
var DynamicsCompressorNodeRatio* {.importc: "DynamicsCompressorNode.ratio",
    nodecl.}: AudioParam
var DynamicsCompressorNodeReduction* {.importc: "DynamicsCompressorNode.reduction",
    nodecl.}: AudioParam
var DynamicsCompressorNodeRelease* {.importc: "DynamicsCompressorNode.release",
    nodecl.}: AudioParam
var DynamicsCompressorNodeThreshold* {.importc: "DynamicsCompressorNode.threshold",
    nodecl.}: AudioParam
var DelayNodeDelayTime* {.importc: "DelayNode.delayTime", nodecl.}: AudioParam
var ConvolverNodeBuffer* {.importc: "ConvolverNode.buffer",
    nodecl.}: AudioBuffer
var ConvolverNodeNormalize* {.importc: "ConvolverNode.normalize", nodecl.}: bool
proc newAudioBufferSourceNode*(): AudioBufferSourceNode {.importcpp: "new AudioBufferSourceNode".}
proc start*(self: AudioBufferSourceNode, xWhen: float, offset: float,
    duration: float): void {.importcpp.}
proc stop*(self: AudioBufferSourceNode, xWhen: float): void {.importcpp.}
proc addEventListener*(self: AudioBufferSourceNode, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: AudioBufferSourceNode, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc getFrequencyResponse*(self: BiquadFilterNode, frequencyHz: Float32Array,
    magResponse: Float32Array, phaseResponse: Float32Array): void {.importcpp.}
var BiquadFilterNodeQ* {.importc: "BiquadFilterNode.Q", nodecl.}: AudioParam
var BiquadFilterNodeDetune* {.importc: "BiquadFilterNode.detune",
    nodecl.}: AudioParam
var BiquadFilterNodeFrequency* {.importc: "BiquadFilterNode.frequency",
    nodecl.}: AudioParam
var BiquadFilterNodeGain* {.importc: "BiquadFilterNode.gain",
    nodecl.}: AudioParam
var BiquadFilterNodeType* {.importc: "BiquadFilterNode.type", nodecl.}: cstring
proc BiquadFilterNodeGetFrequencyResponse*(frequencyHz: Float32Array,
    magResponse: Float32Array,
    phaseResponse: Float32Array): void {.importc: "BiquadFilterNode.getFrequencyResponse".}
var AudioDestinationNodeMaxChannelCount *
  {.importc: "AudioDestinationNode.maxChannelCount", nodecl.}: float
proc createAnalyser*(self: AudioContext): AnalyserNode {.importcpp.}
proc createBiquadFilter*(self: AudioContext): BiquadFilterNode {.importcpp.}
proc createBuffer*(self: AudioContext, numberOfChannels: float, length: float,
    sampleRate: float): AudioBuffer {.importcpp.}
proc createBufferSource*(self: AudioContext): AudioBufferSourceNode {.importcpp.}
proc createChannelMerger*(self: AudioContext,
    numberOfInputs: float): ChannelMergerNode {.importcpp.}
proc createChannelSplitter*(self: AudioContext,
    numberOfOutputs: float): ChannelSplitterNode {.importcpp.}
proc createConvolver*(self: AudioContext): ConvolverNode {.importcpp.}
proc createDelay*(self: AudioContext, maxDelayTime: float): DelayNode {.importcpp.}
proc createDynamicsCompressor*(self: AudioContext): DynamicsCompressorNode {.importcpp.}
proc createGain*(self: AudioContext): GainNode {.importcpp.}
proc createMediaElementSource*(self: AudioContext,
    mediaElement: HTMLMediaElement): MediaElementAudioSourceNode {.importcpp.}
proc createOscillator*(self: AudioContext): OscillatorNode {.importcpp.}
proc createPanner*(self: AudioContext): PannerNode {.importcpp.}
proc createPeriodicWave*(self: AudioContext, real: Float32Array,
    imag: Float32Array): PeriodicWave {.importcpp.}
proc createScriptProcessor*(self: AudioContext, bufferSize: float,
    numberOfInputChannels: float,
    numberOfOutputChannels: float): ScriptProcessorNode {.importcpp.}
proc createStereoPanner*(self: AudioContext): StereoPannerNode {.importcpp.}
proc createWaveShaper*(self: AudioContext): WaveShaperNode {.importcpp.}
proc decodeAudioData*(self: AudioContext, audioData: ArrayBuffer,
    successCallback: DecodeSuccessCallback,
    errorCallback: DecodeErrorCallback): void {.importcpp.}
var AudioContextCurrentTime* {.importc: "AudioContext.currentTime",
    nodecl.}: float
var AudioContextDestination* {.importc: "AudioContext.destination",
    nodecl.}: AudioDestinationNode
var AudioContextListener* {.importc: "AudioContext.listener",
    nodecl.}: AudioListener
var AudioContextSampleRate* {.importc: "AudioContext.sampleRate",
    nodecl.}: float
var AudioContextState* {.importc: "AudioContext.state", nodecl.}: cstring
proc AudioContextCreateAnalyser*(): AnalyserNode {.importc: "AudioContext.createAnalyser".}
proc AudioContextCreateBiquadFilter*(): BiquadFilterNode {.importc: "AudioContext.createBiquadFilter".}
proc AudioContextCreateBuffer*(numberOfChannels: float, length: float,
    sampleRate: float): AudioBuffer {.importc: "AudioContext.createBuffer".}
proc AudioContextCreateBufferSource*(): AudioBufferSourceNode {.importc: "AudioContext.createBufferSource".}
proc AudioContextCreateChannelMerger*(numberOfInputs: float): ChannelMergerNode {.importc: "AudioContext.createChannelMerger".}
proc AudioContextCreateChannelSplitter*(
  numberOfOutputs: float): ChannelSplitterNode {.importc: "AudioContext.createChannelSplitter".}
proc AudioContextCreateConvolver*(): ConvolverNode {.importc: "AudioContext.createConvolver".}
proc AudioContextCreateDelay*(maxDelayTime: float): DelayNode {.importc: "AudioContext.createDelay".}
proc AudioContextCreateDynamicsCompressor*(): DynamicsCompressorNode {.importc: "AudioContext.createDynamicsCompressor".}
proc AudioContextCreateGain*(): GainNode {.importc: "AudioContext.createGain".}
proc AudioContextCreateMediaElementSource*(
  mediaElement: HTMLMediaElement): MediaElementAudioSourceNode {.importc: "AudioContext.createMediaElementSource".}
proc AudioContextCreateOscillator*(): OscillatorNode {.importc: "AudioContext.createOscillator".}
proc AudioContextCreatePanner*(): PannerNode {.importc: "AudioContext.createPanner".}
proc AudioContextCreatePeriodicWave*(real: Float32Array,
    imag: Float32Array): PeriodicWave {.importc: "AudioContext.createPeriodicWave".}
proc AudioContextCreateScriptProcessor*(bufferSize: float,
    numberOfInputChannels: float,
    numberOfOutputChannels: float): ScriptProcessorNode {.importc: "AudioContext.createScriptProcessor".}
proc AudioContextCreateStereoPanner*(): StereoPannerNode {.importc: "AudioContext.createStereoPanner".}
proc AudioContextCreateWaveShaper*(): WaveShaperNode {.importc: "AudioContext.createWaveShaper".}
proc AudioContextDecodeAudioData*(audioData: ArrayBuffer,
    successCallback: DecodeSuccessCallback,
    errorCallback: DecodeErrorCallback): void {.importc: "AudioContext.decodeAudioData".}
proc newAnalyserNode*(): AnalyserNode {.importcpp: "new AnalyserNode".}
proc getByteFrequencyData*(self: AnalyserNode,
    array: Uint8Array): void {.importcpp.}
proc getByteTimeDomainData*(self: AnalyserNode,
    array: Uint8Array): void {.importcpp.}
proc getFloatFrequencyData*(self: AnalyserNode,
    array: Float32Array): void {.importcpp.}
proc getFloatTimeDomainData*(self: AnalyserNode,
    array: Float32Array): void {.importcpp.}

type AnimationEvent* {.importc.} = ref object of Event
  animationName* {.importc.}: cstring
  elapsedTime* {.importc.}: float
proc newAnimationEvent*(): AnimationEvent {.importcpp: "new AnimationEvent".}
proc initAnimationEvent*(self: AnimationEvent, typeArg: cstring,
    canBubbleArg: bool, cancelableArg: bool, animationNameArg: cstring,
    elapsedTimeArg: float): void {.importcpp.}

type AriaRequestEvent* {.importc.} = ref object of Event
  attributeName* {.importc.}: cstring
  attributeValue* {.importc.}: cstring
proc newAriaRequestEvent*(xType: cstring,
    eventInitDict: AriaRequestEventInit): AriaRequestEvent {.importcpp: "new AriaRequestEvent(@)".}

type AudioProcessingEvent* {.importc.} = ref object of Event
  inputBuffer* {.importc.}: AudioBuffer
  outputBuffer* {.importc.}: AudioBuffer
  playbackTime* {.importc.}: float
proc newAudioProcessingEvent*(): AudioProcessingEvent {.importcpp: "new AudioProcessingEvent".}

type BeforeUnloadEvent* {.importc.} = ref object of Event
proc newBeforeUnloadEvent*(): BeforeUnloadEvent {.importcpp: "new BeforeUnloadEvent".}

type Blob* {.importc.} = ref object of RootObj
  size* {.importc.}: float
  xType* {.importc: "type".}: cstring
proc msClose*(self: Blob): void {.importcpp.}
proc slice*(self: Blob, start: float, xEnd: float,
    contentType: cstring): Blob {.importcpp.}

type CSS* {.importc.} = ref object of RootObj
proc supports*(self: CSS, property: cstring, value: cstring): bool {.importcpp.}
proc CSSSupports*(property: cstring, value: cstring): bool {.importc: "CSS.supports".}

type StyleSheetPageList* {.importc.} = ref object of RootObj
  length* {.importc.}: float
var StyleSheetPageListLength* {.importc: "StyleSheetPageList.length",
    nodecl.}: float

type CSSStyleSheet* {.importc.} = ref object of StyleSheet
  cssRules* {.importc.}: CSSRuleList
  cssText* {.importc.}: cstring
  id* {.importc.}: cstring
  imports* {.importc.}: StyleSheetList
  isAlternate* {.importc.}: bool
  isPrefAlternate* {.importc.}: bool
  owningElement* {.importc.}: Element
  pages* {.importc.}: StyleSheetPageList
  readOnly* {.importc.}: bool
  rules* {.importc.}: CSSRuleList
proc newCSSStyleSheet*(): CSSStyleSheet {.importcpp: "new CSSStyleSheet".}
proc addImport*(self: CSSStyleSheet, bstrURL: cstring,
    lIndex: float): float {.importcpp.}
proc addPageRule*(self: CSSStyleSheet, bstrSelector: cstring,
    bstrStyle: cstring, lIndex: float): float {.importcpp.}
proc addRule*(self: CSSStyleSheet, bstrSelector: cstring, bstrStyle: cstring,
    lIndex: float): float {.importcpp.}
proc deleteRule*(self: CSSStyleSheet, index: float): void {.importcpp.}
proc insertRule*(self: CSSStyleSheet, rule: cstring,
    index: float): float {.importcpp.}
proc removeImport*(self: CSSStyleSheet, lIndex: float): void {.importcpp.}
proc removeRule*(self: CSSStyleSheet, lIndex: float): void {.importcpp.}

type CanvasGradient* {.importc.} = ref object of RootObj
proc newCanvasGradient*(): CanvasGradient {.importcpp: "new CanvasGradient".}
proc addColorStop*(self: CanvasGradient, offset: float,
    color: cstring): void {.importcpp.}

type CanvasPattern* {.importc.} = ref object of RootObj
proc newCanvasPattern*(): CanvasPattern {.importcpp: "new CanvasPattern".}

type HTMLCanvasElement* {.importc.} = ref object of HTMLElement
  height* {.importc.}: float
  width* {.importc.}: float
proc msToBlob*(self: HTMLCanvasElement): Blob {.importcpp.}
proc toBlob*(self: HTMLCanvasElement): Blob {.importcpp.}
var HTMLCanvasElementHeight* {.importc: "HTMLCanvasElement.height",
    nodecl.}: float
var HTMLCanvasElementWidth* {.importc: "HTMLCanvasElement.width",
    nodecl.}: float
proc HTMLCanvasElementMsToBlob*(): Blob {.importc: "HTMLCanvasElement.msToBlob".}
proc HTMLCanvasElementToBlob*(): Blob {.importc: "HTMLCanvasElement.toBlob".}

type ImageData* {.importc.} = ref object of RootObj
  data* {.importc.}: Uint8ClampedArray
  height* {.importc.}: float
  width* {.importc.}: float
var ImageDataData* {.importc: "ImageData.data", nodecl.}: Uint8ClampedArray
var ImageDataHeight* {.importc: "ImageData.height", nodecl.}: float
var ImageDataWidth* {.importc: "ImageData.width", nodecl.}: float

type HTMLImageElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  alt* {.importc.}: cstring
  border* {.importc.}: cstring
  complete* {.importc.}: bool
  crossOrigin* {.importc.}: cstring
  currentSrc* {.importc.}: cstring
  height* {.importc.}: float
  hspace* {.importc.}: float
  isMap* {.importc.}: bool
  longDesc* {.importc.}: cstring
  msPlayToDisabled* {.importc.}: bool
  msPlayToPreferredSourceUri* {.importc.}: cstring
  msPlayToPrimary* {.importc.}: bool
  name* {.importc.}: cstring
  naturalHeight* {.importc.}: float
  naturalWidth* {.importc.}: float
  src* {.importc.}: cstring
  srcset* {.importc.}: cstring
  useMap* {.importc.}: cstring
  vspace* {.importc.}: float
  width* {.importc.}: float
  x* {.importc.}: float
  y* {.importc.}: float
var HTMLImageElementAlign* {.importc: "HTMLImageElement.align",
    nodecl.}: cstring
var HTMLImageElementAlt* {.importc: "HTMLImageElement.alt", nodecl.}: cstring
var HTMLImageElementBorder* {.importc: "HTMLImageElement.border",
    nodecl.}: cstring
var HTMLImageElementComplete* {.importc: "HTMLImageElement.complete", nodecl.}: bool
var HTMLImageElementCrossOrigin* {.importc: "HTMLImageElement.crossOrigin",
    nodecl.}: cstring
var HTMLImageElementCurrentSrc* {.importc: "HTMLImageElement.currentSrc",
    nodecl.}: cstring
var HTMLImageElementHeight* {.importc: "HTMLImageElement.height",
    nodecl.}: float
var HTMLImageElementHspace* {.importc: "HTMLImageElement.hspace",
    nodecl.}: float
var HTMLImageElementIsMap* {.importc: "HTMLImageElement.isMap", nodecl.}: bool
var HTMLImageElementLongDesc* {.importc: "HTMLImageElement.longDesc",
    nodecl.}: cstring
var HTMLImageElementMsPlayToDisabled* {.importc: "HTMLImageElement.msPlayToDisabled", nodecl.}: bool
var HTMLImageElementMsPlayToPreferredSourceUri *
  {.importc: "HTMLImageElement.msPlayToPreferredSourceUri", nodecl.}: cstring
var HTMLImageElementMsPlayToPrimary* {.importc: "HTMLImageElement.msPlayToPrimary", nodecl.}: bool
var HTMLImageElementName* {.importc: "HTMLImageElement.name", nodecl.}: cstring
var HTMLImageElementNaturalHeight* {.importc: "HTMLImageElement.naturalHeight",
    nodecl.}: float
var HTMLImageElementNaturalWidth* {.importc: "HTMLImageElement.naturalWidth",
    nodecl.}: float
var HTMLImageElementSrc* {.importc: "HTMLImageElement.src", nodecl.}: cstring
var HTMLImageElementSrcset* {.importc: "HTMLImageElement.srcset",
    nodecl.}: cstring
var HTMLImageElementUseMap* {.importc: "HTMLImageElement.useMap",
    nodecl.}: cstring
var HTMLImageElementVspace* {.importc: "HTMLImageElement.vspace",
    nodecl.}: float
var HTMLImageElementWidth* {.importc: "HTMLImageElement.width", nodecl.}: float
var HTMLImageElementX* {.importc: "HTMLImageElement.x", nodecl.}: float
var HTMLImageElementY* {.importc: "HTMLImageElement.y", nodecl.}: float

type VideoPlaybackQuality* {.importc.} = ref object of RootObj
  corruptedVideoFrames* {.importc.}: float
  creationTime* {.importc.}: float
  droppedVideoFrames* {.importc.}: float
  totalFrameDelay* {.importc.}: float
  totalVideoFrames* {.importc.}: float
var VideoPlaybackQualityCorruptedVideoFrames *
  {.importc: "VideoPlaybackQuality.corruptedVideoFrames", nodecl.}: float
var VideoPlaybackQualityCreationTime* {.importc: "VideoPlaybackQuality.creationTime",
    nodecl.}: float
var VideoPlaybackQualityDroppedVideoFrames *
  {.importc: "VideoPlaybackQuality.droppedVideoFrames", nodecl.}: float
var VideoPlaybackQualityTotalFrameDelay *
  {.importc: "VideoPlaybackQuality.totalFrameDelay", nodecl.}: float
var VideoPlaybackQualityTotalVideoFrames *
  {.importc: "VideoPlaybackQuality.totalVideoFrames", nodecl.}: float

type HTMLVideoElement* {.importc.} = ref object of HTMLMediaElement
  height* {.importc.}: float
  msHorizontalMirror* {.importc.}: bool
  msIsLayoutOptimalForPlayback* {.importc.}: bool
  msIsStereo3D* {.importc.}: bool
  msStereo3DPackingMode* {.importc.}: cstring
  msStereo3DRenderMode* {.importc.}: cstring
  msZoom* {.importc.}: bool
  poster* {.importc.}: cstring
  videoHeight* {.importc.}: float
  videoWidth* {.importc.}: float
  webkitDisplayingFullscreen* {.importc.}: bool
  webkitSupportsFullscreen* {.importc.}: bool
  width* {.importc.}: float
proc getVideoPlaybackQuality*(self: HTMLVideoElement): VideoPlaybackQuality {.importcpp.}
proc msFrameStep*(self: HTMLVideoElement, forward: bool): void {.importcpp.}
proc msSetVideoRectangle*(self: HTMLVideoElement, left: float, top: float,
    right: float, bottom: float): void {.importcpp.}
proc webkitEnterFullScreen*(self: HTMLVideoElement): void {.importcpp.}
proc webkitExitFullScreen*(self: HTMLVideoElement): void {.importcpp.}
proc addEventListener*(self: HTMLVideoElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLVideoElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var HTMLVideoElementHeight* {.importc: "HTMLVideoElement.height",
    nodecl.}: float
var HTMLVideoElementMsHorizontalMirror *
  {.importc: "HTMLVideoElement.msHorizontalMirror", nodecl.}: bool
var HTMLVideoElementMsIsLayoutOptimalForPlayback *
  {.importc: "HTMLVideoElement.msIsLayoutOptimalForPlayback", nodecl.}: bool
var HTMLVideoElementMsIsStereo3D* {.importc: "HTMLVideoElement.msIsStereo3D", nodecl.}: bool
var HTMLVideoElementMsStereo3DPackingMode *
  {.importc: "HTMLVideoElement.msStereo3DPackingMode", nodecl.}: cstring
var HTMLVideoElementMsStereo3DRenderMode *
  {.importc: "HTMLVideoElement.msStereo3DRenderMode", nodecl.}: cstring
var HTMLVideoElementMsZoom* {.importc: "HTMLVideoElement.msZoom", nodecl.}: bool
var HTMLVideoElementPoster* {.importc: "HTMLVideoElement.poster",
    nodecl.}: cstring
var HTMLVideoElementVideoHeight* {.importc: "HTMLVideoElement.videoHeight",
    nodecl.}: float
var HTMLVideoElementVideoWidth* {.importc: "HTMLVideoElement.videoWidth",
    nodecl.}: float
var HTMLVideoElementWebkitDisplayingFullscreen *
  {.importc: "HTMLVideoElement.webkitDisplayingFullscreen", nodecl.}: bool
var HTMLVideoElementWebkitSupportsFullscreen *
  {.importc: "HTMLVideoElement.webkitSupportsFullscreen", nodecl.}: bool
var HTMLVideoElementWidth* {.importc: "HTMLVideoElement.width", nodecl.}: float
proc HTMLVideoElementGetVideoPlaybackQuality*(): VideoPlaybackQuality {.importc: "HTMLVideoElement.getVideoPlaybackQuality".}
proc HTMLVideoElementMsFrameStep*(forward: bool): void {.importc: "HTMLVideoElement.msFrameStep".}
proc HTMLVideoElementMsSetVideoRectangle*(left: float, top: float, right: float,
    bottom: float): void {.importc: "HTMLVideoElement.msSetVideoRectangle".}
proc HTMLVideoElementWebkitEnterFullScreen*(): void {.importc: "HTMLVideoElement.webkitEnterFullScreen".}
proc HTMLVideoElementWebkitExitFullScreen*(): void {.importc: "HTMLVideoElement.webkitExitFullScreen".}
proc HTMLVideoElementAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "HTMLVideoElement.addEventListener".}
proc HTMLVideoElementAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "HTMLVideoElement.addEventListener".}

type TextMetrics* {.importc.} = ref object of RootObj
  width* {.importc.}: float
var TextMetricsWidth* {.importc: "TextMetrics.width", nodecl.}: float

type CanvasRenderingContext2D* {.importc.} = ref object of RootObj
  canvas* {.importc.}: HTMLCanvasElement
  font* {.importc.}: cstring
  globalAlpha* {.importc.}: float
  globalCompositeOperation* {.importc.}: cstring
  lineCap* {.importc.}: cstring
  lineDashOffset* {.importc.}: float
  lineJoin* {.importc.}: cstring
  lineWidth* {.importc.}: float
  miterLimit* {.importc.}: float
  msFillRule* {.importc.}: cstring
  msImageSmoothingEnabled* {.importc.}: bool
  shadowBlur* {.importc.}: float
  shadowColor* {.importc.}: cstring
  shadowOffsetX* {.importc.}: float
  shadowOffsetY* {.importc.}: float
  textAlign* {.importc.}: cstring
  textBaseline* {.importc.}: cstring
proc newCanvasRenderingContext2D*(): CanvasRenderingContext2D {.importcpp: "new CanvasRenderingContext2D".}
proc arc*(self: CanvasRenderingContext2D, x: float, y: float, radius: float,
    startAngle: float, endAngle: float, anticlockwise: bool): void {.importcpp.}
proc arcTo*(self: CanvasRenderingContext2D, x1: float, y1: float, x2: float,
    y2: float, radius: float): void {.importcpp.}
proc beginPath*(self: CanvasRenderingContext2D): void {.importcpp.}
proc bezierCurveTo*(self: CanvasRenderingContext2D, cp1x: float, cp1y: float,
    cp2x: float, cp2y: float, x: float, y: float): void {.importcpp.}
proc clearRect*(self: CanvasRenderingContext2D, x: float, y: float, w: float,
    h: float): void {.importcpp.}
proc clip*(self: CanvasRenderingContext2D,
    fillRule: cstring): void {.importcpp.}
proc closePath*(self: CanvasRenderingContext2D): void {.importcpp.}
proc createImageData*(self: CanvasRenderingContext2D, imageDataOrSw: float,
    sh: float): ImageData {.importcpp.}
proc createImageData*(self: CanvasRenderingContext2D, imageDataOrSw: ImageData,
    sh: float): ImageData {.importcpp.}
proc createLinearGradient*(self: CanvasRenderingContext2D, x0: float, y0: float,
    x1: float, y1: float): CanvasGradient {.importcpp.}
proc createPattern*(self: CanvasRenderingContext2D, image: HTMLImageElement,
    repetition: cstring): CanvasPattern {.importcpp.}
proc createPattern*(self: CanvasRenderingContext2D, image: HTMLCanvasElement,
    repetition: cstring): CanvasPattern {.importcpp.}
proc createPattern*(self: CanvasRenderingContext2D, image: HTMLVideoElement,
    repetition: cstring): CanvasPattern {.importcpp.}
proc createRadialGradient*(self: CanvasRenderingContext2D, x0: float, y0: float,
    r0: float, x1: float, y1: float, r1: float): CanvasGradient {.importcpp.}
proc drawImage*(self: CanvasRenderingContext2D, image: HTMLImageElement,
    offsetX: float, offsetY: float, width: float, height: float,
    canvasOffsetX: float, canvasOffsetY: float, canvasImageWidth: float,
    canvasImageHeight: float): void {.importcpp.}
proc drawImage*(self: CanvasRenderingContext2D, image: HTMLCanvasElement,
    offsetX: float, offsetY: float, width: float, height: float,
    canvasOffsetX: float, canvasOffsetY: float, canvasImageWidth: float,
    canvasImageHeight: float): void {.importcpp.}
proc drawImage*(self: CanvasRenderingContext2D, image: HTMLVideoElement,
    offsetX: float, offsetY: float, width: float, height: float,
    canvasOffsetX: float, canvasOffsetY: float, canvasImageWidth: float,
    canvasImageHeight: float): void {.importcpp.}
proc fill*(self: CanvasRenderingContext2D,
    fillRule: cstring): void {.importcpp.}
proc fillRect*(self: CanvasRenderingContext2D, x: float, y: float, w: float,
    h: float): void {.importcpp.}
proc fillText*(self: CanvasRenderingContext2D, text: cstring, x: float,
    y: float, maxWidth: float): void {.importcpp.}
proc getImageData*(self: CanvasRenderingContext2D, sx: float, sy: float,
    sw: float, sh: float): ImageData {.importcpp.}
proc isPointInPath*(self: CanvasRenderingContext2D, x: float, y: float,
    fillRule: cstring): bool {.importcpp.}
proc lineTo*(self: CanvasRenderingContext2D, x: float,
    y: float): void {.importcpp.}
proc measureText*(self: CanvasRenderingContext2D,
    text: cstring): TextMetrics {.importcpp.}
proc moveTo*(self: CanvasRenderingContext2D, x: float,
    y: float): void {.importcpp.}
proc putImageData*(self: CanvasRenderingContext2D, imagedata: ImageData,
    dx: float, dy: float, dirtyX: float, dirtyY: float, dirtyWidth: float,
    dirtyHeight: float): void {.importcpp.}
proc quadraticCurveTo*(self: CanvasRenderingContext2D, cpx: float, cpy: float,
    x: float, y: float): void {.importcpp.}
proc rect*(self: CanvasRenderingContext2D, x: float, y: float, w: float,
    h: float): void {.importcpp.}
proc restore*(self: CanvasRenderingContext2D): void {.importcpp.}
proc rotate*(self: CanvasRenderingContext2D, angle: float): void {.importcpp.}
proc save*(self: CanvasRenderingContext2D): void {.importcpp.}
proc scale*(self: CanvasRenderingContext2D, x: float,
    y: float): void {.importcpp.}
proc setTransform*(self: CanvasRenderingContext2D, m11: float, m12: float,
    m21: float, m22: float, dx: float, dy: float): void {.importcpp.}
proc stroke*(self: CanvasRenderingContext2D): void {.importcpp.}
proc strokeRect*(self: CanvasRenderingContext2D, x: float, y: float, w: float,
    h: float): void {.importcpp.}
proc strokeText*(self: CanvasRenderingContext2D, text: cstring, x: float,
    y: float, maxWidth: float): void {.importcpp.}
proc transform*(self: CanvasRenderingContext2D, m11: float, m12: float,
    m21: float, m22: float, dx: float, dy: float): void {.importcpp.}
proc translate*(self: CanvasRenderingContext2D, x: float,
    y: float): void {.importcpp.}

type File* {.importc.} = ref object of Blob
  name* {.importc.}: cstring
var FileName* {.importc: "File.name", nodecl.}: cstring

type FileList* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc item*(self: FileList, index: float): File {.importcpp.}
proc `[]`*(self: FileList, index: float): File {.importcpp: "#[#]".}
proc `[]=`*(self: FileList, index: float, value: File) {.importcpp: "#[#] = #".}
var FileListLength* {.importc: "FileList.length", nodecl.}: float
proc FileListItem*(index: float): File {.importc: "FileList.item".}

type FunctionStringCallback* {.importc.} = ref object of RootObj
proc newFunctionStringCallback*(): FunctionStringCallback {.importcpp: "new FunctionStringCallback".}

type DataTransferItem* {.importc.} = ref object of RootObj
  kind* {.importc.}: cstring
  xType* {.importc: "type".}: cstring
proc newDataTransferItem*(): DataTransferItem {.importcpp: "new DataTransferItem".}
proc getAsFile*(self: DataTransferItem): File {.importcpp.}
proc getAsString*(self: DataTransferItem,
    zCallback: FunctionStringCallback): void {.importcpp.}

type DataTransferItemList* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc add*(self: DataTransferItemList, data: File): DataTransferItem {.importcpp.}
proc clear*(self: DataTransferItemList): void {.importcpp.}
proc item*(self: DataTransferItemList, index: float): DataTransferItem {.importcpp.}
proc remove*(self: DataTransferItemList, index: float): void {.importcpp.}
proc `[]`*(self: DataTransferItemList, index: float): DataTransferItem {.importcpp: "#[#]".}
proc `[]=`*(self: DataTransferItemList, index: float,
    value: DataTransferItem) {.importcpp: "#[#] = #".}
var DataTransferItemListLength* {.importc: "DataTransferItemList.length",
    nodecl.}: float
proc DataTransferItemListAdd*(data: File): DataTransferItem {.importc: "DataTransferItemList.add".}
proc DataTransferItemListClear*(): void {.importc: "DataTransferItemList.clear".}
proc DataTransferItemListItem*(index: float): DataTransferItem {.importc: "DataTransferItemList.item".}
proc DataTransferItemListRemove*(index: float): void {.importc: "DataTransferItemList.remove".}

type DOMStringList* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc newDOMStringList*(): DOMStringList {.importcpp: "new DOMStringList".}
proc contains*(self: DOMStringList, str: cstring): bool {.importcpp.}
proc item*(self: DOMStringList, index: float): cstring {.importcpp.}
proc `[]`*(self: DOMStringList, index: float): cstring {.importcpp: "#[#]".}
proc `[]=`*(self: DOMStringList, index: float,
    value: cstring) {.importcpp: "#[#] = #".}

type DataTransfer* {.importc.} = ref object of RootObj
  dropEffect* {.importc.}: cstring
  effectAllowed* {.importc.}: cstring
  files* {.importc.}: FileList
  items* {.importc.}: DataTransferItemList
  types* {.importc.}: DOMStringList
proc clearData*(self: DataTransfer, format: cstring): bool {.importcpp.}
proc getData*(self: DataTransfer, format: cstring): cstring {.importcpp.}
proc setData*(self: DataTransfer, format: cstring,
    data: cstring): bool {.importcpp.}
var DataTransferDropEffect* {.importc: "DataTransfer.dropEffect",
    nodecl.}: cstring
var DataTransferEffectAllowed* {.importc: "DataTransfer.effectAllowed",
    nodecl.}: cstring
var DataTransferFiles* {.importc: "DataTransfer.files", nodecl.}: FileList
var DataTransferItems* {.importc: "DataTransfer.items",
    nodecl.}: DataTransferItemList
var DataTransferTypes* {.importc: "DataTransfer.types", nodecl.}: DOMStringList
proc DataTransferClearData*(format: cstring): bool {.importc: "DataTransfer.clearData".}
proc DataTransferGetData*(format: cstring): cstring {.importc: "DataTransfer.getData".}
proc DataTransferSetData*(format: cstring,
    data: cstring): bool {.importc: "DataTransfer.setData".}

type ClipboardEvent* {.importc.} = ref object of Event
  clipboardData* {.importc.}: DataTransfer
proc newClipboardEvent*(xType: cstring, eventInitDict: ClipboardEventInit): ClipboardEvent {.importcpp: "new ClipboardEvent(@)".}

type CloseEvent* {.importc.} = ref object of Event
  code* {.importc.}: float
  reason* {.importc.}: cstring
  wasClean* {.importc.}: bool
proc newCloseEvent*(): CloseEvent {.importcpp: "new CloseEvent".}
proc initCloseEvent*(self: CloseEvent, typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, wasCleanArg: bool, codeArg: float,
    reasonArg: cstring): void {.importcpp.}

type CommandEvent* {.importc.} = ref object of Event
  commandName* {.importc.}: cstring
  detail* {.importc.}: cstring
proc newCommandEvent*(xType: cstring, eventInitDict: CommandEventInit): CommandEvent {.importcpp: "new CommandEvent(@)".}

type UIEvent* {.importc.} = ref object of Event
  detail* {.importc.}: float
  view* {.importc.}: Window
proc newUIEvent*(): UIEvent {.importcpp: "new UIEvent".}
proc initUIEvent*(self: UIEvent, typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, viewArg: Window, detailArg: float): void {.importcpp.}

type CompositionEvent* {.importc.} = ref object of UIEvent
  data* {.importc.}: cstring
  locale* {.importc.}: cstring
proc newCompositionEvent*(typeArg: cstring,
    eventInitDict: CompositionEventInit): CompositionEvent {.importcpp: "new CompositionEvent(@)".}
proc initCompositionEvent*(self: CompositionEvent, typeArg: cstring,
    canBubbleArg: bool, cancelableArg: bool, viewArg: Window, dataArg: cstring,
    locale: cstring): void {.importcpp.}

type Console* {.importc.} = ref object of RootObj
proc newConsole*(): Console {.importcpp: "new Console".}
proc clear*(self: Console): void {.importcpp.}
proc count*(self: Console, countTitle: cstring): void {.importcpp.}
proc group*(self: Console, groupTitle: cstring): void {.importcpp.}
proc groupCollapsed*(self: Console, groupTitle: cstring): void {.importcpp.}
proc groupEnd*(self: Console): void {.importcpp.}
proc msIsIndependentlyComposed*(self: Console,
    element: Element): bool {.importcpp.}
proc profile*(self: Console, reportName: cstring): void {.importcpp.}
proc profileEnd*(self: Console): void {.importcpp.}
proc select*(self: Console, element: Element): void {.importcpp.}
proc time*(self: Console, timerName: cstring): void {.importcpp.}
proc timeEnd*(self: Console, timerName: cstring): void {.importcpp.}

type Coordinates* {.importc.} = ref object of RootObj
  accuracy* {.importc.}: float
  altitude* {.importc.}: float
  altitudeAccuracy* {.importc.}: float
  heading* {.importc.}: float
  latitude* {.importc.}: float
  longitude* {.importc.}: float
  speed* {.importc.}: float
proc newCoordinates*(): Coordinates {.importcpp: "new Coordinates".}

type CryptoKey* {.importc.} = ref object of RootObj
  algorithm* {.importc.}: KeyAlgorithm
  extractable* {.importc.}: bool
  xType* {.importc: "type".}: cstring
proc newCryptoKey*(): CryptoKey {.importcpp: "new CryptoKey".}

type CryptoKeyPair* {.importc.} = ref object of RootObj
  privateKey* {.importc.}: CryptoKey
  publicKey* {.importc.}: CryptoKey
proc newCryptoKeyPair*(): CryptoKeyPair {.importcpp: "new CryptoKeyPair".}

type CustomEvent* {.importc.} = ref object of Event
proc newCustomEvent*(typeArg: cstring, eventInitDict: CustomEventInit): CustomEvent {.importcpp: "new CustomEvent(@)".}

type DOMError* {.importc.} = ref object of RootObj
  name* {.importc.}: cstring
proc newDOMError*(): DOMError {.importcpp: "new DOMError".}
proc toString*(self: DOMError): cstring {.importcpp.}

type DOMException* {.importc.} = ref object of RootObj
  code* {.importc.}: float
  message* {.importc.}: cstring
  name* {.importc.}: cstring
  ABORT_ERR* {.importc.}: float
  DATA_CLONE_ERR* {.importc.}: float
  DOMSTRING_SIZE_ERR* {.importc.}: float
  HIERARCHY_REQUEST_ERR* {.importc.}: float
  INDEX_SIZE_ERR* {.importc.}: float
  INUSE_ATTRIBUTE_ERR* {.importc.}: float
  INVALID_ACCESS_ERR* {.importc.}: float
  INVALID_CHARACTER_ERR* {.importc.}: float
  INVALID_MODIFICATION_ERR* {.importc.}: float
  INVALID_NODE_TYPE_ERR* {.importc.}: float
  INVALID_STATE_ERR* {.importc.}: float
  NAMESPACE_ERR* {.importc.}: float
  NETWORK_ERR* {.importc.}: float
  NOT_FOUND_ERR* {.importc.}: float
  NOT_SUPPORTED_ERR* {.importc.}: float
  NO_DATA_ALLOWED_ERR* {.importc.}: float
  NO_MODIFICATION_ALLOWED_ERR* {.importc.}: float
  PARSE_ERR* {.importc.}: float
  QUOTA_EXCEEDED_ERR* {.importc.}: float
  SECURITY_ERR* {.importc.}: float
  SERIALIZE_ERR* {.importc.}: float
  SYNTAX_ERR* {.importc.}: float
  TIMEOUT_ERR* {.importc.}: float
  TYPE_MISMATCH_ERR* {.importc.}: float
  URL_MISMATCH_ERR* {.importc.}: float
  VALIDATION_ERR* {.importc.}: float
  WRONG_DOCUMENT_ERR* {.importc.}: float
proc newDOMException*(): DOMException {.importcpp: "new DOMException".}
proc toString*(self: DOMException): cstring {.importcpp.}
var DOMExceptionABORT_ERR* {.importc: "DOMException.ABORT_ERR", nodecl.}: float
var DOMExceptionDATA_CLONE_ERR* {.importc: "DOMException.DATA_CLONE_ERR",
    nodecl.}: float
var DOMExceptionDOMSTRING_SIZE_ERR* {.importc: "DOMException.DOMSTRING_SIZE_ERR",
    nodecl.}: float
var DOMExceptionHIERARCHY_REQUEST_ERR* {.importc: "DOMException.HIERARCHY_REQUEST_ERR",
    nodecl.}: float
var DOMExceptionINDEX_SIZE_ERR* {.importc: "DOMException.INDEX_SIZE_ERR",
    nodecl.}: float
var DOMExceptionINUSE_ATTRIBUTE_ERR* {.importc: "DOMException.INUSE_ATTRIBUTE_ERR",
    nodecl.}: float
var DOMExceptionINVALID_ACCESS_ERR* {.importc: "DOMException.INVALID_ACCESS_ERR",
    nodecl.}: float
var DOMExceptionINVALID_CHARACTER_ERR* {.importc: "DOMException.INVALID_CHARACTER_ERR",
    nodecl.}: float
var DOMExceptionINVALID_MODIFICATION_ERR *
  {.importc: "DOMException.INVALID_MODIFICATION_ERR", nodecl.}: float
var DOMExceptionINVALID_NODE_TYPE_ERR* {.importc: "DOMException.INVALID_NODE_TYPE_ERR",
    nodecl.}: float
var DOMExceptionINVALID_STATE_ERR* {.importc: "DOMException.INVALID_STATE_ERR",
    nodecl.}: float
var DOMExceptionNAMESPACE_ERR* {.importc: "DOMException.NAMESPACE_ERR",
    nodecl.}: float
var DOMExceptionNETWORK_ERR* {.importc: "DOMException.NETWORK_ERR",
    nodecl.}: float
var DOMExceptionNOT_FOUND_ERR* {.importc: "DOMException.NOT_FOUND_ERR",
    nodecl.}: float
var DOMExceptionNOT_SUPPORTED_ERR* {.importc: "DOMException.NOT_SUPPORTED_ERR",
    nodecl.}: float
var DOMExceptionNO_DATA_ALLOWED_ERR* {.importc: "DOMException.NO_DATA_ALLOWED_ERR",
    nodecl.}: float
var DOMExceptionNO_MODIFICATION_ALLOWED_ERR *
  {.importc: "DOMException.NO_MODIFICATION_ALLOWED_ERR", nodecl.}: float
var DOMExceptionPARSE_ERR* {.importc: "DOMException.PARSE_ERR", nodecl.}: float
var DOMExceptionQUOTA_EXCEEDED_ERR* {.importc: "DOMException.QUOTA_EXCEEDED_ERR",
    nodecl.}: float
var DOMExceptionSECURITY_ERR* {.importc: "DOMException.SECURITY_ERR",
    nodecl.}: float
var DOMExceptionSERIALIZE_ERR* {.importc: "DOMException.SERIALIZE_ERR",
    nodecl.}: float
var DOMExceptionSYNTAX_ERR* {.importc: "DOMException.SYNTAX_ERR",
    nodecl.}: float
var DOMExceptionTIMEOUT_ERR* {.importc: "DOMException.TIMEOUT_ERR",
    nodecl.}: float
var DOMExceptionTYPE_MISMATCH_ERR* {.importc: "DOMException.TYPE_MISMATCH_ERR",
    nodecl.}: float
var DOMExceptionURL_MISMATCH_ERR* {.importc: "DOMException.URL_MISMATCH_ERR",
    nodecl.}: float
var DOMExceptionVALIDATION_ERR* {.importc: "DOMException.VALIDATION_ERR",
    nodecl.}: float
var DOMExceptionWRONG_DOCUMENT_ERR* {.importc: "DOMException.WRONG_DOCUMENT_ERR",
    nodecl.}: float

type DOMParser* {.importc.} = ref object of RootObj
proc newDOMParser*(): DOMParser {.importcpp: "new DOMParser".}
proc parseFromString*(self: DOMParser, source: cstring,
    mimeType: cstring): Document {.importcpp.}

type DOMSettableTokenList* {.importc.} = ref object of DOMTokenList
  value* {.importc.}: cstring
proc newDOMSettableTokenList*(): DOMSettableTokenList {.importcpp: "new DOMSettableTokenList".}

type DataCue* {.importc.} = ref object of TextTrackCue
  data* {.importc.}: ArrayBuffer
proc newDataCue*(): DataCue {.importcpp: "new DataCue".}

type DeferredPermissionRequest* {.importc.} = ref object of RootObj
  id* {.importc.}: float
  xType* {.importc: "type".}: cstring
  uri* {.importc.}: cstring
proc newDeferredPermissionRequest*(): DeferredPermissionRequest {.importcpp: "new DeferredPermissionRequest".}
proc allow*(self: DeferredPermissionRequest): void {.importcpp.}
proc deny*(self: DeferredPermissionRequest): void {.importcpp.}

type DeviceAcceleration* {.importc.} = ref object of RootObj
  x* {.importc.}: float
  y* {.importc.}: float
  z* {.importc.}: float
proc newDeviceAcceleration*(): DeviceAcceleration {.importcpp: "new DeviceAcceleration".}

type DeviceRotationRate* {.importc.} = ref object of RootObj
  alpha* {.importc.}: float
  beta* {.importc.}: float
  gamma* {.importc.}: float
var DeviceRotationRateAlpha* {.importc: "DeviceRotationRate.alpha",
    nodecl.}: float
var DeviceRotationRateBeta* {.importc: "DeviceRotationRate.beta",
    nodecl.}: float
var DeviceRotationRateGamma* {.importc: "DeviceRotationRate.gamma",
    nodecl.}: float

type DeviceMotionEvent* {.importc.} = ref object of Event
  acceleration* {.importc.}: DeviceAcceleration
  accelerationIncludingGravity* {.importc.}: DeviceAcceleration
  interval* {.importc.}: float
  rotationRate* {.importc.}: DeviceRotationRate
proc newDeviceMotionEvent*(): DeviceMotionEvent {.importcpp: "new DeviceMotionEvent".}
proc initDeviceMotionEvent*(self: DeviceMotionEvent, xType: cstring,
    bubbles: bool, cancelable: bool, acceleration: DeviceAccelerationDict,
    accelerationIncludingGravity: DeviceAccelerationDict,
    rotationRate: DeviceRotationRateDict, interval: float): void {.importcpp.}

type DeviceOrientationEvent* {.importc.} = ref object of Event
  absolute* {.importc.}: bool
  alpha* {.importc.}: float
  beta* {.importc.}: float
  gamma* {.importc.}: float
proc newDeviceOrientationEvent*(): DeviceOrientationEvent {.importcpp: "new DeviceOrientationEvent".}
proc initDeviceOrientationEvent*(self: DeviceOrientationEvent, xType: cstring,
    bubbles: bool, cancelable: bool, alpha: float, beta: float, gamma: float,
    absolute: bool): void {.importcpp.}

type MouseEvent* {.importc.} = ref object of UIEvent
  altKey* {.importc.}: bool
  button* {.importc.}: float
  buttons* {.importc.}: float
  clientX* {.importc.}: float
  clientY* {.importc.}: float
  ctrlKey* {.importc.}: bool
  fromElement* {.importc.}: Element
  layerX* {.importc.}: float
  layerY* {.importc.}: float
  metaKey* {.importc.}: bool
  movementX* {.importc.}: float
  movementY* {.importc.}: float
  offsetX* {.importc.}: float
  offsetY* {.importc.}: float
  pageX* {.importc.}: float
  pageY* {.importc.}: float
  relatedTarget* {.importc.}: EventTarget
  screenX* {.importc.}: float
  screenY* {.importc.}: float
  shiftKey* {.importc.}: bool
  toElement* {.importc.}: Element
  which* {.importc.}: float
  x* {.importc.}: float
  y* {.importc.}: float
proc getModifierState*(self: MouseEvent, keyArg: cstring): bool {.importcpp.}
proc initMouseEvent*(self: MouseEvent, typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, viewArg: Window, detailArg: float, screenXArg: float,
    screenYArg: float, clientXArg: float, clientYArg: float, ctrlKeyArg: bool,
    altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: float,
    relatedTargetArg: EventTarget): void {.importcpp.}
var MouseEventAltKey* {.importc: "MouseEvent.altKey", nodecl.}: bool
var MouseEventButton* {.importc: "MouseEvent.button", nodecl.}: float
var MouseEventButtons* {.importc: "MouseEvent.buttons", nodecl.}: float
var MouseEventClientX* {.importc: "MouseEvent.clientX", nodecl.}: float
var MouseEventClientY* {.importc: "MouseEvent.clientY", nodecl.}: float
var MouseEventCtrlKey* {.importc: "MouseEvent.ctrlKey", nodecl.}: bool
var MouseEventFromElement* {.importc: "MouseEvent.fromElement",
    nodecl.}: Element
var MouseEventLayerX* {.importc: "MouseEvent.layerX", nodecl.}: float
var MouseEventLayerY* {.importc: "MouseEvent.layerY", nodecl.}: float
var MouseEventMetaKey* {.importc: "MouseEvent.metaKey", nodecl.}: bool
var MouseEventMovementX* {.importc: "MouseEvent.movementX", nodecl.}: float
var MouseEventMovementY* {.importc: "MouseEvent.movementY", nodecl.}: float
var MouseEventOffsetX* {.importc: "MouseEvent.offsetX", nodecl.}: float
var MouseEventOffsetY* {.importc: "MouseEvent.offsetY", nodecl.}: float
var MouseEventPageX* {.importc: "MouseEvent.pageX", nodecl.}: float
var MouseEventPageY* {.importc: "MouseEvent.pageY", nodecl.}: float
var MouseEventRelatedTarget* {.importc: "MouseEvent.relatedTarget",
    nodecl.}: EventTarget
var MouseEventScreenX* {.importc: "MouseEvent.screenX", nodecl.}: float
var MouseEventScreenY* {.importc: "MouseEvent.screenY", nodecl.}: float
var MouseEventShiftKey* {.importc: "MouseEvent.shiftKey", nodecl.}: bool
var MouseEventToElement* {.importc: "MouseEvent.toElement", nodecl.}: Element
var MouseEventWhich* {.importc: "MouseEvent.which", nodecl.}: float
var MouseEventX* {.importc: "MouseEvent.x", nodecl.}: float
var MouseEventY* {.importc: "MouseEvent.y", nodecl.}: float
proc MouseEventGetModifierState*(keyArg: cstring): bool {.importc: "MouseEvent.getModifierState".}
proc MouseEventInitMouseEvent*(typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, viewArg: Window, detailArg: float, screenXArg: float,
    screenYArg: float, clientXArg: float, clientYArg: float, ctrlKeyArg: bool,
    altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: float,
    relatedTargetArg: EventTarget): void {.importc: "MouseEvent.initMouseEvent".}

type DragEvent* {.importc.} = ref object of MouseEvent
  dataTransfer* {.importc.}: DataTransfer
proc initDragEvent*(self: DragEvent, typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, viewArg: Window, detailArg: float, screenXArg: float,
    screenYArg: float, clientXArg: float, clientYArg: float, ctrlKeyArg: bool,
    altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: float,
    relatedTargetArg: EventTarget,
    dataTransferArg: DataTransfer): void {.importcpp.}
proc msConvertURL*(self: DragEvent, file: File, targetType: cstring,
    targetURL: cstring): void {.importcpp.}
var DragEventDataTransfer* {.importc: "DragEvent.dataTransfer",
    nodecl.}: DataTransfer
proc DragEventInitDragEvent*(typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, viewArg: Window, detailArg: float, screenXArg: float,
    screenYArg: float, clientXArg: float, clientYArg: float, ctrlKeyArg: bool,
    altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: float,
    relatedTargetArg: EventTarget,
    dataTransferArg: DataTransfer): void {.importc: "DragEvent.initDragEvent".}
proc DragEventMsConvertURL*(file: File, targetType: cstring,
    targetURL: cstring): void {.importc: "DragEvent.msConvertURL".}

type EXT_texture_filter_anisotropic* {.importc.} = ref object of RootObj
  MAX_TEXTURE_MAX_ANISOTROPY_EXT* {.importc.}: float
  TEXTURE_MAX_ANISOTROPY_EXT* {.importc.}: float
proc newEXT_texture_filter_anisotropic*(): EXT_texture_filter_anisotropic {.importcpp: "new EXT_texture_filter_anisotropic".}
var EXT_texture_filter_anisotropicMAX_TEXTURE_MAX_ANISOTROPY_EXT *
  {.importc: "EXT_texture_filter_anisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT",
    nodecl.}: float
var EXT_texture_filter_anisotropicTEXTURE_MAX_ANISOTROPY_EXT *
  {.importc: "EXT_texture_filter_anisotropic.TEXTURE_MAX_ANISOTROPY_EXT",
    nodecl.}: float

type ErrorEvent* {.importc.} = ref object of Event
  colno* {.importc.}: float
  filename* {.importc.}: cstring
  lineno* {.importc.}: float
  message* {.importc.}: cstring
proc newErrorEvent*(): ErrorEvent {.importcpp: "new ErrorEvent".}
proc initErrorEvent*(self: ErrorEvent, typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, messageArg: cstring, filenameArg: cstring,
    linenoArg: float): void {.importcpp.}

type FileReader* {.importc.} = ref object of EventTarget
  error* {.importc.}: DOMError
proc newFileReader*(): FileReader {.importcpp: "new FileReader".}
proc readAsArrayBuffer*(self: FileReader, blob: Blob): void {.importcpp.}
proc readAsBinaryString*(self: FileReader, blob: Blob): void {.importcpp.}
proc readAsDataURL*(self: FileReader, blob: Blob): void {.importcpp.}
proc readAsText*(self: FileReader, blob: Blob,
    encoding: cstring): void {.importcpp.}
proc addEventListener*(self: FileReader, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: FileReader, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type FocusEvent* {.importc.} = ref object of UIEvent
  relatedTarget* {.importc.}: EventTarget
proc initFocusEvent*(self: FocusEvent, typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, viewArg: Window, detailArg: float,
    relatedTargetArg: EventTarget): void {.importcpp.}
var FocusEventRelatedTarget* {.importc: "FocusEvent.relatedTarget",
    nodecl.}: EventTarget
proc FocusEventInitFocusEvent*(typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, viewArg: Window, detailArg: float,
    relatedTargetArg: EventTarget): void {.importc: "FocusEvent.initFocusEvent".}

type HTMLFormElement* {.importc.} = ref object of HTMLElement
  acceptCharset* {.importc.}: cstring
  action* {.importc.}: cstring
  autocomplete* {.importc.}: cstring
  elements* {.importc.}: HTMLCollection
  encoding* {.importc.}: cstring
  enctype* {.importc.}: cstring
  length* {.importc.}: float
  xMethod* {.importc: "method".}: cstring
  name* {.importc.}: cstring
  noValidate* {.importc.}: bool
  target* {.importc.}: cstring
proc checkValidity*(self: HTMLFormElement): bool {.importcpp.}
proc reset*(self: HTMLFormElement): void {.importcpp.}
proc submit*(self: HTMLFormElement): void {.importcpp.}
var HTMLFormElementAcceptCharset* {.importc: "HTMLFormElement.acceptCharset",
    nodecl.}: cstring
var HTMLFormElementAction* {.importc: "HTMLFormElement.action",
    nodecl.}: cstring
var HTMLFormElementAutocomplete* {.importc: "HTMLFormElement.autocomplete",
    nodecl.}: cstring
var HTMLFormElementElements* {.importc: "HTMLFormElement.elements",
    nodecl.}: HTMLCollection
var HTMLFormElementEncoding* {.importc: "HTMLFormElement.encoding",
    nodecl.}: cstring
var HTMLFormElementEnctype* {.importc: "HTMLFormElement.enctype",
    nodecl.}: cstring
var HTMLFormElementLength* {.importc: "HTMLFormElement.length", nodecl.}: float
var HTMLFormElementMethod* {.importc: "HTMLFormElement.method",
    nodecl.}: cstring
var HTMLFormElementName* {.importc: "HTMLFormElement.name", nodecl.}: cstring
var HTMLFormElementNoValidate* {.importc: "HTMLFormElement.noValidate", nodecl.}: bool
var HTMLFormElementTarget* {.importc: "HTMLFormElement.target",
    nodecl.}: cstring
proc HTMLFormElementCheckValidity*(): bool {.importc: "HTMLFormElement.checkValidity".}
proc HTMLFormElementReset*(): void {.importc: "HTMLFormElement.reset".}
proc HTMLFormElementSubmit*(): void {.importc: "HTMLFormElement.submit".}

type FormData* {.importc.} = ref object of RootObj
proc newFormData*(form: HTMLFormElement): FormData {.importcpp: "new FormData(@)".}

type Gamepad* {.importc.} = ref object of RootObj
  connected* {.importc.}: bool
  id* {.importc.}: cstring
  index* {.importc.}: float
  mapping* {.importc.}: cstring
  timestamp* {.importc.}: float
proc newGamepad*(): Gamepad {.importcpp: "new Gamepad".}

type GamepadButton* {.importc.} = ref object of RootObj
  pressed* {.importc.}: bool
  value* {.importc.}: float
proc newGamepadButton*(): GamepadButton {.importcpp: "new GamepadButton".}

type GamepadEvent* {.importc.} = ref object of Event
  gamepad* {.importc.}: Gamepad
proc newGamepadEvent*(): GamepadEvent {.importcpp: "new GamepadEvent".}

type PositionCallback* {.importc.} = ref object of RootObj
proc newPositionCallback*(): PositionCallback {.importcpp: "new PositionCallback".}

type PositionErrorCallback* {.importc.} = ref object of RootObj
proc newPositionErrorCallback*(): PositionErrorCallback {.importcpp: "new PositionErrorCallback".}

type Geolocation* {.importc.} = ref object of RootObj
proc newGeolocation*(): Geolocation {.importcpp: "new Geolocation".}
proc clearWatch*(self: Geolocation, watchId: float): void {.importcpp.}
proc getCurrentPosition*(self: Geolocation, successCallback: PositionCallback,
    errorCallback: PositionErrorCallback,
    options: PositionOptions): void {.importcpp.}
proc watchPosition*(self: Geolocation, successCallback: PositionCallback,
    errorCallback: PositionErrorCallback,
    options: PositionOptions): float {.importcpp.}

type HTMLAllCollection* {.importc.} = ref object of HTMLCollection
proc newHTMLAllCollection*(): HTMLAllCollection {.importcpp: "new HTMLAllCollection".}
proc namedItem*(self: HTMLAllCollection, name: cstring): Element {.importcpp.}

type HTMLAnchorElement* {.importc.} = ref object of HTMLElement
  Methods* {.importc.}: cstring
  charset* {.importc.}: cstring
  coords* {.importc.}: cstring
  hash* {.importc.}: cstring
  host* {.importc.}: cstring
  hostname* {.importc.}: cstring
  href* {.importc.}: cstring
  hreflang* {.importc.}: cstring
  mimeType* {.importc.}: cstring
  name* {.importc.}: cstring
  nameProp* {.importc.}: cstring
  pathname* {.importc.}: cstring
  port* {.importc.}: cstring
  protocol* {.importc.}: cstring
  protocolLong* {.importc.}: cstring
  rel* {.importc.}: cstring
  rev* {.importc.}: cstring
  search* {.importc.}: cstring
  shape* {.importc.}: cstring
  target* {.importc.}: cstring
  text* {.importc.}: cstring
  xType* {.importc: "type".}: cstring
  urn* {.importc.}: cstring
proc newHTMLAnchorElement*(): HTMLAnchorElement {.importcpp: "new HTMLAnchorElement".}
proc toString*(self: HTMLAnchorElement): cstring {.importcpp.}

type HTMLAppletElement* {.importc.} = ref object of HTMLElement
  BaseHref* {.importc.}: cstring
  align* {.importc.}: cstring
  alt* {.importc.}: cstring
  altHtml* {.importc.}: cstring
  archive* {.importc.}: cstring
  border* {.importc.}: cstring
  code* {.importc.}: cstring
  codeBase* {.importc.}: cstring
  codeType* {.importc.}: cstring
  contentDocument* {.importc.}: Document
  data* {.importc.}: cstring
  declare* {.importc.}: bool
  form* {.importc.}: HTMLFormElement
  height* {.importc.}: cstring
  hspace* {.importc.}: float
  name* {.importc.}: cstring
  xObject* {.importc: "object".}: cstring
  standby* {.importc.}: cstring
  xType* {.importc: "type".}: cstring
  useMap* {.importc.}: cstring
  vspace* {.importc.}: float
  width* {.importc.}: float
proc newHTMLAppletElement*(): HTMLAppletElement {.importcpp: "new HTMLAppletElement".}

type HTMLAreaElement* {.importc.} = ref object of HTMLElement
  alt* {.importc.}: cstring
  coords* {.importc.}: cstring
  hash* {.importc.}: cstring
  host* {.importc.}: cstring
  hostname* {.importc.}: cstring
  href* {.importc.}: cstring
  noHref* {.importc.}: bool
  pathname* {.importc.}: cstring
  port* {.importc.}: cstring
  protocol* {.importc.}: cstring
  rel* {.importc.}: cstring
  search* {.importc.}: cstring
  shape* {.importc.}: cstring
  target* {.importc.}: cstring
proc newHTMLAreaElement*(): HTMLAreaElement {.importcpp: "new HTMLAreaElement".}
proc toString*(self: HTMLAreaElement): cstring {.importcpp.}

type HTMLAreasCollection* {.importc.} = ref object of HTMLCollection
proc newHTMLAreasCollection*(): HTMLAreasCollection {.importcpp: "new HTMLAreasCollection".}
proc add*(self: HTMLAreasCollection, element: HTMLElement,
    before: HTMLElement): void {.importcpp.}
proc add*(self: HTMLAreasCollection, element: HTMLElement,
    before: float): void {.importcpp.}
proc remove*(self: HTMLAreasCollection, index: float): void {.importcpp.}

type HTMLAudioElement* {.importc.} = ref object of HTMLMediaElement
proc newHTMLAudioElement*(): HTMLAudioElement {.importcpp: "new HTMLAudioElement".}

type HTMLBRElement* {.importc.} = ref object of HTMLElement
  clear* {.importc.}: cstring
proc newHTMLBRElement*(): HTMLBRElement {.importcpp: "new HTMLBRElement".}

type HTMLBaseElement* {.importc.} = ref object of HTMLElement
  href* {.importc.}: cstring
  target* {.importc.}: cstring
proc newHTMLBaseElement*(): HTMLBaseElement {.importcpp: "new HTMLBaseElement".}

type HTMLBaseFontElement* {.importc.} = ref object of HTMLElement
  face* {.importc.}: cstring
  size* {.importc.}: float
proc newHTMLBaseFontElement*(): HTMLBaseFontElement {.importcpp: "new HTMLBaseFontElement".}
proc addEventListener*(self: HTMLBaseFontElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLBaseFontElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLBlockElement* {.importc.} = ref object of HTMLElement
  cite* {.importc.}: cstring
  clear* {.importc.}: cstring
  width* {.importc.}: float
proc newHTMLBlockElement*(): HTMLBlockElement {.importcpp: "new HTMLBlockElement".}

type TextRange* {.importc.} = ref object of RootObj
  boundingHeight* {.importc.}: float
  boundingLeft* {.importc.}: float
  boundingTop* {.importc.}: float
  boundingWidth* {.importc.}: float
  htmlText* {.importc.}: cstring
  offsetLeft* {.importc.}: float
  offsetTop* {.importc.}: float
  text* {.importc.}: cstring
proc collapse*(self: TextRange, start: bool): void {.importcpp.}
proc compareEndPoints*(self: TextRange, how: cstring,
    sourceRange: TextRange): float {.importcpp.}
proc duplicate*(self: TextRange): TextRange {.importcpp.}
proc execCommandShowHelp*(self: TextRange, cmdID: cstring): bool {.importcpp.}
proc expand*(self: TextRange, Unit: cstring): bool {.importcpp.}
proc findText*(self: TextRange, string: cstring, count: float,
    flags: float): bool {.importcpp.}
proc getBookmark*(self: TextRange): cstring {.importcpp.}
proc getBoundingClientRect*(self: TextRange): ClientRect {.importcpp.}
proc getClientRects*(self: TextRange): ClientRectList {.importcpp.}
proc inRange*(self: TextRange, range: TextRange): bool {.importcpp.}
proc isEqual*(self: TextRange, range: TextRange): bool {.importcpp.}
proc move*(self: TextRange, unit: cstring, count: float): float {.importcpp.}
proc moveEnd*(self: TextRange, unit: cstring, count: float): float {.importcpp.}
proc moveStart*(self: TextRange, unit: cstring,
    count: float): float {.importcpp.}
proc moveToBookmark*(self: TextRange, bookmark: cstring): bool {.importcpp.}
proc moveToElementText*(self: TextRange, element: Element): void {.importcpp.}
proc moveToPoint*(self: TextRange, x: float, y: float): void {.importcpp.}
proc parentElement*(self: TextRange): Element {.importcpp.}
proc pasteHTML*(self: TextRange, html: cstring): void {.importcpp.}
proc queryCommandEnabled*(self: TextRange, cmdID: cstring): bool {.importcpp.}
proc queryCommandIndeterm*(self: TextRange, cmdID: cstring): bool {.importcpp.}
proc queryCommandState*(self: TextRange, cmdID: cstring): bool {.importcpp.}
proc queryCommandSupported*(self: TextRange, cmdID: cstring): bool {.importcpp.}
proc queryCommandText*(self: TextRange, cmdID: cstring): cstring {.importcpp.}
proc scrollIntoView*(self: TextRange, fStart: bool): void {.importcpp.}
proc select*(self: TextRange): void {.importcpp.}
proc setEndPoint*(self: TextRange, how: cstring,
    SourceRange: TextRange): void {.importcpp.}
var TextRangeBoundingHeight* {.importc: "TextRange.boundingHeight",
    nodecl.}: float
var TextRangeBoundingLeft* {.importc: "TextRange.boundingLeft", nodecl.}: float
var TextRangeBoundingTop* {.importc: "TextRange.boundingTop", nodecl.}: float
var TextRangeBoundingWidth* {.importc: "TextRange.boundingWidth",
    nodecl.}: float
var TextRangeHtmlText* {.importc: "TextRange.htmlText", nodecl.}: cstring
var TextRangeOffsetLeft* {.importc: "TextRange.offsetLeft", nodecl.}: float
var TextRangeOffsetTop* {.importc: "TextRange.offsetTop", nodecl.}: float
var TextRangeText* {.importc: "TextRange.text", nodecl.}: cstring
proc TextRangeCollapse*(start: bool): void {.importc: "TextRange.collapse".}
proc TextRangeCompareEndPoints*(how: cstring,
    sourceRange: TextRange): float {.importc: "TextRange.compareEndPoints".}
proc TextRangeDuplicate*(): TextRange {.importc: "TextRange.duplicate".}
proc TextRangeExecCommandShowHelp*(cmdID: cstring): bool {.importc: "TextRange.execCommandShowHelp".}
proc TextRangeExpand*(Unit: cstring): bool {.importc: "TextRange.expand".}
proc TextRangeFindText*(string: cstring, count: float,
    flags: float): bool {.importc: "TextRange.findText".}
proc TextRangeGetBookmark*(): cstring {.importc: "TextRange.getBookmark".}
proc TextRangeGetBoundingClientRect*(): ClientRect {.importc: "TextRange.getBoundingClientRect".}
proc TextRangeGetClientRects*(): ClientRectList {.importc: "TextRange.getClientRects".}
proc TextRangeInRange*(range: TextRange): bool {.importc: "TextRange.inRange".}
proc TextRangeIsEqual*(range: TextRange): bool {.importc: "TextRange.isEqual".}
proc TextRangeMove*(unit: cstring, count: float): float {.importc: "TextRange.move".}
proc TextRangeMoveEnd*(unit: cstring, count: float): float {.importc: "TextRange.moveEnd".}
proc TextRangeMoveStart*(unit: cstring, count: float): float {.importc: "TextRange.moveStart".}
proc TextRangeMoveToBookmark*(bookmark: cstring): bool {.importc: "TextRange.moveToBookmark".}
proc TextRangeMoveToElementText*(element: Element): void {.importc: "TextRange.moveToElementText".}
proc TextRangeMoveToPoint*(x: float, y: float): void {.importc: "TextRange.moveToPoint".}
proc TextRangeParentElement*(): Element {.importc: "TextRange.parentElement".}
proc TextRangePasteHTML*(html: cstring): void {.importc: "TextRange.pasteHTML".}
proc TextRangeQueryCommandEnabled*(cmdID: cstring): bool {.importc: "TextRange.queryCommandEnabled".}
proc TextRangeQueryCommandIndeterm*(cmdID: cstring): bool {.importc: "TextRange.queryCommandIndeterm".}
proc TextRangeQueryCommandState*(cmdID: cstring): bool {.importc: "TextRange.queryCommandState".}
proc TextRangeQueryCommandSupported*(cmdID: cstring): bool {.importc: "TextRange.queryCommandSupported".}
proc TextRangeQueryCommandText*(cmdID: cstring): cstring {.importc: "TextRange.queryCommandText".}
proc TextRangeScrollIntoView*(fStart: bool): void {.importc: "TextRange.scrollIntoView".}
proc TextRangeSelect*(): void {.importc: "TextRange.select".}
proc TextRangeSetEndPoint*(how: cstring,
    SourceRange: TextRange): void {.importc: "TextRange.setEndPoint".}

type HTMLBodyElement* {.importc.} = ref object of HTMLElement
  background* {.importc.}: cstring
  bgProperties* {.importc.}: cstring
  noWrap* {.importc.}: bool
proc newHTMLBodyElement*(): HTMLBodyElement {.importcpp: "new HTMLBodyElement".}
proc createTextRange*(self: HTMLBodyElement): TextRange {.importcpp.}
proc addEventListener*(self: HTMLBodyElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLBodyElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type ValidityState* {.importc.} = ref object of RootObj
  badInput* {.importc.}: bool
  customError* {.importc.}: bool
  patternMismatch* {.importc.}: bool
  rangeOverflow* {.importc.}: bool
  rangeUnderflow* {.importc.}: bool
  stepMismatch* {.importc.}: bool
  tooLong* {.importc.}: bool
  typeMismatch* {.importc.}: bool
  valid* {.importc.}: bool
  valueMissing* {.importc.}: bool
var ValidityStateBadInput* {.importc: "ValidityState.badInput", nodecl.}: bool
var ValidityStateCustomError* {.importc: "ValidityState.customError", nodecl.}: bool
var ValidityStatePatternMismatch* {.importc: "ValidityState.patternMismatch", nodecl.}: bool
var ValidityStateRangeOverflow* {.importc: "ValidityState.rangeOverflow", nodecl.}: bool
var ValidityStateRangeUnderflow* {.importc: "ValidityState.rangeUnderflow", nodecl.}: bool
var ValidityStateStepMismatch* {.importc: "ValidityState.stepMismatch", nodecl.}: bool
var ValidityStateTooLong* {.importc: "ValidityState.tooLong", nodecl.}: bool
var ValidityStateTypeMismatch* {.importc: "ValidityState.typeMismatch", nodecl.}: bool
var ValidityStateValid* {.importc: "ValidityState.valid", nodecl.}: bool
var ValidityStateValueMissing* {.importc: "ValidityState.valueMissing", nodecl.}: bool

type HTMLButtonElement* {.importc.} = ref object of HTMLElement
  autofocus* {.importc.}: bool
  disabled* {.importc.}: bool
  form* {.importc.}: HTMLFormElement
  formAction* {.importc.}: cstring
  formEnctype* {.importc.}: cstring
  formMethod* {.importc.}: cstring
  formNoValidate* {.importc.}: cstring
  formTarget* {.importc.}: cstring
  name* {.importc.}: cstring
  xType* {.importc: "type".}: cstring
  validationMessage* {.importc.}: cstring
  validity* {.importc.}: ValidityState
  value* {.importc.}: cstring
  willValidate* {.importc.}: bool
proc newHTMLButtonElement*(): HTMLButtonElement {.importcpp: "new HTMLButtonElement".}
proc checkValidity*(self: HTMLButtonElement): bool {.importcpp.}
proc createTextRange*(self: HTMLButtonElement): TextRange {.importcpp.}
proc setCustomValidity*(self: HTMLButtonElement,
    error: cstring): void {.importcpp.}

type HTMLDDElement* {.importc.} = ref object of HTMLElement
  noWrap* {.importc.}: bool
proc newHTMLDDElement*(): HTMLDDElement {.importcpp: "new HTMLDDElement".}

type HTMLDListElement* {.importc.} = ref object of HTMLElement
  compact* {.importc.}: bool
proc newHTMLDListElement*(): HTMLDListElement {.importcpp: "new HTMLDListElement".}

type HTMLDTElement* {.importc.} = ref object of HTMLElement
  noWrap* {.importc.}: bool
proc newHTMLDTElement*(): HTMLDTElement {.importcpp: "new HTMLDTElement".}

type HTMLDataListElement* {.importc.} = ref object of HTMLElement
  options* {.importc.}: HTMLCollection
proc newHTMLDataListElement*(): HTMLDataListElement {.importcpp: "new HTMLDataListElement".}

type HTMLDirectoryElement* {.importc.} = ref object of HTMLElement
  compact* {.importc.}: bool
proc newHTMLDirectoryElement*(): HTMLDirectoryElement {.importcpp: "new HTMLDirectoryElement".}

type HTMLDivElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  noWrap* {.importc.}: bool
proc newHTMLDivElement*(): HTMLDivElement {.importcpp: "new HTMLDivElement".}

type HTMLDocument* {.importc.} = ref object of Document
proc newHTMLDocument*(): HTMLDocument {.importcpp: "new HTMLDocument".}

type HTMLEmbedElement* {.importc.} = ref object of HTMLElement
  height* {.importc.}: cstring
  msPlayToDisabled* {.importc.}: bool
  msPlayToPreferredSourceUri* {.importc.}: cstring
  msPlayToPrimary* {.importc.}: bool
  name* {.importc.}: cstring
  palette* {.importc.}: cstring
  pluginspage* {.importc.}: cstring
  readyState* {.importc.}: cstring
  src* {.importc.}: cstring
  units* {.importc.}: cstring
  width* {.importc.}: cstring
proc newHTMLEmbedElement*(): HTMLEmbedElement {.importcpp: "new HTMLEmbedElement".}
proc addEventListener*(self: HTMLEmbedElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLEmbedElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLFieldSetElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  disabled* {.importc.}: bool
  form* {.importc.}: HTMLFormElement
  validationMessage* {.importc.}: cstring
  validity* {.importc.}: ValidityState
  willValidate* {.importc.}: bool
proc newHTMLFieldSetElement*(): HTMLFieldSetElement {.importcpp: "new HTMLFieldSetElement".}
proc checkValidity*(self: HTMLFieldSetElement): bool {.importcpp.}
proc setCustomValidity*(self: HTMLFieldSetElement,
    error: cstring): void {.importcpp.}

type HTMLFontElement* {.importc.} = ref object of HTMLElement
  face* {.importc.}: cstring
proc newHTMLFontElement*(): HTMLFontElement {.importcpp: "new HTMLFontElement".}
proc addEventListener*(self: HTMLFontElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLFontElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLFrameElement* {.importc.} = ref object of HTMLElement
  border* {.importc.}: cstring
  contentDocument* {.importc.}: Document
  contentWindow* {.importc.}: Window
  frameBorder* {.importc.}: cstring
  longDesc* {.importc.}: cstring
  marginHeight* {.importc.}: cstring
  marginWidth* {.importc.}: cstring
  name* {.importc.}: cstring
  noResize* {.importc.}: bool
  scrolling* {.importc.}: cstring
  src* {.importc.}: cstring
proc newHTMLFrameElement*(): HTMLFrameElement {.importcpp: "new HTMLFrameElement".}
proc addEventListener*(self: HTMLFrameElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLFrameElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLFrameSetElement* {.importc.} = ref object of HTMLElement
  border* {.importc.}: cstring
  cols* {.importc.}: cstring
  frameBorder* {.importc.}: cstring
  name* {.importc.}: cstring
  rows* {.importc.}: cstring
proc newHTMLFrameSetElement*(): HTMLFrameSetElement {.importcpp: "new HTMLFrameSetElement".}
proc addEventListener*(self: HTMLFrameSetElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLFrameSetElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLHRElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  noShade* {.importc.}: bool
  width* {.importc.}: float
proc newHTMLHRElement*(): HTMLHRElement {.importcpp: "new HTMLHRElement".}
proc addEventListener*(self: HTMLHRElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLHRElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLHeadingElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  clear* {.importc.}: cstring
proc newHTMLHeadingElement*(): HTMLHeadingElement {.importcpp: "new HTMLHeadingElement".}

type HTMLHtmlElement* {.importc.} = ref object of HTMLElement
  version* {.importc.}: cstring
proc newHTMLHtmlElement*(): HTMLHtmlElement {.importcpp: "new HTMLHtmlElement".}

type HTMLIFrameElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  allowFullscreen* {.importc.}: bool
  border* {.importc.}: cstring
  contentDocument* {.importc.}: Document
  contentWindow* {.importc.}: Window
  frameBorder* {.importc.}: cstring
  height* {.importc.}: cstring
  hspace* {.importc.}: float
  longDesc* {.importc.}: cstring
  marginHeight* {.importc.}: cstring
  marginWidth* {.importc.}: cstring
  name* {.importc.}: cstring
  noResize* {.importc.}: bool
  sandbox* {.importc.}: DOMSettableTokenList
  scrolling* {.importc.}: cstring
  src* {.importc.}: cstring
  vspace* {.importc.}: float
  width* {.importc.}: cstring
proc newHTMLIFrameElement*(): HTMLIFrameElement {.importcpp: "new HTMLIFrameElement".}
proc addEventListener*(self: HTMLIFrameElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLIFrameElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLInputElement* {.importc.} = ref object of HTMLElement
  accept* {.importc.}: cstring
  align* {.importc.}: cstring
  alt* {.importc.}: cstring
  autocomplete* {.importc.}: cstring
  autofocus* {.importc.}: bool
  border* {.importc.}: cstring
  checked* {.importc.}: bool
  complete* {.importc.}: bool
  defaultChecked* {.importc.}: bool
  defaultValue* {.importc.}: cstring
  disabled* {.importc.}: bool
  files* {.importc.}: FileList
  form* {.importc.}: HTMLFormElement
  formAction* {.importc.}: cstring
  formEnctype* {.importc.}: cstring
  formMethod* {.importc.}: cstring
  formNoValidate* {.importc.}: cstring
  formTarget* {.importc.}: cstring
  height* {.importc.}: cstring
  hspace* {.importc.}: float
  indeterminate* {.importc.}: bool
  list* {.importc.}: HTMLElement
  max* {.importc.}: cstring
  maxLength* {.importc.}: float
  min* {.importc.}: cstring
  multiple* {.importc.}: bool
  name* {.importc.}: cstring
  pattern* {.importc.}: cstring
  placeholder* {.importc.}: cstring
  readOnly* {.importc.}: bool
  required* {.importc.}: bool
  selectionEnd* {.importc.}: float
  selectionStart* {.importc.}: float
  size* {.importc.}: float
  src* {.importc.}: cstring
  status* {.importc.}: bool
  step* {.importc.}: cstring
  xType* {.importc: "type".}: cstring
  useMap* {.importc.}: cstring
  validationMessage* {.importc.}: cstring
  validity* {.importc.}: ValidityState
  value* {.importc.}: cstring
  valueAsDate* {.importc.}: Date
  valueAsNumber* {.importc.}: float
  vspace* {.importc.}: float
  width* {.importc.}: cstring
  willValidate* {.importc.}: bool
proc newHTMLInputElement*(): HTMLInputElement {.importcpp: "new HTMLInputElement".}
proc checkValidity*(self: HTMLInputElement): bool {.importcpp.}
proc createTextRange*(self: HTMLInputElement): TextRange {.importcpp.}
proc select*(self: HTMLInputElement): void {.importcpp.}
proc setCustomValidity*(self: HTMLInputElement,
    error: cstring): void {.importcpp.}
proc setSelectionRange*(self: HTMLInputElement, start: float,
    xEnd: float): void {.importcpp.}
proc stepDown*(self: HTMLInputElement, n: float): void {.importcpp.}
proc stepUp*(self: HTMLInputElement, n: float): void {.importcpp.}

type HTMLIsIndexElement* {.importc.} = ref object of HTMLElement
  action* {.importc.}: cstring
  form* {.importc.}: HTMLFormElement
  prompt* {.importc.}: cstring
proc newHTMLIsIndexElement*(): HTMLIsIndexElement {.importcpp: "new HTMLIsIndexElement".}

type HTMLLIElement* {.importc.} = ref object of HTMLElement
  xType* {.importc: "type".}: cstring
  value* {.importc.}: float
proc newHTMLLIElement*(): HTMLLIElement {.importcpp: "new HTMLLIElement".}

type HTMLLabelElement* {.importc.} = ref object of HTMLElement
  form* {.importc.}: HTMLFormElement
  htmlFor* {.importc.}: cstring
proc newHTMLLabelElement*(): HTMLLabelElement {.importcpp: "new HTMLLabelElement".}

type HTMLLegendElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  form* {.importc.}: HTMLFormElement
proc newHTMLLegendElement*(): HTMLLegendElement {.importcpp: "new HTMLLegendElement".}

type HTMLLinkElement* {.importc.} = ref object of HTMLElement
  charset* {.importc.}: cstring
  disabled* {.importc.}: bool
  href* {.importc.}: cstring
  hreflang* {.importc.}: cstring
  media* {.importc.}: cstring
  rel* {.importc.}: cstring
  rev* {.importc.}: cstring
  target* {.importc.}: cstring
  xType* {.importc: "type".}: cstring
proc newHTMLLinkElement*(): HTMLLinkElement {.importcpp: "new HTMLLinkElement".}
proc addEventListener*(self: HTMLLinkElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLLinkElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLMapElement* {.importc.} = ref object of HTMLElement
  areas* {.importc.}: HTMLAreasCollection
  name* {.importc.}: cstring
proc newHTMLMapElement*(): HTMLMapElement {.importcpp: "new HTMLMapElement".}

type HTMLMarqueeElement* {.importc.} = ref object of HTMLElement
  behavior* {.importc.}: cstring
  direction* {.importc.}: cstring
  height* {.importc.}: cstring
  hspace* {.importc.}: float
  loop* {.importc.}: float
  scrollAmount* {.importc.}: float
  scrollDelay* {.importc.}: float
  trueSpeed* {.importc.}: bool
  vspace* {.importc.}: float
  width* {.importc.}: cstring
proc newHTMLMarqueeElement*(): HTMLMarqueeElement {.importcpp: "new HTMLMarqueeElement".}
proc start*(self: HTMLMarqueeElement): void {.importcpp.}
proc stop*(self: HTMLMarqueeElement): void {.importcpp.}
proc addEventListener*(self: HTMLMarqueeElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLMarqueeElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLMenuElement* {.importc.} = ref object of HTMLElement
  compact* {.importc.}: bool
  xType* {.importc: "type".}: cstring
proc newHTMLMenuElement*(): HTMLMenuElement {.importcpp: "new HTMLMenuElement".}

type HTMLMetaElement* {.importc.} = ref object of HTMLElement
  charset* {.importc.}: cstring
  content* {.importc.}: cstring
  httpEquiv* {.importc.}: cstring
  name* {.importc.}: cstring
  scheme* {.importc.}: cstring
  url* {.importc.}: cstring
proc newHTMLMetaElement*(): HTMLMetaElement {.importcpp: "new HTMLMetaElement".}

type HTMLModElement* {.importc.} = ref object of HTMLElement
  cite* {.importc.}: cstring
  dateTime* {.importc.}: cstring
proc newHTMLModElement*(): HTMLModElement {.importcpp: "new HTMLModElement".}

type HTMLNextIdElement* {.importc.} = ref object of HTMLElement
  n* {.importc.}: cstring
proc newHTMLNextIdElement*(): HTMLNextIdElement {.importcpp: "new HTMLNextIdElement".}

type HTMLOListElement* {.importc.} = ref object of HTMLElement
  compact* {.importc.}: bool
  start* {.importc.}: float
  xType* {.importc: "type".}: cstring
proc newHTMLOListElement*(): HTMLOListElement {.importcpp: "new HTMLOListElement".}

type HTMLObjectElement* {.importc.} = ref object of HTMLElement
  BaseHref* {.importc.}: cstring
  align* {.importc.}: cstring
  alt* {.importc.}: cstring
  altHtml* {.importc.}: cstring
  archive* {.importc.}: cstring
  border* {.importc.}: cstring
  code* {.importc.}: cstring
  codeBase* {.importc.}: cstring
  codeType* {.importc.}: cstring
  contentDocument* {.importc.}: Document
  data* {.importc.}: cstring
  declare* {.importc.}: bool
  form* {.importc.}: HTMLFormElement
  height* {.importc.}: cstring
  hspace* {.importc.}: float
  msPlayToDisabled* {.importc.}: bool
  msPlayToPreferredSourceUri* {.importc.}: cstring
  msPlayToPrimary* {.importc.}: bool
  name* {.importc.}: cstring
  readyState* {.importc.}: float
  standby* {.importc.}: cstring
  xType* {.importc: "type".}: cstring
  useMap* {.importc.}: cstring
  validationMessage* {.importc.}: cstring
  validity* {.importc.}: ValidityState
  vspace* {.importc.}: float
  width* {.importc.}: cstring
  willValidate* {.importc.}: bool
proc newHTMLObjectElement*(): HTMLObjectElement {.importcpp: "new HTMLObjectElement".}
proc checkValidity*(self: HTMLObjectElement): bool {.importcpp.}
proc setCustomValidity*(self: HTMLObjectElement,
    error: cstring): void {.importcpp.}
proc addEventListener*(self: HTMLObjectElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLObjectElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLOptGroupElement* {.importc.} = ref object of HTMLElement
  defaultSelected* {.importc.}: bool
  disabled* {.importc.}: bool
  form* {.importc.}: HTMLFormElement
  index* {.importc.}: float
  label* {.importc.}: cstring
  selected* {.importc.}: bool
  text* {.importc.}: cstring
  value* {.importc.}: cstring
proc newHTMLOptGroupElement*(): HTMLOptGroupElement {.importcpp: "new HTMLOptGroupElement".}

type HTMLOptionElement* {.importc.} = ref object of HTMLElement
  defaultSelected* {.importc.}: bool
  disabled* {.importc.}: bool
  form* {.importc.}: HTMLFormElement
  index* {.importc.}: float
  label* {.importc.}: cstring
  selected* {.importc.}: bool
  text* {.importc.}: cstring
  value* {.importc.}: cstring
proc newHTMLOptionElement*(): HTMLOptionElement {.importcpp: "new HTMLOptionElement".}
proc HTMLOptionElementCreate*(): HTMLOptionElement {.importc: "HTMLOptionElement.create".}

type HTMLParagraphElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  clear* {.importc.}: cstring
proc newHTMLParagraphElement*(): HTMLParagraphElement {.importcpp: "new HTMLParagraphElement".}

type HTMLParamElement* {.importc.} = ref object of HTMLElement
  name* {.importc.}: cstring
  xType* {.importc: "type".}: cstring
  value* {.importc.}: cstring
  valueType* {.importc.}: cstring
proc newHTMLParamElement*(): HTMLParamElement {.importcpp: "new HTMLParamElement".}

type HTMLPhraseElement* {.importc.} = ref object of HTMLElement
  cite* {.importc.}: cstring
  dateTime* {.importc.}: cstring
proc newHTMLPhraseElement*(): HTMLPhraseElement {.importcpp: "new HTMLPhraseElement".}

type HTMLPreElement* {.importc.} = ref object of HTMLElement
  cite* {.importc.}: cstring
  clear* {.importc.}: cstring
  width* {.importc.}: float
proc newHTMLPreElement*(): HTMLPreElement {.importcpp: "new HTMLPreElement".}

type HTMLProgressElement* {.importc.} = ref object of HTMLElement
  form* {.importc.}: HTMLFormElement
  max* {.importc.}: float
  position* {.importc.}: float
  value* {.importc.}: float
proc newHTMLProgressElement*(): HTMLProgressElement {.importcpp: "new HTMLProgressElement".}

type HTMLQuoteElement* {.importc.} = ref object of HTMLElement
  cite* {.importc.}: cstring
  dateTime* {.importc.}: cstring
proc newHTMLQuoteElement*(): HTMLQuoteElement {.importcpp: "new HTMLQuoteElement".}

type HTMLSelectElement* {.importc.} = ref object of HTMLElement
  autofocus* {.importc.}: bool
  disabled* {.importc.}: bool
  form* {.importc.}: HTMLFormElement
  length* {.importc.}: float
  multiple* {.importc.}: bool
  name* {.importc.}: cstring
  options* {.importc.}: HTMLCollection
  required* {.importc.}: bool
  selectedIndex* {.importc.}: float
  size* {.importc.}: float
  xType* {.importc: "type".}: cstring
  validationMessage* {.importc.}: cstring
  validity* {.importc.}: ValidityState
  value* {.importc.}: cstring
  willValidate* {.importc.}: bool
  selectedOptions* {.importc.}: HTMLCollection
proc newHTMLSelectElement*(): HTMLSelectElement {.importcpp: "new HTMLSelectElement".}
proc add*(self: HTMLSelectElement, element: HTMLElement,
    before: HTMLElement): void {.importcpp.}
proc add*(self: HTMLSelectElement, element: HTMLElement,
    before: float): void {.importcpp.}
proc checkValidity*(self: HTMLSelectElement): bool {.importcpp.}
proc remove*(self: HTMLSelectElement, index: float): void {.importcpp.}
proc setCustomValidity*(self: HTMLSelectElement,
    error: cstring): void {.importcpp.}

type HTMLSourceElement* {.importc.} = ref object of HTMLElement
  media* {.importc.}: cstring
  msKeySystem* {.importc.}: cstring
  src* {.importc.}: cstring
  xType* {.importc: "type".}: cstring
proc newHTMLSourceElement*(): HTMLSourceElement {.importcpp: "new HTMLSourceElement".}

type HTMLSpanElement* {.importc.} = ref object of HTMLElement
proc newHTMLSpanElement*(): HTMLSpanElement {.importcpp: "new HTMLSpanElement".}

type HTMLStyleElement* {.importc.} = ref object of HTMLElement
  media* {.importc.}: cstring
  xType* {.importc: "type".}: cstring
proc newHTMLStyleElement*(): HTMLStyleElement {.importcpp: "new HTMLStyleElement".}
proc addEventListener*(self: HTMLStyleElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLStyleElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLTableCaptionElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  vAlign* {.importc.}: cstring
proc newHTMLTableCaptionElement*(): HTMLTableCaptionElement {.importcpp: "new HTMLTableCaptionElement".}

type HTMLTableCellElement* {.importc.} = ref object of HTMLElement
  abbr* {.importc.}: cstring
  align* {.importc.}: cstring
  axis* {.importc.}: cstring
  cellIndex* {.importc.}: float
  colSpan* {.importc.}: float
  headers* {.importc.}: cstring
  noWrap* {.importc.}: bool
  rowSpan* {.importc.}: float
  scope* {.importc.}: cstring
  width* {.importc.}: cstring
proc newHTMLTableCellElement*(): HTMLTableCellElement {.importcpp: "new HTMLTableCellElement".}
proc addEventListener*(self: HTMLTableCellElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLTableCellElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLTableColElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  span* {.importc.}: float
proc newHTMLTableColElement*(): HTMLTableColElement {.importcpp: "new HTMLTableColElement".}
proc addEventListener*(self: HTMLTableColElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLTableColElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLTableDataCellElement* {.importc.} = ref object of HTMLTableCellElement
proc newHTMLTableDataCellElement*(): HTMLTableDataCellElement {.importcpp: "new HTMLTableDataCellElement".}

type HTMLTableRowElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  cells* {.importc.}: HTMLCollection
  rowIndex* {.importc.}: float
  sectionRowIndex* {.importc.}: float
proc deleteCell*(self: HTMLTableRowElement, index: float): void {.importcpp.}
proc insertCell*(self: HTMLTableRowElement,
    index: float): HTMLTableCellElement {.importcpp.}
proc addEventListener*(self: HTMLTableRowElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLTableRowElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var HTMLTableRowElementAlign* {.importc: "HTMLTableRowElement.align",
    nodecl.}: cstring
var HTMLTableRowElementCells* {.importc: "HTMLTableRowElement.cells",
    nodecl.}: HTMLCollection
var HTMLTableRowElementRowIndex* {.importc: "HTMLTableRowElement.rowIndex",
    nodecl.}: float
var HTMLTableRowElementSectionRowIndex *
  {.importc: "HTMLTableRowElement.sectionRowIndex", nodecl.}: float
proc HTMLTableRowElementDeleteCell*(index: float): void {.importc: "HTMLTableRowElement.deleteCell".}
proc HTMLTableRowElementInsertCell*(index: float): HTMLTableCellElement {.importc: "HTMLTableRowElement.insertCell".}
proc HTMLTableRowElementAddEventListener*(xType: cstring,
    listener: EventListener,
    useCapture: bool): void {.importc: "HTMLTableRowElement.addEventListener".}
proc HTMLTableRowElementAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "HTMLTableRowElement.addEventListener".}

type HTMLTableSectionElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  rows* {.importc.}: HTMLCollection
proc deleteRow*(self: HTMLTableSectionElement, index: float): void {.importcpp.}
proc insertRow*(self: HTMLTableSectionElement,
    index: float): HTMLTableRowElement {.importcpp.}
proc addEventListener*(self: HTMLTableSectionElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: HTMLTableSectionElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var HTMLTableSectionElementAlign* {.importc: "HTMLTableSectionElement.align",
    nodecl.}: cstring
var HTMLTableSectionElementRows* {.importc: "HTMLTableSectionElement.rows",
    nodecl.}: HTMLCollection
proc HTMLTableSectionElementDeleteRow*(index: float): void {.importc: "HTMLTableSectionElement.deleteRow".}
proc HTMLTableSectionElementInsertRow*(index: float): HTMLTableRowElement {.importc: "HTMLTableSectionElement.insertRow".}
proc HTMLTableSectionElementAddEventListener*(xType: cstring,
    listener: EventListener,
    useCapture: bool): void {.importc: "HTMLTableSectionElement.addEventListener".}
proc HTMLTableSectionElementAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "HTMLTableSectionElement.addEventListener".}

type HTMLTableElement* {.importc.} = ref object of HTMLElement
  align* {.importc.}: cstring
  border* {.importc.}: cstring
  caption* {.importc.}: HTMLTableCaptionElement
  cellPadding* {.importc.}: cstring
  cellSpacing* {.importc.}: cstring
  cols* {.importc.}: float
  frame* {.importc.}: cstring
  rows* {.importc.}: HTMLCollection
  rules* {.importc.}: cstring
  summary* {.importc.}: cstring
  tBodies* {.importc.}: HTMLCollection
  tFoot* {.importc.}: HTMLTableSectionElement
  tHead* {.importc.}: HTMLTableSectionElement
  width* {.importc.}: cstring
proc newHTMLTableElement*(): HTMLTableElement {.importcpp: "new HTMLTableElement".}
proc createCaption*(self: HTMLTableElement): HTMLTableCaptionElement {.importcpp.}
proc createTBody*(self: HTMLTableElement): HTMLTableSectionElement {.importcpp.}
proc createTFoot*(self: HTMLTableElement): HTMLTableSectionElement {.importcpp.}
proc createTHead*(self: HTMLTableElement): HTMLTableSectionElement {.importcpp.}
proc deleteCaption*(self: HTMLTableElement): void {.importcpp.}
proc deleteRow*(self: HTMLTableElement, index: float): void {.importcpp.}
proc deleteTFoot*(self: HTMLTableElement): void {.importcpp.}
proc deleteTHead*(self: HTMLTableElement): void {.importcpp.}
proc insertRow*(self: HTMLTableElement, index: float): HTMLTableRowElement {.importcpp.}

type HTMLTableHeaderCellElement* {.importc.} = ref object of HTMLTableCellElement
proc newHTMLTableHeaderCellElement*(): HTMLTableHeaderCellElement {.importcpp: "new HTMLTableHeaderCellElement".}

type HTMLTextAreaElement* {.importc.} = ref object of HTMLElement
  autofocus* {.importc.}: bool
  cols* {.importc.}: float
  defaultValue* {.importc.}: cstring
  disabled* {.importc.}: bool
  form* {.importc.}: HTMLFormElement
  maxLength* {.importc.}: float
  name* {.importc.}: cstring
  placeholder* {.importc.}: cstring
  readOnly* {.importc.}: bool
  required* {.importc.}: bool
  rows* {.importc.}: float
  selectionEnd* {.importc.}: float
  selectionStart* {.importc.}: float
  xType* {.importc: "type".}: cstring
  validationMessage* {.importc.}: cstring
  validity* {.importc.}: ValidityState
  value* {.importc.}: cstring
  willValidate* {.importc.}: bool
  wrap* {.importc.}: cstring
proc newHTMLTextAreaElement*(): HTMLTextAreaElement {.importcpp: "new HTMLTextAreaElement".}
proc checkValidity*(self: HTMLTextAreaElement): bool {.importcpp.}
proc createTextRange*(self: HTMLTextAreaElement): TextRange {.importcpp.}
proc select*(self: HTMLTextAreaElement): void {.importcpp.}
proc setCustomValidity*(self: HTMLTextAreaElement,
    error: cstring): void {.importcpp.}
proc setSelectionRange*(self: HTMLTextAreaElement, start: float,
    xEnd: float): void {.importcpp.}

type HTMLTitleElement* {.importc.} = ref object of HTMLElement
  text* {.importc.}: cstring
proc newHTMLTitleElement*(): HTMLTitleElement {.importcpp: "new HTMLTitleElement".}

type HTMLTrackElement* {.importc.} = ref object of HTMLElement
  default* {.importc.}: bool
  kind* {.importc.}: cstring
  label* {.importc.}: cstring
  readyState* {.importc.}: float
  src* {.importc.}: cstring
  srclang* {.importc.}: cstring
  track* {.importc.}: TextTrack
  ERROR* {.importc.}: float
  LOADED* {.importc.}: float
  LOADING* {.importc.}: float
  NONE* {.importc.}: float
proc newHTMLTrackElement*(): HTMLTrackElement {.importcpp: "new HTMLTrackElement".}
var HTMLTrackElementERROR* {.importc: "HTMLTrackElement.ERROR", nodecl.}: float
var HTMLTrackElementLOADED* {.importc: "HTMLTrackElement.LOADED",
    nodecl.}: float
var HTMLTrackElementLOADING* {.importc: "HTMLTrackElement.LOADING",
    nodecl.}: float
var HTMLTrackElementNONE* {.importc: "HTMLTrackElement.NONE", nodecl.}: float

type HTMLUListElement* {.importc.} = ref object of HTMLElement
  compact* {.importc.}: bool
  xType* {.importc: "type".}: cstring
proc newHTMLUListElement*(): HTMLUListElement {.importcpp: "new HTMLUListElement".}

type HTMLUnknownElement* {.importc.} = ref object of HTMLElement
proc newHTMLUnknownElement*(): HTMLUnknownElement {.importcpp: "new HTMLUnknownElement".}

type HashChangeEvent* {.importc.} = ref object of Event
  newURL* {.importc.}: cstring
  oldURL* {.importc.}: cstring
var HashChangeEventNewURL* {.importc: "HashChangeEvent.newURL",
    nodecl.}: cstring
var HashChangeEventOldURL* {.importc: "HashChangeEvent.oldURL",
    nodecl.}: cstring

type IDBObjectStoreParameters* {.importc.} = ref object of RootObj
  autoIncrement* {.importc.}: bool
proc newIDBObjectStoreParameters*(): IDBObjectStoreParameters {.importcpp: "new IDBObjectStoreParameters".}

type IDBKeyRange* {.importc.} = ref object of RootObj
  lowerOpen* {.importc.}: bool
  upperOpen* {.importc.}: bool
var IDBKeyRangeLowerOpen* {.importc: "IDBKeyRange.lowerOpen", nodecl.}: bool
var IDBKeyRangeUpperOpen* {.importc: "IDBKeyRange.upperOpen", nodecl.}: bool

type
  IDBIndex* {.importc.} = ref object of RootObj
    name* {.importc.}: cstring
    objectStore* {.importc.}: IDBObjectStore
    unique* {.importc.}: bool
    multiEntry* {.importc.}: bool
  IDBObjectStore* {.importc.} = ref object of RootObj
    indexNames* {.importc.}: DOMStringList
    keyPath* {.importc.}: cstring
    name* {.importc.}: cstring
    transaction* {.importc.}: IDBTransaction
  IDBDatabase* {.importc.} = ref object of EventTarget
    name* {.importc.}: cstring
    objectStoreNames* {.importc.}: DOMStringList
    version* {.importc.}: float
  IDBTransaction* {.importc.} = ref object of EventTarget
    db* {.importc.}: IDBDatabase
    error* {.importc.}: DOMError
    mode* {.importc.}: cstring
    READ_ONLY* {.importc.}: cstring
    READ_WRITE* {.importc.}: cstring
    VERSION_CHANGE* {.importc.}: cstring
  IDBRequest* {.importc.} = ref object of EventTarget
    error* {.importc.}: DOMError
    readyState* {.importc.}: cstring
    transaction* {.importc.}: IDBTransaction
proc newIDBIndex*(): IDBIndex {.importcpp: "new IDBIndex".}
proc openCursor*(self: IDBIndex, range: IDBKeyRange,
    direction: cstring): IDBRequest {.importcpp.}
proc openKeyCursor*(self: IDBIndex, range: IDBKeyRange,
    direction: cstring): IDBRequest {.importcpp.}
proc clear*(self: IDBObjectStore): IDBRequest {.importcpp.}
proc deleteIndex*(self: IDBObjectStore, indexName: cstring): void {.importcpp.}
proc index*(self: IDBObjectStore, name: cstring): IDBIndex {.importcpp.}
var IDBObjectStoreIndexNames* {.importc: "IDBObjectStore.indexNames",
    nodecl.}: DOMStringList
var IDBObjectStoreKeyPath* {.importc: "IDBObjectStore.keyPath",
    nodecl.}: cstring
var IDBObjectStoreName* {.importc: "IDBObjectStore.name", nodecl.}: cstring
var IDBObjectStoreTransaction* {.importc: "IDBObjectStore.transaction",
    nodecl.}: IDBTransaction
proc IDBObjectStoreClear*(): IDBRequest {.importc: "IDBObjectStore.clear".}
proc IDBObjectStoreDeleteIndex*(indexName: cstring): void {.importc: "IDBObjectStore.deleteIndex".}
proc IDBObjectStoreIndex*(name: cstring): IDBIndex {.importc: "IDBObjectStore.index".}
proc newIDBDatabase*(): IDBDatabase {.importcpp: "new IDBDatabase".}
proc close*(self: IDBDatabase): void {.importcpp.}
proc createObjectStore*(self: IDBDatabase, name: cstring,
    optionalParameters: IDBObjectStoreParameters): IDBObjectStore {.importcpp.}
proc deleteObjectStore*(self: IDBDatabase, name: cstring): void {.importcpp.}
proc addEventListener*(self: IDBDatabase, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: IDBDatabase, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc abort*(self: IDBTransaction): void {.importcpp.}
proc objectStore*(self: IDBTransaction, name: cstring): IDBObjectStore {.importcpp.}
proc addEventListener*(self: IDBTransaction, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: IDBTransaction, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var IDBTransactionDb* {.importc: "IDBTransaction.db", nodecl.}: IDBDatabase
var IDBTransactionError* {.importc: "IDBTransaction.error", nodecl.}: DOMError
var IDBTransactionMode* {.importc: "IDBTransaction.mode", nodecl.}: cstring
var IDBTransactionREAD_ONLY* {.importc: "IDBTransaction.READ_ONLY",
    nodecl.}: cstring
var IDBTransactionREAD_WRITE* {.importc: "IDBTransaction.READ_WRITE",
    nodecl.}: cstring
var IDBTransactionVERSION_CHANGE* {.importc: "IDBTransaction.VERSION_CHANGE",
    nodecl.}: cstring
proc IDBTransactionAbort*(): void {.importc: "IDBTransaction.abort".}
proc IDBTransactionObjectStore*(name: cstring): IDBObjectStore {.importc: "IDBTransaction.objectStore".}
proc IDBTransactionAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "IDBTransaction.addEventListener".}
proc IDBTransactionAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "IDBTransaction.addEventListener".}
proc addEventListener*(self: IDBRequest, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: IDBRequest, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var IDBRequestError* {.importc: "IDBRequest.error", nodecl.}: DOMError
var IDBRequestReadyState* {.importc: "IDBRequest.readyState", nodecl.}: cstring
var IDBRequestTransaction* {.importc: "IDBRequest.transaction",
    nodecl.}: IDBTransaction
proc IDBRequestAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "IDBRequest.addEventListener".}
proc IDBRequestAddEventListener*(xType: cstring, listener: EventListenerObject,
    useCapture: bool): void {.importc: "IDBRequest.addEventListener".}

type IDBCursor* {.importc.} = ref object of RootObj
  direction* {.importc.}: cstring
  NEXT* {.importc.}: cstring
  NEXT_NO_DUPLICATE* {.importc.}: cstring
  PREV* {.importc.}: cstring
  PREV_NO_DUPLICATE* {.importc.}: cstring
proc newIDBCursor*(): IDBCursor {.importcpp: "new IDBCursor".}
proc advance*(self: IDBCursor, count: float): void {.importcpp.}
proc delete*(self: IDBCursor): IDBRequest {.importcpp.}
var IDBCursorNEXT* {.importc: "IDBCursor.NEXT", nodecl.}: cstring
var IDBCursorNEXT_NO_DUPLICATE* {.importc: "IDBCursor.NEXT_NO_DUPLICATE",
    nodecl.}: cstring
var IDBCursorPREV* {.importc: "IDBCursor.PREV", nodecl.}: cstring
var IDBCursorPREV_NO_DUPLICATE* {.importc: "IDBCursor.PREV_NO_DUPLICATE",
    nodecl.}: cstring

type IDBCursorWithValue* {.importc.} = ref object of IDBCursor
proc newIDBCursorWithValue*(): IDBCursorWithValue {.importcpp: "new IDBCursorWithValue".}

type IDBOpenDBRequest* {.importc.} = ref object of IDBRequest
proc addEventListener*(self: IDBOpenDBRequest, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: IDBOpenDBRequest, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc IDBOpenDBRequestAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "IDBOpenDBRequest.addEventListener".}
proc IDBOpenDBRequestAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "IDBOpenDBRequest.addEventListener".}

type IDBFactory* {.importc.} = ref object of RootObj
proc newIDBFactory*(): IDBFactory {.importcpp: "new IDBFactory".}
proc deleteDatabase*(self: IDBFactory, name: cstring): IDBOpenDBRequest {.importcpp.}
proc open*(self: IDBFactory, name: cstring,
    version: float): IDBOpenDBRequest {.importcpp.}

type IDBVersionChangeEvent* {.importc.} = ref object of Event
  newVersion* {.importc.}: float
  oldVersion* {.importc.}: float
var IDBVersionChangeEventNewVersion* {.importc: "IDBVersionChangeEvent.newVersion",
    nodecl.}: float
var IDBVersionChangeEventOldVersion* {.importc: "IDBVersionChangeEvent.oldVersion",
    nodecl.}: float

type KeyboardEvent* {.importc.} = ref object of UIEvent
  altKey* {.importc.}: bool
  char* {.importc.}: cstring
  charCode* {.importc.}: float
  ctrlKey* {.importc.}: bool
  key* {.importc.}: cstring
  keyCode* {.importc.}: float
  locale* {.importc.}: cstring
  location* {.importc.}: float
  metaKey* {.importc.}: bool
  repeat* {.importc.}: bool
  shiftKey* {.importc.}: bool
  which* {.importc.}: float
  DOM_KEY_LOCATION_JOYSTICK* {.importc.}: float
  DOM_KEY_LOCATION_LEFT* {.importc.}: float
  DOM_KEY_LOCATION_MOBILE* {.importc.}: float
  DOM_KEY_LOCATION_NUMPAD* {.importc.}: float
  DOM_KEY_LOCATION_RIGHT* {.importc.}: float
  DOM_KEY_LOCATION_STANDARD* {.importc.}: float
proc getModifierState*(self: KeyboardEvent, keyArg: cstring): bool {.importcpp.}
proc initKeyboardEvent*(self: KeyboardEvent, typeArg: cstring,
    canBubbleArg: bool, cancelableArg: bool, viewArg: Window, keyArg: cstring,
    locationArg: float, modifiersListArg: cstring, repeat: bool,
    locale: cstring): void {.importcpp.}
var KeyboardEventAltKey* {.importc: "KeyboardEvent.altKey", nodecl.}: bool
var KeyboardEventChar* {.importc: "KeyboardEvent.char", nodecl.}: cstring
var KeyboardEventCharCode* {.importc: "KeyboardEvent.charCode", nodecl.}: float
var KeyboardEventCtrlKey* {.importc: "KeyboardEvent.ctrlKey", nodecl.}: bool
var KeyboardEventKey* {.importc: "KeyboardEvent.key", nodecl.}: cstring
var KeyboardEventKeyCode* {.importc: "KeyboardEvent.keyCode", nodecl.}: float
var KeyboardEventLocale* {.importc: "KeyboardEvent.locale", nodecl.}: cstring
var KeyboardEventLocation* {.importc: "KeyboardEvent.location", nodecl.}: float
var KeyboardEventMetaKey* {.importc: "KeyboardEvent.metaKey", nodecl.}: bool
var KeyboardEventRepeat* {.importc: "KeyboardEvent.repeat", nodecl.}: bool
var KeyboardEventShiftKey* {.importc: "KeyboardEvent.shiftKey", nodecl.}: bool
var KeyboardEventWhich* {.importc: "KeyboardEvent.which", nodecl.}: float
var KeyboardEventDOM_KEY_LOCATION_JOYSTICK *
  {.importc: "KeyboardEvent.DOM_KEY_LOCATION_JOYSTICK", nodecl.}: float
var KeyboardEventDOM_KEY_LOCATION_LEFT *
  {.importc: "KeyboardEvent.DOM_KEY_LOCATION_LEFT", nodecl.}: float
var KeyboardEventDOM_KEY_LOCATION_MOBILE *
  {.importc: "KeyboardEvent.DOM_KEY_LOCATION_MOBILE", nodecl.}: float
var KeyboardEventDOM_KEY_LOCATION_NUMPAD *
  {.importc: "KeyboardEvent.DOM_KEY_LOCATION_NUMPAD", nodecl.}: float
var KeyboardEventDOM_KEY_LOCATION_RIGHT *
  {.importc: "KeyboardEvent.DOM_KEY_LOCATION_RIGHT", nodecl.}: float
var KeyboardEventDOM_KEY_LOCATION_STANDARD *
  {.importc: "KeyboardEvent.DOM_KEY_LOCATION_STANDARD", nodecl.}: float
proc KeyboardEventGetModifierState*(keyArg: cstring): bool {.importc: "KeyboardEvent.getModifierState".}
proc KeyboardEventInitKeyboardEvent*(typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, viewArg: Window, keyArg: cstring, locationArg: float,
    modifiersListArg: cstring, repeat: bool,
    locale: cstring): void {.importc: "KeyboardEvent.initKeyboardEvent".}

type LongRunningScriptDetectedEvent* {.importc.} = ref object of Event
  executionTime* {.importc.}: float
  stopPageScriptExecution* {.importc.}: bool
proc newLongRunningScriptDetectedEvent*(): LongRunningScriptDetectedEvent {.importcpp: "new LongRunningScriptDetectedEvent".}

type MSAppAsyncOperation* {.importc.} = ref object of EventTarget
  error* {.importc.}: DOMError
  readyState* {.importc.}: float
  COMPLETED* {.importc.}: float
  STARTED* {.importc.}: float
proc start*(self: MSAppAsyncOperation): void {.importcpp.}
proc addEventListener*(self: MSAppAsyncOperation, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: MSAppAsyncOperation, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var MSAppAsyncOperationError* {.importc: "MSAppAsyncOperation.error",
    nodecl.}: DOMError
var MSAppAsyncOperationReadyState* {.importc: "MSAppAsyncOperation.readyState",
    nodecl.}: float
var MSAppAsyncOperationCOMPLETED* {.importc: "MSAppAsyncOperation.COMPLETED",
    nodecl.}: float
var MSAppAsyncOperationSTARTED* {.importc: "MSAppAsyncOperation.STARTED",
    nodecl.}: float
proc MSAppAsyncOperationStart*(): void {.importc: "MSAppAsyncOperation.start".}
proc MSAppAsyncOperationAddEventListener*(xType: cstring,
    listener: EventListener,
    useCapture: bool): void {.importc: "MSAppAsyncOperation.addEventListener".}
proc MSAppAsyncOperationAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "MSAppAsyncOperation.addEventListener".}

type MSApp* {.importc.} = ref object of RootObj
  CURRENT* {.importc.}: cstring
  HIGH* {.importc.}: cstring
  IDLE* {.importc.}: cstring
  NORMAL* {.importc.}: cstring
proc clearTemporaryWebDataAsync*(self: MSApp): MSAppAsyncOperation {.importcpp.}
proc getCurrentPriority*(self: MSApp): cstring {.importcpp.}
proc isTaskScheduledAtPriorityOrHigher*(self: MSApp,
    priority: cstring): bool {.importcpp.}
proc pageHandlesAllApplicationActivations*(self: MSApp,
    enabled: bool): void {.importcpp.}
proc suppressSubdownloadCredentialPrompts*(self: MSApp,
    suppress: bool): void {.importcpp.}
var MSAppCURRENT* {.importc: "MSApp.CURRENT", nodecl.}: cstring
var MSAppHIGH* {.importc: "MSApp.HIGH", nodecl.}: cstring
var MSAppIDLE* {.importc: "MSApp.IDLE", nodecl.}: cstring
var MSAppNORMAL* {.importc: "MSApp.NORMAL", nodecl.}: cstring
proc MSAppClearTemporaryWebDataAsync*(): MSAppAsyncOperation {.importc: "MSApp.clearTemporaryWebDataAsync".}
proc MSAppGetCurrentPriority*(): cstring {.importc: "MSApp.getCurrentPriority".}
proc MSAppIsTaskScheduledAtPriorityOrHigher*(
  priority: cstring): bool {.importc: "MSApp.isTaskScheduledAtPriorityOrHigher".}
proc MSAppPageHandlesAllApplicationActivations*(
  enabled: bool): void {.importc: "MSApp.pageHandlesAllApplicationActivations".}
proc MSAppSuppressSubdownloadCredentialPrompts*(
  suppress: bool): void {.importc: "MSApp.suppressSubdownloadCredentialPrompts".}

type MSBlobBuilder* {.importc.} = ref object of RootObj
proc newMSBlobBuilder*(): MSBlobBuilder {.importcpp: "new MSBlobBuilder".}
proc getBlob*(self: MSBlobBuilder, contentType: cstring): Blob {.importcpp.}

type MSCSSMatrix* {.importc.} = ref object of RootObj
  a* {.importc.}: float
  b* {.importc.}: float
  c* {.importc.}: float
  d* {.importc.}: float
  e* {.importc.}: float
  f* {.importc.}: float
  m11* {.importc.}: float
  m12* {.importc.}: float
  m13* {.importc.}: float
  m14* {.importc.}: float
  m21* {.importc.}: float
  m22* {.importc.}: float
  m23* {.importc.}: float
  m24* {.importc.}: float
  m31* {.importc.}: float
  m32* {.importc.}: float
  m33* {.importc.}: float
  m34* {.importc.}: float
  m41* {.importc.}: float
  m42* {.importc.}: float
  m43* {.importc.}: float
  m44* {.importc.}: float
proc newMSCSSMatrix*(text: cstring): MSCSSMatrix {.importcpp: "new MSCSSMatrix(@)".}
proc inverse*(self: MSCSSMatrix): MSCSSMatrix {.importcpp.}
proc multiply*(self: MSCSSMatrix, secondMatrix: MSCSSMatrix): MSCSSMatrix {.importcpp.}
proc rotate*(self: MSCSSMatrix, angleX: float, angleY: float,
    angleZ: float): MSCSSMatrix {.importcpp.}
proc rotateAxisAngle*(self: MSCSSMatrix, x: float, y: float, z: float,
    angle: float): MSCSSMatrix {.importcpp.}
proc scale*(self: MSCSSMatrix, scaleX: float, scaleY: float,
    scaleZ: float): MSCSSMatrix {.importcpp.}
proc setMatrixValue*(self: MSCSSMatrix, value: cstring): void {.importcpp.}
proc skewX*(self: MSCSSMatrix, angle: float): MSCSSMatrix {.importcpp.}
proc skewY*(self: MSCSSMatrix, angle: float): MSCSSMatrix {.importcpp.}
proc toString*(self: MSCSSMatrix): cstring {.importcpp.}
proc translate*(self: MSCSSMatrix, x: float, y: float,
    z: float): MSCSSMatrix {.importcpp.}

type MSGesture* {.importc.} = ref object of RootObj
  target* {.importc.}: Element
proc newMSGesture*(): MSGesture {.importcpp: "new MSGesture".}
proc addPointer*(self: MSGesture, pointerId: float): void {.importcpp.}
proc stop*(self: MSGesture): void {.importcpp.}

type MSGestureEvent* {.importc.} = ref object of UIEvent
  clientX* {.importc.}: float
  clientY* {.importc.}: float
  expansion* {.importc.}: float
  hwTimestamp* {.importc.}: float
  offsetX* {.importc.}: float
  offsetY* {.importc.}: float
  rotation* {.importc.}: float
  scale* {.importc.}: float
  screenX* {.importc.}: float
  screenY* {.importc.}: float
  translationX* {.importc.}: float
  translationY* {.importc.}: float
  velocityAngular* {.importc.}: float
  velocityExpansion* {.importc.}: float
  velocityX* {.importc.}: float
  velocityY* {.importc.}: float
  MSGESTURE_FLAG_BEGIN* {.importc.}: float
  MSGESTURE_FLAG_CANCEL* {.importc.}: float
  MSGESTURE_FLAG_END* {.importc.}: float
  MSGESTURE_FLAG_INERTIA* {.importc.}: float
  MSGESTURE_FLAG_NONE* {.importc.}: float
proc initGestureEvent*(self: MSGestureEvent, typeArg: cstring,
    canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: float,
    screenXArg: float, screenYArg: float, clientXArg: float, clientYArg: float,
    offsetXArg: float, offsetYArg: float, translationXArg: float,
    translationYArg: float, scaleArg: float, expansionArg: float,
    rotationArg: float, velocityXArg: float, velocityYArg: float,
    velocityExpansionArg: float, velocityAngularArg: float,
    hwTimestampArg: float): void {.importcpp.}
var MSGestureEventClientX* {.importc: "MSGestureEvent.clientX", nodecl.}: float
var MSGestureEventClientY* {.importc: "MSGestureEvent.clientY", nodecl.}: float
var MSGestureEventExpansion* {.importc: "MSGestureEvent.expansion",
    nodecl.}: float
var MSGestureEventHwTimestamp* {.importc: "MSGestureEvent.hwTimestamp",
    nodecl.}: float
var MSGestureEventOffsetX* {.importc: "MSGestureEvent.offsetX", nodecl.}: float
var MSGestureEventOffsetY* {.importc: "MSGestureEvent.offsetY", nodecl.}: float
var MSGestureEventRotation* {.importc: "MSGestureEvent.rotation",
    nodecl.}: float
var MSGestureEventScale* {.importc: "MSGestureEvent.scale", nodecl.}: float
var MSGestureEventScreenX* {.importc: "MSGestureEvent.screenX", nodecl.}: float
var MSGestureEventScreenY* {.importc: "MSGestureEvent.screenY", nodecl.}: float
var MSGestureEventTranslationX* {.importc: "MSGestureEvent.translationX",
    nodecl.}: float
var MSGestureEventTranslationY* {.importc: "MSGestureEvent.translationY",
    nodecl.}: float
var MSGestureEventVelocityAngular* {.importc: "MSGestureEvent.velocityAngular",
    nodecl.}: float
var MSGestureEventVelocityExpansion* {.importc: "MSGestureEvent.velocityExpansion",
    nodecl.}: float
var MSGestureEventVelocityX* {.importc: "MSGestureEvent.velocityX",
    nodecl.}: float
var MSGestureEventVelocityY* {.importc: "MSGestureEvent.velocityY",
    nodecl.}: float
var MSGestureEventMSGESTURE_FLAG_BEGIN *
  {.importc: "MSGestureEvent.MSGESTURE_FLAG_BEGIN", nodecl.}: float
var MSGestureEventMSGESTURE_FLAG_CANCEL *
  {.importc: "MSGestureEvent.MSGESTURE_FLAG_CANCEL", nodecl.}: float
var MSGestureEventMSGESTURE_FLAG_END* {.importc: "MSGestureEvent.MSGESTURE_FLAG_END",
    nodecl.}: float
var MSGestureEventMSGESTURE_FLAG_INERTIA *
  {.importc: "MSGestureEvent.MSGESTURE_FLAG_INERTIA", nodecl.}: float
var MSGestureEventMSGESTURE_FLAG_NONE* {.importc: "MSGestureEvent.MSGESTURE_FLAG_NONE",
    nodecl.}: float
proc MSGestureEventInitGestureEvent*(typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, viewArg: Window, detailArg: float, screenXArg: float,
    screenYArg: float, clientXArg: float, clientYArg: float, offsetXArg: float,
    offsetYArg: float, translationXArg: float, translationYArg: float,
    scaleArg: float, expansionArg: float, rotationArg: float,
    velocityXArg: float, velocityYArg: float, velocityExpansionArg: float,
    velocityAngularArg: float,
    hwTimestampArg: float): void {.importc: "MSGestureEvent.initGestureEvent".}

type MSWebViewSettings* {.importc.} = ref object of RootObj
  isIndexedDBEnabled* {.importc.}: bool
  isJavaScriptEnabled* {.importc.}: bool
var MSWebViewSettingsIsIndexedDBEnabled *
  {.importc: "MSWebViewSettings.isIndexedDBEnabled", nodecl.}: bool
var MSWebViewSettingsIsJavaScriptEnabled *
  {.importc: "MSWebViewSettings.isJavaScriptEnabled", nodecl.}: bool

type
  MSWebViewAsyncOperation* {.importc.} = ref object of EventTarget
    error* {.importc.}: DOMError
    readyState* {.importc.}: float
    target* {.importc.}: MSHTMLWebViewElement
    xType* {.importc: "type".}: float
    COMPLETED* {.importc.}: float
    STARTED* {.importc.}: float
    TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM * {.importc.}: float
    TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION * {.importc.}: float
    TYPE_INVOKE_SCRIPT* {.importc.}: float
  MSHTMLWebViewElement* {.importc.} = ref object of HTMLElement
    canGoBack* {.importc.}: bool
    canGoForward* {.importc.}: bool
    containsFullScreenElement* {.importc.}: bool
    documentTitle* {.importc.}: cstring
    height* {.importc.}: float
    settings* {.importc.}: MSWebViewSettings
    src* {.importc.}: cstring
    width* {.importc.}: float
proc start*(self: MSWebViewAsyncOperation): void {.importcpp.}
proc addEventListener*(self: MSWebViewAsyncOperation, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: MSWebViewAsyncOperation, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var MSWebViewAsyncOperationError* {.importc: "MSWebViewAsyncOperation.error",
    nodecl.}: DOMError
var MSWebViewAsyncOperationReadyState* {.importc: "MSWebViewAsyncOperation.readyState",
    nodecl.}: float
var MSWebViewAsyncOperationTarget* {.importc: "MSWebViewAsyncOperation.target",
    nodecl.}: MSHTMLWebViewElement
var MSWebViewAsyncOperationType* {.importc: "MSWebViewAsyncOperation.type",
    nodecl.}: float
var MSWebViewAsyncOperationCOMPLETED* {.importc: "MSWebViewAsyncOperation.COMPLETED",
    nodecl.}: float
var MSWebViewAsyncOperationSTARTED* {.importc: "MSWebViewAsyncOperation.STARTED",
    nodecl.}: float
var MSWebViewAsyncOperationTYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM *
  {.importc: "MSWebViewAsyncOperation.TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM",
    nodecl.}: float
var MSWebViewAsyncOperationTYPE_CREATE_DATA_PACKAGE_FROM_SELECTION *
  {.importc: "MSWebViewAsyncOperation.TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION",
    nodecl.}: float
var MSWebViewAsyncOperationTYPE_INVOKE_SCRIPT *
  {.importc: "MSWebViewAsyncOperation.TYPE_INVOKE_SCRIPT", nodecl.}: float
proc MSWebViewAsyncOperationStart*(): void {.importc: "MSWebViewAsyncOperation.start".}
proc MSWebViewAsyncOperationAddEventListener*(xType: cstring,
    listener: EventListener,
    useCapture: bool): void {.importc: "MSWebViewAsyncOperation.addEventListener".}
proc MSWebViewAsyncOperationAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "MSWebViewAsyncOperation.addEventListener".}
proc newMSHTMLWebViewElement*(): MSHTMLWebViewElement {.importcpp: "new MSHTMLWebViewElement".}
proc buildLocalStreamUri*(self: MSHTMLWebViewElement,
    contentIdentifier: cstring, relativePath: cstring): cstring {.importcpp.}
proc capturePreviewToBlobAsync*(self: MSHTMLWebViewElement): MSWebViewAsyncOperation {.importcpp.}
proc captureSelectedContentToDataPackageAsync*(
  self: MSHTMLWebViewElement): MSWebViewAsyncOperation {.importcpp.}
proc getDeferredPermissionRequestById*(self: MSHTMLWebViewElement,
    id: float): DeferredPermissionRequest {.importcpp.}
proc goBack*(self: MSHTMLWebViewElement): void {.importcpp.}
proc goForward*(self: MSHTMLWebViewElement): void {.importcpp.}
proc navigate*(self: MSHTMLWebViewElement, uri: cstring): void {.importcpp.}
proc navigateToString*(self: MSHTMLWebViewElement,
    contents: cstring): void {.importcpp.}
proc refresh*(self: MSHTMLWebViewElement): void {.importcpp.}
proc stop*(self: MSHTMLWebViewElement): void {.importcpp.}

type MSManipulationEvent* {.importc.} = ref object of UIEvent
  currentState* {.importc.}: float
  inertiaDestinationX* {.importc.}: float
  inertiaDestinationY* {.importc.}: float
  lastState* {.importc.}: float
  MS_MANIPULATION_STATE_ACTIVE* {.importc.}: float
  MS_MANIPULATION_STATE_CANCELLED* {.importc.}: float
  MS_MANIPULATION_STATE_COMMITTED* {.importc.}: float
  MS_MANIPULATION_STATE_DRAGGING* {.importc.}: float
  MS_MANIPULATION_STATE_INERTIA* {.importc.}: float
  MS_MANIPULATION_STATE_PRESELECT* {.importc.}: float
  MS_MANIPULATION_STATE_SELECTING* {.importc.}: float
  MS_MANIPULATION_STATE_STOPPED* {.importc.}: float
proc initMSManipulationEvent*(self: MSManipulationEvent, typeArg: cstring,
    canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: float,
    lastState: float, currentState: float): void {.importcpp.}
var MSManipulationEventCurrentState* {.importc: "MSManipulationEvent.currentState",
    nodecl.}: float
var MSManipulationEventInertiaDestinationX *
  {.importc: "MSManipulationEvent.inertiaDestinationX", nodecl.}: float
var MSManipulationEventInertiaDestinationY *
  {.importc: "MSManipulationEvent.inertiaDestinationY", nodecl.}: float
var MSManipulationEventLastState* {.importc: "MSManipulationEvent.lastState",
    nodecl.}: float
var MSManipulationEventMS_MANIPULATION_STATE_ACTIVE *
  {.importc: "MSManipulationEvent.MS_MANIPULATION_STATE_ACTIVE", nodecl.}: float
var MSManipulationEventMS_MANIPULATION_STATE_CANCELLED *
  {.importc: "MSManipulationEvent.MS_MANIPULATION_STATE_CANCELLED",
    nodecl.}: float
var MSManipulationEventMS_MANIPULATION_STATE_COMMITTED *
  {.importc: "MSManipulationEvent.MS_MANIPULATION_STATE_COMMITTED",
    nodecl.}: float
var MSManipulationEventMS_MANIPULATION_STATE_DRAGGING *
  {.importc: "MSManipulationEvent.MS_MANIPULATION_STATE_DRAGGING",
    nodecl.}: float
var MSManipulationEventMS_MANIPULATION_STATE_INERTIA *
  {.importc: "MSManipulationEvent.MS_MANIPULATION_STATE_INERTIA",
    nodecl.}: float
var MSManipulationEventMS_MANIPULATION_STATE_PRESELECT *
  {.importc: "MSManipulationEvent.MS_MANIPULATION_STATE_PRESELECT",
    nodecl.}: float
var MSManipulationEventMS_MANIPULATION_STATE_SELECTING *
  {.importc: "MSManipulationEvent.MS_MANIPULATION_STATE_SELECTING",
    nodecl.}: float
var MSManipulationEventMS_MANIPULATION_STATE_STOPPED *
  {.importc: "MSManipulationEvent.MS_MANIPULATION_STATE_STOPPED",
    nodecl.}: float
proc MSManipulationEventInitMSManipulationEvent*(typeArg: cstring,
    canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: float,
    lastState: float,
    currentState: float): void {.importc: "MSManipulationEvent.initMSManipulationEvent".}

type MSMediaKeyMessageEvent* {.importc.} = ref object of Event
  destinationURL* {.importc.}: cstring
  message* {.importc.}: Uint8Array
proc newMSMediaKeyMessageEvent*(): MSMediaKeyMessageEvent {.importcpp: "new MSMediaKeyMessageEvent".}

type MSMediaKeyNeededEvent* {.importc.} = ref object of Event
  initData* {.importc.}: Uint8Array
var MSMediaKeyNeededEventInitData* {.importc: "MSMediaKeyNeededEvent.initData",
    nodecl.}: Uint8Array

type MSPointerEvent* {.importc.} = ref object of MouseEvent
  height* {.importc.}: float
  hwTimestamp* {.importc.}: float
  isPrimary* {.importc.}: bool
  pointerId* {.importc.}: float
  pressure* {.importc.}: float
  rotation* {.importc.}: float
  tiltX* {.importc.}: float
  tiltY* {.importc.}: float
  width* {.importc.}: float
proc getCurrentPoint*(self: MSPointerEvent,
    element: Element): void {.importcpp.}
proc getIntermediatePoints*(self: MSPointerEvent,
    element: Element): void {.importcpp.}
var MSPointerEventHeight* {.importc: "MSPointerEvent.height", nodecl.}: float
var MSPointerEventHwTimestamp* {.importc: "MSPointerEvent.hwTimestamp",
    nodecl.}: float
var MSPointerEventIsPrimary* {.importc: "MSPointerEvent.isPrimary", nodecl.}: bool
var MSPointerEventPointerId* {.importc: "MSPointerEvent.pointerId",
    nodecl.}: float
var MSPointerEventPressure* {.importc: "MSPointerEvent.pressure",
    nodecl.}: float
var MSPointerEventRotation* {.importc: "MSPointerEvent.rotation",
    nodecl.}: float
var MSPointerEventTiltX* {.importc: "MSPointerEvent.tiltX", nodecl.}: float
var MSPointerEventTiltY* {.importc: "MSPointerEvent.tiltY", nodecl.}: float
var MSPointerEventWidth* {.importc: "MSPointerEvent.width", nodecl.}: float
proc MSPointerEventGetCurrentPoint*(element: Element): void {.importc: "MSPointerEvent.getCurrentPoint".}
proc MSPointerEventGetIntermediatePoints*(
  element: Element): void {.importc: "MSPointerEvent.getIntermediatePoints".}

type MSSiteModeEvent* {.importc.} = ref object of Event
  actionURL* {.importc.}: cstring
  buttonID* {.importc.}: float
var MSSiteModeEventActionURL* {.importc: "MSSiteModeEvent.actionURL",
    nodecl.}: cstring
var MSSiteModeEventButtonID* {.importc: "MSSiteModeEvent.buttonID",
    nodecl.}: float

type MSStreamReader* {.importc.} = ref object of EventTarget
  error* {.importc.}: DOMError
proc newMSStreamReader*(): MSStreamReader {.importcpp: "new MSStreamReader".}
proc readAsArrayBuffer*(self: MSStreamReader, stream: MSStream,
    size: float): void {.importcpp.}
proc readAsBinaryString*(self: MSStreamReader, stream: MSStream,
    size: float): void {.importcpp.}
proc readAsBlob*(self: MSStreamReader, stream: MSStream,
    size: float): void {.importcpp.}
proc readAsDataURL*(self: MSStreamReader, stream: MSStream,
    size: float): void {.importcpp.}
proc readAsText*(self: MSStreamReader, stream: MSStream, encoding: cstring,
    size: float): void {.importcpp.}
proc addEventListener*(self: MSStreamReader, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: MSStreamReader, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SourceBufferList* {.importc.} = ref object of EventTarget
  length* {.importc.}: float
proc item*(self: SourceBufferList, index: float): SourceBuffer {.importcpp.}
proc `[]`*(self: SourceBufferList, index: float): SourceBuffer {.importcpp: "#[#]".}
proc `[]=`*(self: SourceBufferList, index: float,
    value: SourceBuffer) {.importcpp: "#[#] = #".}
var SourceBufferListLength* {.importc: "SourceBufferList.length",
    nodecl.}: float
proc SourceBufferListItem*(index: float): SourceBuffer {.importc: "SourceBufferList.item".}

type MediaSource* {.importc.} = ref object of EventTarget
  activeSourceBuffers* {.importc.}: SourceBufferList
  duration* {.importc.}: float
  readyState* {.importc.}: cstring
  sourceBuffers* {.importc.}: SourceBufferList
proc newMediaSource*(): MediaSource {.importcpp: "new MediaSource".}
proc addSourceBuffer*(self: MediaSource,
    xType: cstring): SourceBuffer {.importcpp.}
proc endOfStream*(self: MediaSource, error: float): void {.importcpp.}
proc removeSourceBuffer*(self: MediaSource,
    sourceBuffer: SourceBuffer): void {.importcpp.}
proc MediaSourceIsTypeSupported*(xType: cstring): bool {.importc: "MediaSource.isTypeSupported".}

type MessagePort* {.importc.} = ref object of EventTarget
proc close*(self: MessagePort): void {.importcpp.}
proc start*(self: MessagePort): void {.importcpp.}
proc addEventListener*(self: MessagePort, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: MessagePort, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc MessagePortClose*(): void {.importc: "MessagePort.close".}
proc MessagePortStart*(): void {.importc: "MessagePort.start".}
proc MessagePortAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "MessagePort.addEventListener".}
proc MessagePortAddEventListener*(xType: cstring, listener: EventListenerObject,
    useCapture: bool): void {.importc: "MessagePort.addEventListener".}

type MessageChannel* {.importc.} = ref object of RootObj
  port1* {.importc.}: MessagePort
  port2* {.importc.}: MessagePort
proc newMessageChannel*(): MessageChannel {.importcpp: "new MessageChannel".}

type MessageEvent* {.importc.} = ref object of Event
  origin* {.importc.}: cstring
  source* {.importc.}: Window
var MessageEventOrigin* {.importc: "MessageEvent.origin", nodecl.}: cstring
var MessageEventSource* {.importc: "MessageEvent.source", nodecl.}: Window

type MimeType* {.importc.} = ref object of RootObj
  description* {.importc.}: cstring
  suffixes* {.importc.}: cstring
  xType* {.importc: "type".}: cstring
proc newMimeType*(): MimeType {.importcpp: "new MimeType".}

type MimeTypeArray* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc newMimeTypeArray*(): MimeTypeArray {.importcpp: "new MimeTypeArray".}

type MouseWheelEvent* {.importc.} = ref object of MouseEvent
  wheelDelta* {.importc.}: float
  wheelDeltaX* {.importc.}: float
  wheelDeltaY* {.importc.}: float
proc initMouseWheelEvent*(self: MouseWheelEvent, typeArg: cstring,
    canBubbleArg: bool, cancelableArg: bool, viewArg: Window, detailArg: float,
    screenXArg: float, screenYArg: float, clientXArg: float, clientYArg: float,
    buttonArg: float, relatedTargetArg: EventTarget, modifiersListArg: cstring,
    wheelDeltaArg: float): void {.importcpp.}
var MouseWheelEventWheelDelta* {.importc: "MouseWheelEvent.wheelDelta",
    nodecl.}: float
var MouseWheelEventWheelDeltaX* {.importc: "MouseWheelEvent.wheelDeltaX",
    nodecl.}: float
var MouseWheelEventWheelDeltaY* {.importc: "MouseWheelEvent.wheelDeltaY",
    nodecl.}: float
proc MouseWheelEventInitMouseWheelEvent*(typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, viewArg: Window, detailArg: float, screenXArg: float,
    screenYArg: float, clientXArg: float, clientYArg: float, buttonArg: float,
    relatedTargetArg: EventTarget, modifiersListArg: cstring,
    wheelDeltaArg: float): void {.importc: "MouseWheelEvent.initMouseWheelEvent".}

type MutationEvent* {.importc.} = ref object of Event
  attrChange* {.importc.}: float
  attrName* {.importc.}: cstring
  newValue* {.importc.}: cstring
  prevValue* {.importc.}: cstring
  relatedNode* {.importc.}: Node
  ADDITION* {.importc.}: float
  MODIFICATION* {.importc.}: float
  REMOVAL* {.importc.}: float
proc newMutationEvent*(): MutationEvent {.importcpp: "new MutationEvent".}
proc initMutationEvent*(self: MutationEvent, typeArg: cstring,
    canBubbleArg: bool, cancelableArg: bool, relatedNodeArg: Node,
    prevValueArg: cstring, newValueArg: cstring, attrNameArg: cstring,
    attrChangeArg: float): void {.importcpp.}
var MutationEventADDITION* {.importc: "MutationEvent.ADDITION", nodecl.}: float
var MutationEventMODIFICATION* {.importc: "MutationEvent.MODIFICATION",
    nodecl.}: float
var MutationEventREMOVAL* {.importc: "MutationEvent.REMOVAL", nodecl.}: float

type MutationCallback* {.importc.} = ref object of RootObj
proc newMutationCallback*(): MutationCallback {.importcpp: "new MutationCallback".}

type MutationObserver* {.importc.} = ref object of RootObj
proc newMutationObserver*(callback: MutationCallback): MutationObserver {.importcpp: "new MutationObserver(@)".}
proc disconnect*(self: MutationObserver): void {.importcpp.}
proc observe*(self: MutationObserver, target: Node,
    options: MutationObserverInit): void {.importcpp.}

type MutationRecord* {.importc.} = ref object of RootObj
  addedNodes* {.importc.}: NodeList
  attributeName* {.importc.}: cstring
  attributeNamespace* {.importc.}: cstring
  nextSibling* {.importc.}: Node
  oldValue* {.importc.}: cstring
  previousSibling* {.importc.}: Node
  removedNodes* {.importc.}: NodeList
  target* {.importc.}: Node
  xType* {.importc: "type".}: cstring
proc newMutationRecord*(): MutationRecord {.importcpp: "new MutationRecord".}

type NavigationEvent* {.importc.} = ref object of Event
  uri* {.importc.}: cstring
proc newNavigationEvent*(): NavigationEvent {.importcpp: "new NavigationEvent".}

type NavigationCompletedEvent* {.importc.} = ref object of NavigationEvent
  isSuccess* {.importc.}: bool
  webErrorStatus* {.importc.}: float
proc newNavigationCompletedEvent*(): NavigationCompletedEvent {.importcpp: "new NavigationCompletedEvent".}

type NavigationEventWithReferrer* {.importc.} = ref object of NavigationEvent
  referer* {.importc.}: cstring
proc newNavigationEventWithReferrer*(): NavigationEventWithReferrer {.importcpp: "new NavigationEventWithReferrer".}

type OES_element_index_uint* {.importc.} = ref object of RootObj
proc newOES_element_index_uint*(): OES_element_index_uint {.importcpp: "new OES_element_index_uint".}

type OES_standard_derivatives* {.importc.} = ref object of RootObj
  FRAGMENT_SHADER_DERIVATIVE_HINT_OES* {.importc.}: float
proc newOES_standard_derivatives*(): OES_standard_derivatives {.importcpp: "new OES_standard_derivatives".}
var OES_standard_derivativesFRAGMENT_SHADER_DERIVATIVE_HINT_OES *
  {.importc: "OES_standard_derivatives.FRAGMENT_SHADER_DERIVATIVE_HINT_OES",
    nodecl.}: float

type OES_texture_float* {.importc.} = ref object of RootObj
proc newOES_texture_float*(): OES_texture_float {.importcpp: "new OES_texture_float".}

type OES_texture_float_linear* {.importc.} = ref object of RootObj
proc newOES_texture_float_linear*(): OES_texture_float_linear {.importcpp: "new OES_texture_float_linear".}

type OfflineAudioCompletionEvent* {.importc.} = ref object of Event
  renderedBuffer* {.importc.}: AudioBuffer
proc newOfflineAudioCompletionEvent*(): OfflineAudioCompletionEvent {.importcpp: "new OfflineAudioCompletionEvent".}

type OfflineAudioContext* {.importc.} = ref object of AudioContext
proc newOfflineAudioContext*(numberOfChannels: float, length: float,
    sampleRate: float): OfflineAudioContext {.importcpp: "new OfflineAudioContext(@)".}
proc startRendering*(self: OfflineAudioContext): void {.importcpp.}
proc addEventListener*(self: OfflineAudioContext, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: OfflineAudioContext, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type PageTransitionEvent* {.importc.} = ref object of Event
  persisted* {.importc.}: bool
var PageTransitionEventPersisted* {.importc: "PageTransitionEvent.persisted", nodecl.}: bool

type PerfWidgetExternal* {.importc.} = ref object of RootObj
  activeNetworkRequestCount* {.importc.}: float
  averageFrameTime* {.importc.}: float
  averagePaintTime* {.importc.}: float
  extraInformationEnabled* {.importc.}: bool
  independentRenderingEnabled* {.importc.}: bool
  irDisablingContentString* {.importc.}: cstring
  irStatusAvailable* {.importc.}: bool
  maxCpuSpeed* {.importc.}: float
  paintRequestsPerSecond* {.importc.}: float
  performanceCounter* {.importc.}: float
  performanceCounterFrequency* {.importc.}: float
proc newPerfWidgetExternal*(): PerfWidgetExternal {.importcpp: "new PerfWidgetExternal".}
proc addEventListener*(self: PerfWidgetExternal, eventType: cstring,
    callback: Function): void {.importcpp.}
proc getMemoryUsage*(self: PerfWidgetExternal): float {.importcpp.}
proc getProcessCpuUsage*(self: PerfWidgetExternal): float {.importcpp.}
proc removeEventListener*(self: PerfWidgetExternal, eventType: cstring,
    callback: Function): void {.importcpp.}
proc repositionWindow*(self: PerfWidgetExternal, x: float,
    y: float): void {.importcpp.}
proc resizeWindow*(self: PerfWidgetExternal, width: float,
    height: float): void {.importcpp.}

type PerformanceEntry* {.importc.} = ref object of RootObj
  duration* {.importc.}: float
  entryType* {.importc.}: cstring
  name* {.importc.}: cstring
  startTime* {.importc.}: float
proc newPerformanceEntry*(): PerformanceEntry {.importcpp: "new PerformanceEntry".}

type PerformanceMark* {.importc.} = ref object of PerformanceEntry
proc newPerformanceMark*(): PerformanceMark {.importcpp: "new PerformanceMark".}

type PerformanceMeasure* {.importc.} = ref object of PerformanceEntry
proc newPerformanceMeasure*(): PerformanceMeasure {.importcpp: "new PerformanceMeasure".}

type PerformanceNavigationTiming* {.importc.} = ref object of PerformanceEntry
  connectEnd* {.importc.}: float
  connectStart* {.importc.}: float
  domComplete* {.importc.}: float
  domContentLoadedEventEnd* {.importc.}: float
  domContentLoadedEventStart* {.importc.}: float
  domInteractive* {.importc.}: float
  domLoading* {.importc.}: float
  domainLookupEnd* {.importc.}: float
  domainLookupStart* {.importc.}: float
  fetchStart* {.importc.}: float
  loadEventEnd* {.importc.}: float
  loadEventStart* {.importc.}: float
  navigationStart* {.importc.}: float
  redirectCount* {.importc.}: float
  redirectEnd* {.importc.}: float
  redirectStart* {.importc.}: float
  requestStart* {.importc.}: float
  responseEnd* {.importc.}: float
  responseStart* {.importc.}: float
  xType* {.importc: "type".}: cstring
  unloadEventEnd* {.importc.}: float
  unloadEventStart* {.importc.}: float
proc newPerformanceNavigationTiming*(): PerformanceNavigationTiming {.importcpp: "new PerformanceNavigationTiming".}

type PerformanceResourceTiming* {.importc.} = ref object of PerformanceEntry
  connectEnd* {.importc.}: float
  connectStart* {.importc.}: float
  domainLookupEnd* {.importc.}: float
  domainLookupStart* {.importc.}: float
  fetchStart* {.importc.}: float
  initiatorType* {.importc.}: cstring
  redirectEnd* {.importc.}: float
  redirectStart* {.importc.}: float
  requestStart* {.importc.}: float
  responseEnd* {.importc.}: float
  responseStart* {.importc.}: float
proc newPerformanceResourceTiming*(): PerformanceResourceTiming {.importcpp: "new PerformanceResourceTiming".}

type PermissionRequest* {.importc.} = ref object of DeferredPermissionRequest
  state* {.importc.}: cstring
proc newPermissionRequest*(): PermissionRequest {.importcpp: "new PermissionRequest".}
proc xDefer*(self: PermissionRequest): void {.importcpp: "defer".}

type PermissionRequestedEvent* {.importc.} = ref object of Event
  permissionRequest* {.importc.}: PermissionRequest
proc newPermissionRequestedEvent*(): PermissionRequestedEvent {.importcpp: "new PermissionRequestedEvent".}

type PluginArray* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc newPluginArray*(): PluginArray {.importcpp: "new PluginArray".}
proc refresh*(self: PluginArray, reload: bool): void {.importcpp.}

type PointerEvent* {.importc.} = ref object of MouseEvent
  height* {.importc.}: float
  hwTimestamp* {.importc.}: float
  isPrimary* {.importc.}: bool
  pointerId* {.importc.}: float
  pressure* {.importc.}: float
  rotation* {.importc.}: float
  tiltX* {.importc.}: float
  tiltY* {.importc.}: float
  width* {.importc.}: float
proc getCurrentPoint*(self: PointerEvent, element: Element): void {.importcpp.}
proc getIntermediatePoints*(self: PointerEvent,
    element: Element): void {.importcpp.}
var PointerEventHeight* {.importc: "PointerEvent.height", nodecl.}: float
var PointerEventHwTimestamp* {.importc: "PointerEvent.hwTimestamp",
    nodecl.}: float
var PointerEventIsPrimary* {.importc: "PointerEvent.isPrimary", nodecl.}: bool
var PointerEventPointerId* {.importc: "PointerEvent.pointerId", nodecl.}: float
var PointerEventPressure* {.importc: "PointerEvent.pressure", nodecl.}: float
var PointerEventRotation* {.importc: "PointerEvent.rotation", nodecl.}: float
var PointerEventTiltX* {.importc: "PointerEvent.tiltX", nodecl.}: float
var PointerEventTiltY* {.importc: "PointerEvent.tiltY", nodecl.}: float
var PointerEventWidth* {.importc: "PointerEvent.width", nodecl.}: float
proc PointerEventGetCurrentPoint*(element: Element): void {.importc: "PointerEvent.getCurrentPoint".}
proc PointerEventGetIntermediatePoints*(
  element: Element): void {.importc: "PointerEvent.getIntermediatePoints".}

type PopStateEvent* {.importc.} = ref object of Event

type Position* {.importc.} = ref object of RootObj
  coords* {.importc.}: Coordinates
  timestamp* {.importc.}: float
proc newPosition*(): Position {.importcpp: "new Position".}

type PositionError* {.importc.} = ref object of RootObj
  code* {.importc.}: float
  message* {.importc.}: cstring
  PERMISSION_DENIED* {.importc.}: float
  POSITION_UNAVAILABLE* {.importc.}: float
  TIMEOUT* {.importc.}: float
proc newPositionError*(): PositionError {.importcpp: "new PositionError".}
proc toString*(self: PositionError): cstring {.importcpp.}
var PositionErrorPERMISSION_DENIED* {.importc: "PositionError.PERMISSION_DENIED",
    nodecl.}: float
var PositionErrorPOSITION_UNAVAILABLE* {.importc: "PositionError.POSITION_UNAVAILABLE",
    nodecl.}: float
var PositionErrorTIMEOUT* {.importc: "PositionError.TIMEOUT", nodecl.}: float

type ProgressEvent* {.importc.} = ref object of Event
  lengthComputable* {.importc.}: bool
  loaded* {.importc.}: float
  total* {.importc.}: float
proc initProgressEvent*(self: ProgressEvent, typeArg: cstring,
    canBubbleArg: bool, cancelableArg: bool, lengthComputableArg: bool,
    loadedArg: float, totalArg: float): void {.importcpp.}
var ProgressEventLengthComputable* {.importc: "ProgressEvent.lengthComputable", nodecl.}: bool
var ProgressEventLoaded* {.importc: "ProgressEvent.loaded", nodecl.}: float
var ProgressEventTotal* {.importc: "ProgressEvent.total", nodecl.}: float
proc ProgressEventInitProgressEvent*(typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, lengthComputableArg: bool, loadedArg: float,
    totalArg: float): void {.importc: "ProgressEvent.initProgressEvent".}

type SVGAnimatedString* {.importc.} = ref object of RootObj
  animVal* {.importc.}: cstring
  baseVal* {.importc.}: cstring
var SVGAnimatedStringAnimVal* {.importc: "SVGAnimatedString.animVal",
    nodecl.}: cstring
var SVGAnimatedStringBaseVal* {.importc: "SVGAnimatedString.baseVal",
    nodecl.}: cstring

type SVGAElement* {.importc.} = ref object of SVGElement
  target* {.importc.}: SVGAnimatedString
proc newSVGAElement*(): SVGAElement {.importcpp: "new SVGAElement".}
proc addEventListener*(self: SVGAElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGAElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGAnimatedAngle* {.importc.} = ref object of RootObj
  animVal* {.importc.}: SVGAngle
  baseVal* {.importc.}: SVGAngle
proc newSVGAnimatedAngle*(): SVGAnimatedAngle {.importcpp: "new SVGAnimatedAngle".}

type SVGAnimatedBoolean* {.importc.} = ref object of RootObj
  animVal* {.importc.}: bool
  baseVal* {.importc.}: bool
proc newSVGAnimatedBoolean*(): SVGAnimatedBoolean {.importcpp: "new SVGAnimatedBoolean".}

type SVGAnimatedEnumeration* {.importc.} = ref object of RootObj
  animVal* {.importc.}: float
  baseVal* {.importc.}: float
proc newSVGAnimatedEnumeration*(): SVGAnimatedEnumeration {.importcpp: "new SVGAnimatedEnumeration".}

type SVGAnimatedInteger* {.importc.} = ref object of RootObj
  animVal* {.importc.}: float
  baseVal* {.importc.}: float
proc newSVGAnimatedInteger*(): SVGAnimatedInteger {.importcpp: "new SVGAnimatedInteger".}

type SVGLengthList* {.importc.} = ref object of RootObj
  numberOfItems* {.importc.}: float
proc appendItem*(self: SVGLengthList, newItem: SVGLength): SVGLength {.importcpp.}
proc clear*(self: SVGLengthList): void {.importcpp.}
proc getItem*(self: SVGLengthList, index: float): SVGLength {.importcpp.}
proc initialize*(self: SVGLengthList, newItem: SVGLength): SVGLength {.importcpp.}
proc insertItemBefore*(self: SVGLengthList, newItem: SVGLength,
    index: float): SVGLength {.importcpp.}
proc removeItem*(self: SVGLengthList, index: float): SVGLength {.importcpp.}
proc replaceItem*(self: SVGLengthList, newItem: SVGLength,
    index: float): SVGLength {.importcpp.}
var SVGLengthListNumberOfItems* {.importc: "SVGLengthList.numberOfItems",
    nodecl.}: float
proc SVGLengthListAppendItem*(newItem: SVGLength): SVGLength {.importc: "SVGLengthList.appendItem".}
proc SVGLengthListClear*(): void {.importc: "SVGLengthList.clear".}
proc SVGLengthListGetItem*(index: float): SVGLength {.importc: "SVGLengthList.getItem".}
proc SVGLengthListInitialize*(newItem: SVGLength): SVGLength {.importc: "SVGLengthList.initialize".}
proc SVGLengthListInsertItemBefore*(newItem: SVGLength,
    index: float): SVGLength {.importc: "SVGLengthList.insertItemBefore".}
proc SVGLengthListRemoveItem*(index: float): SVGLength {.importc: "SVGLengthList.removeItem".}
proc SVGLengthListReplaceItem*(newItem: SVGLength,
    index: float): SVGLength {.importc: "SVGLengthList.replaceItem".}

type SVGAnimatedLengthList* {.importc.} = ref object of RootObj
  animVal* {.importc.}: SVGLengthList
  baseVal* {.importc.}: SVGLengthList
proc newSVGAnimatedLengthList*(): SVGAnimatedLengthList {.importcpp: "new SVGAnimatedLengthList".}

type SVGAnimatedNumber* {.importc.} = ref object of RootObj
  animVal* {.importc.}: float
  baseVal* {.importc.}: float
proc newSVGAnimatedNumber*(): SVGAnimatedNumber {.importcpp: "new SVGAnimatedNumber".}

type SVGNumberList* {.importc.} = ref object of RootObj
  numberOfItems* {.importc.}: float
proc appendItem*(self: SVGNumberList, newItem: SVGNumber): SVGNumber {.importcpp.}
proc clear*(self: SVGNumberList): void {.importcpp.}
proc getItem*(self: SVGNumberList, index: float): SVGNumber {.importcpp.}
proc initialize*(self: SVGNumberList, newItem: SVGNumber): SVGNumber {.importcpp.}
proc insertItemBefore*(self: SVGNumberList, newItem: SVGNumber,
    index: float): SVGNumber {.importcpp.}
proc removeItem*(self: SVGNumberList, index: float): SVGNumber {.importcpp.}
proc replaceItem*(self: SVGNumberList, newItem: SVGNumber,
    index: float): SVGNumber {.importcpp.}
var SVGNumberListNumberOfItems* {.importc: "SVGNumberList.numberOfItems",
    nodecl.}: float
proc SVGNumberListAppendItem*(newItem: SVGNumber): SVGNumber {.importc: "SVGNumberList.appendItem".}
proc SVGNumberListClear*(): void {.importc: "SVGNumberList.clear".}
proc SVGNumberListGetItem*(index: float): SVGNumber {.importc: "SVGNumberList.getItem".}
proc SVGNumberListInitialize*(newItem: SVGNumber): SVGNumber {.importc: "SVGNumberList.initialize".}
proc SVGNumberListInsertItemBefore*(newItem: SVGNumber,
    index: float): SVGNumber {.importc: "SVGNumberList.insertItemBefore".}
proc SVGNumberListRemoveItem*(index: float): SVGNumber {.importc: "SVGNumberList.removeItem".}
proc SVGNumberListReplaceItem*(newItem: SVGNumber,
    index: float): SVGNumber {.importc: "SVGNumberList.replaceItem".}

type SVGAnimatedNumberList* {.importc.} = ref object of RootObj
  animVal* {.importc.}: SVGNumberList
  baseVal* {.importc.}: SVGNumberList
proc newSVGAnimatedNumberList*(): SVGAnimatedNumberList {.importcpp: "new SVGAnimatedNumberList".}

type SVGPreserveAspectRatio* {.importc.} = ref object of RootObj
  align* {.importc.}: float
  meetOrSlice* {.importc.}: float
  SVG_MEETORSLICE_MEET* {.importc.}: float
  SVG_MEETORSLICE_SLICE* {.importc.}: float
  SVG_MEETORSLICE_UNKNOWN* {.importc.}: float
  SVG_PRESERVEASPECTRATIO_NONE* {.importc.}: float
  SVG_PRESERVEASPECTRATIO_UNKNOWN* {.importc.}: float
  SVG_PRESERVEASPECTRATIO_XMAXYMAX* {.importc.}: float
  SVG_PRESERVEASPECTRATIO_XMAXYMID* {.importc.}: float
  SVG_PRESERVEASPECTRATIO_XMAXYMIN* {.importc.}: float
  SVG_PRESERVEASPECTRATIO_XMIDYMAX* {.importc.}: float
  SVG_PRESERVEASPECTRATIO_XMIDYMID* {.importc.}: float
  SVG_PRESERVEASPECTRATIO_XMIDYMIN* {.importc.}: float
  SVG_PRESERVEASPECTRATIO_XMINYMAX* {.importc.}: float
  SVG_PRESERVEASPECTRATIO_XMINYMID* {.importc.}: float
  SVG_PRESERVEASPECTRATIO_XMINYMIN* {.importc.}: float
var SVGPreserveAspectRatioAlign* {.importc: "SVGPreserveAspectRatio.align",
    nodecl.}: float
var SVGPreserveAspectRatioMeetOrSlice* {.importc: "SVGPreserveAspectRatio.meetOrSlice",
    nodecl.}: float
var SVGPreserveAspectRatioSVG_MEETORSLICE_MEET *
  {.importc: "SVGPreserveAspectRatio.SVG_MEETORSLICE_MEET", nodecl.}: float
var SVGPreserveAspectRatioSVG_MEETORSLICE_SLICE *
  {.importc: "SVGPreserveAspectRatio.SVG_MEETORSLICE_SLICE", nodecl.}: float
var SVGPreserveAspectRatioSVG_MEETORSLICE_UNKNOWN *
  {.importc: "SVGPreserveAspectRatio.SVG_MEETORSLICE_UNKNOWN", nodecl.}: float
var SVGPreserveAspectRatioSVG_PRESERVEASPECTRATIO_NONE *
  {.importc: "SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_NONE",
    nodecl.}: float
var SVGPreserveAspectRatioSVG_PRESERVEASPECTRATIO_UNKNOWN *
  {.importc: "SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_UNKNOWN",
    nodecl.}: float
var SVGPreserveAspectRatioSVG_PRESERVEASPECTRATIO_XMAXYMAX *
  {.importc: "SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMAX",
    nodecl.}: float
var SVGPreserveAspectRatioSVG_PRESERVEASPECTRATIO_XMAXYMID *
  {.importc: "SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMID",
    nodecl.}: float
var SVGPreserveAspectRatioSVG_PRESERVEASPECTRATIO_XMAXYMIN *
  {.importc: "SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMAXYMIN",
    nodecl.}: float
var SVGPreserveAspectRatioSVG_PRESERVEASPECTRATIO_XMIDYMAX *
  {.importc: "SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMAX",
    nodecl.}: float
var SVGPreserveAspectRatioSVG_PRESERVEASPECTRATIO_XMIDYMID *
  {.importc: "SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMID",
    nodecl.}: float
var SVGPreserveAspectRatioSVG_PRESERVEASPECTRATIO_XMIDYMIN *
  {.importc: "SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMIDYMIN",
    nodecl.}: float
var SVGPreserveAspectRatioSVG_PRESERVEASPECTRATIO_XMINYMAX *
  {.importc: "SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMAX",
    nodecl.}: float
var SVGPreserveAspectRatioSVG_PRESERVEASPECTRATIO_XMINYMID *
  {.importc: "SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMID",
    nodecl.}: float
var SVGPreserveAspectRatioSVG_PRESERVEASPECTRATIO_XMINYMIN *
  {.importc: "SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_XMINYMIN",
    nodecl.}: float

type SVGAnimatedPreserveAspectRatio* {.importc.} = ref object of RootObj
  animVal* {.importc.}: SVGPreserveAspectRatio
  baseVal* {.importc.}: SVGPreserveAspectRatio
proc newSVGAnimatedPreserveAspectRatio*(): SVGAnimatedPreserveAspectRatio {.importcpp: "new SVGAnimatedPreserveAspectRatio".}

type SVGAnimatedRect* {.importc.} = ref object of RootObj
  animVal* {.importc.}: SVGRect
  baseVal* {.importc.}: SVGRect
proc newSVGAnimatedRect*(): SVGAnimatedRect {.importcpp: "new SVGAnimatedRect".}

type SVGTransformList* {.importc.} = ref object of RootObj
  numberOfItems* {.importc.}: float
proc appendItem*(self: SVGTransformList,
    newItem: SVGTransform): SVGTransform {.importcpp.}
proc clear*(self: SVGTransformList): void {.importcpp.}
proc consolidate*(self: SVGTransformList): SVGTransform {.importcpp.}
proc createSVGTransformFromMatrix*(self: SVGTransformList,
    matrix: SVGMatrix): SVGTransform {.importcpp.}
proc getItem*(self: SVGTransformList, index: float): SVGTransform {.importcpp.}
proc initialize*(self: SVGTransformList,
    newItem: SVGTransform): SVGTransform {.importcpp.}
proc insertItemBefore*(self: SVGTransformList, newItem: SVGTransform,
    index: float): SVGTransform {.importcpp.}
proc removeItem*(self: SVGTransformList,
    index: float): SVGTransform {.importcpp.}
proc replaceItem*(self: SVGTransformList, newItem: SVGTransform,
    index: float): SVGTransform {.importcpp.}
var SVGTransformListNumberOfItems* {.importc: "SVGTransformList.numberOfItems",
    nodecl.}: float
proc SVGTransformListAppendItem*(newItem: SVGTransform): SVGTransform {.importc: "SVGTransformList.appendItem".}
proc SVGTransformListClear*(): void {.importc: "SVGTransformList.clear".}
proc SVGTransformListConsolidate*(): SVGTransform {.importc: "SVGTransformList.consolidate".}
proc SVGTransformListCreateSVGTransformFromMatrix*(
  matrix: SVGMatrix): SVGTransform {.importc: "SVGTransformList.createSVGTransformFromMatrix".}
proc SVGTransformListGetItem*(index: float): SVGTransform {.importc: "SVGTransformList.getItem".}
proc SVGTransformListInitialize*(newItem: SVGTransform): SVGTransform {.importc: "SVGTransformList.initialize".}
proc SVGTransformListInsertItemBefore*(newItem: SVGTransform,
    index: float): SVGTransform {.importc: "SVGTransformList.insertItemBefore".}
proc SVGTransformListRemoveItem*(index: float): SVGTransform {.importc: "SVGTransformList.removeItem".}
proc SVGTransformListReplaceItem*(newItem: SVGTransform,
    index: float): SVGTransform {.importc: "SVGTransformList.replaceItem".}

type SVGAnimatedTransformList* {.importc.} = ref object of RootObj
  animVal* {.importc.}: SVGTransformList
  baseVal* {.importc.}: SVGTransformList
proc newSVGAnimatedTransformList*(): SVGAnimatedTransformList {.importcpp: "new SVGAnimatedTransformList".}

type SVGCircleElement* {.importc.} = ref object of SVGElement
  cx* {.importc.}: SVGAnimatedLength
  cy* {.importc.}: SVGAnimatedLength
  r* {.importc.}: SVGAnimatedLength
proc newSVGCircleElement*(): SVGCircleElement {.importcpp: "new SVGCircleElement".}
proc addEventListener*(self: SVGCircleElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGCircleElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGClipPathElement* {.importc.} = ref object of SVGElement
  clipPathUnits* {.importc.}: SVGAnimatedEnumeration
proc newSVGClipPathElement*(): SVGClipPathElement {.importcpp: "new SVGClipPathElement".}
proc addEventListener*(self: SVGClipPathElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGClipPathElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGComponentTransferFunctionElement *
  {.importc.} = ref object of SVGElement
  amplitude* {.importc.}: SVGAnimatedNumber
  exponent* {.importc.}: SVGAnimatedNumber
  intercept* {.importc.}: SVGAnimatedNumber
  offset* {.importc.}: SVGAnimatedNumber
  slope* {.importc.}: SVGAnimatedNumber
  tableValues* {.importc.}: SVGAnimatedNumberList
  xType* {.importc: "type".}: SVGAnimatedEnumeration
  SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE * {.importc.}: float
  SVG_FECOMPONENTTRANSFER_TYPE_GAMMA* {.importc.}: float
  SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY * {.importc.}: float
  SVG_FECOMPONENTTRANSFER_TYPE_LINEAR* {.importc.}: float
  SVG_FECOMPONENTTRANSFER_TYPE_TABLE* {.importc.}: float
  SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN * {.importc.}: float
proc newSVGComponentTransferFunctionElement*(): SVGComponentTransferFunctionElement {.importcpp: "new SVGComponentTransferFunctionElement".}
var SVGComponentTransferFunctionElementSVG_FECOMPONENTTRANSFER_TYPE_DISCRETE *
  {.importc: "SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE",
    nodecl.}: float
var SVGComponentTransferFunctionElementSVG_FECOMPONENTTRANSFER_TYPE_GAMMA *
  {.importc: "SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_GAMMA",
    nodecl.}: float
var SVGComponentTransferFunctionElementSVG_FECOMPONENTTRANSFER_TYPE_IDENTITY *
  {.importc: "SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY",
    nodecl.}: float
var SVGComponentTransferFunctionElementSVG_FECOMPONENTTRANSFER_TYPE_LINEAR *
  {.importc: "SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_LINEAR",
    nodecl.}: float
var SVGComponentTransferFunctionElementSVG_FECOMPONENTTRANSFER_TYPE_TABLE *
  {.importc: "SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_TABLE",
    nodecl.}: float
var SVGComponentTransferFunctionElementSVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN *
  {.importc: "SVGComponentTransferFunctionElement.SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN",
    nodecl.}: float

type SVGDefsElement* {.importc.} = ref object of SVGElement
proc newSVGDefsElement*(): SVGDefsElement {.importcpp: "new SVGDefsElement".}
proc addEventListener*(self: SVGDefsElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGDefsElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGDescElement* {.importc.} = ref object of SVGElement
proc newSVGDescElement*(): SVGDescElement {.importcpp: "new SVGDescElement".}
proc addEventListener*(self: SVGDescElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGDescElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type
  SVGUseElement* {.importc.} = ref object of SVGElement
    animatedInstanceRoot* {.importc.}: SVGElementInstance
    height* {.importc.}: SVGAnimatedLength
    instanceRoot* {.importc.}: SVGElementInstance
    width* {.importc.}: SVGAnimatedLength
    x* {.importc.}: SVGAnimatedLength
    y* {.importc.}: SVGAnimatedLength
  SVGElementInstanceList* {.importc.} = ref object of RootObj
    length* {.importc.}: float
  SVGElementInstance* {.importc.} = ref object of EventTarget
    childNodes* {.importc.}: SVGElementInstanceList
    correspondingElement* {.importc.}: SVGElement
    correspondingUseElement* {.importc.}: SVGUseElement
    firstChild* {.importc.}: SVGElementInstance
    lastChild* {.importc.}: SVGElementInstance
    nextSibling* {.importc.}: SVGElementInstance
    parentNode* {.importc.}: SVGElementInstance
    previousSibling* {.importc.}: SVGElementInstance
proc addEventListener*(self: SVGUseElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGUseElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var SVGUseElementAnimatedInstanceRoot* {.importc: "SVGUseElement.animatedInstanceRoot",
    nodecl.}: SVGElementInstance
var SVGUseElementHeight* {.importc: "SVGUseElement.height",
    nodecl.}: SVGAnimatedLength
var SVGUseElementInstanceRoot* {.importc: "SVGUseElement.instanceRoot",
    nodecl.}: SVGElementInstance
var SVGUseElementWidth* {.importc: "SVGUseElement.width",
    nodecl.}: SVGAnimatedLength
var SVGUseElementX* {.importc: "SVGUseElement.x", nodecl.}: SVGAnimatedLength
var SVGUseElementY* {.importc: "SVGUseElement.y", nodecl.}: SVGAnimatedLength
proc SVGUseElementAddEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc: "SVGUseElement.addEventListener".}
proc SVGUseElementAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "SVGUseElement.addEventListener".}
proc item*(self: SVGElementInstanceList,
    index: float): SVGElementInstance {.importcpp.}
var SVGElementInstanceListLength* {.importc: "SVGElementInstanceList.length",
    nodecl.}: float
proc SVGElementInstanceListItem*(index: float): SVGElementInstance {.importc: "SVGElementInstanceList.item".}
proc newSVGElementInstance*(): SVGElementInstance {.importcpp: "new SVGElementInstance".}

type SVGEllipseElement* {.importc.} = ref object of SVGElement
  cx* {.importc.}: SVGAnimatedLength
  cy* {.importc.}: SVGAnimatedLength
  rx* {.importc.}: SVGAnimatedLength
  ry* {.importc.}: SVGAnimatedLength
proc newSVGEllipseElement*(): SVGEllipseElement {.importcpp: "new SVGEllipseElement".}
proc addEventListener*(self: SVGEllipseElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGEllipseElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGFEBlendElement* {.importc.} = ref object of SVGElement
  in1* {.importc.}: SVGAnimatedString
  in2* {.importc.}: SVGAnimatedString
  mode* {.importc.}: SVGAnimatedEnumeration
  SVG_FEBLEND_MODE_COLOR* {.importc.}: float
  SVG_FEBLEND_MODE_COLOR_BURN* {.importc.}: float
  SVG_FEBLEND_MODE_COLOR_DODGE* {.importc.}: float
  SVG_FEBLEND_MODE_DARKEN* {.importc.}: float
  SVG_FEBLEND_MODE_DIFFERENCE* {.importc.}: float
  SVG_FEBLEND_MODE_EXCLUSION* {.importc.}: float
  SVG_FEBLEND_MODE_HARD_LIGHT* {.importc.}: float
  SVG_FEBLEND_MODE_HUE* {.importc.}: float
  SVG_FEBLEND_MODE_LIGHTEN* {.importc.}: float
  SVG_FEBLEND_MODE_LUMINOSITY* {.importc.}: float
  SVG_FEBLEND_MODE_MULTIPLY* {.importc.}: float
  SVG_FEBLEND_MODE_NORMAL* {.importc.}: float
  SVG_FEBLEND_MODE_OVERLAY* {.importc.}: float
  SVG_FEBLEND_MODE_SATURATION* {.importc.}: float
  SVG_FEBLEND_MODE_SCREEN* {.importc.}: float
  SVG_FEBLEND_MODE_SOFT_LIGHT* {.importc.}: float
  SVG_FEBLEND_MODE_UNKNOWN* {.importc.}: float
proc newSVGFEBlendElement*(): SVGFEBlendElement {.importcpp: "new SVGFEBlendElement".}
proc addEventListener*(self: SVGFEBlendElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFEBlendElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var SVGFEBlendElementSVG_FEBLEND_MODE_COLOR *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_COLOR", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_COLOR_BURN *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_COLOR_BURN", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_COLOR_DODGE *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_COLOR_DODGE", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_DARKEN *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_DARKEN", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_DIFFERENCE *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_DIFFERENCE", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_EXCLUSION *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_EXCLUSION", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_HARD_LIGHT *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_HARD_LIGHT", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_HUE *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_HUE", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_LIGHTEN *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_LIGHTEN", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_LUMINOSITY *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_LUMINOSITY", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_MULTIPLY *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_MULTIPLY", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_NORMAL *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_NORMAL", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_OVERLAY *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_OVERLAY", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_SATURATION *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_SATURATION", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_SCREEN *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_SCREEN", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_SOFT_LIGHT *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_SOFT_LIGHT", nodecl.}: float
var SVGFEBlendElementSVG_FEBLEND_MODE_UNKNOWN *
  {.importc: "SVGFEBlendElement.SVG_FEBLEND_MODE_UNKNOWN", nodecl.}: float

type SVGFEColorMatrixElement* {.importc.} = ref object of SVGElement
  in1* {.importc.}: SVGAnimatedString
  xType* {.importc: "type".}: SVGAnimatedEnumeration
  values* {.importc.}: SVGAnimatedNumberList
  SVG_FECOLORMATRIX_TYPE_HUEROTATE* {.importc.}: float
  SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA * {.importc.}: float
  SVG_FECOLORMATRIX_TYPE_MATRIX* {.importc.}: float
  SVG_FECOLORMATRIX_TYPE_SATURATE* {.importc.}: float
  SVG_FECOLORMATRIX_TYPE_UNKNOWN* {.importc.}: float
proc newSVGFEColorMatrixElement*(): SVGFEColorMatrixElement {.importcpp: "new SVGFEColorMatrixElement".}
proc addEventListener*(self: SVGFEColorMatrixElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFEColorMatrixElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var SVGFEColorMatrixElementSVG_FECOLORMATRIX_TYPE_HUEROTATE *
  {.importc: "SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_HUEROTATE",
    nodecl.}: float
var SVGFEColorMatrixElementSVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA *
  {.importc: "SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA",
    nodecl.}: float
var SVGFEColorMatrixElementSVG_FECOLORMATRIX_TYPE_MATRIX *
  {.importc: "SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_MATRIX",
    nodecl.}: float
var SVGFEColorMatrixElementSVG_FECOLORMATRIX_TYPE_SATURATE *
  {.importc: "SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_SATURATE",
    nodecl.}: float
var SVGFEColorMatrixElementSVG_FECOLORMATRIX_TYPE_UNKNOWN *
  {.importc: "SVGFEColorMatrixElement.SVG_FECOLORMATRIX_TYPE_UNKNOWN",
    nodecl.}: float

type SVGFEComponentTransferElement* {.importc.} = ref object of SVGElement
  in1* {.importc.}: SVGAnimatedString
proc newSVGFEComponentTransferElement*(): SVGFEComponentTransferElement {.importcpp: "new SVGFEComponentTransferElement".}
proc addEventListener*(self: SVGFEComponentTransferElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFEComponentTransferElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGFECompositeElement* {.importc.} = ref object of SVGElement
  in1* {.importc.}: SVGAnimatedString
  in2* {.importc.}: SVGAnimatedString
  k1* {.importc.}: SVGAnimatedNumber
  k2* {.importc.}: SVGAnimatedNumber
  k3* {.importc.}: SVGAnimatedNumber
  k4* {.importc.}: SVGAnimatedNumber
  operator* {.importc.}: SVGAnimatedEnumeration
  SVG_FECOMPOSITE_OPERATOR_ARITHMETIC* {.importc.}: float
  SVG_FECOMPOSITE_OPERATOR_ATOP* {.importc.}: float
  SVG_FECOMPOSITE_OPERATOR_IN* {.importc.}: float
  SVG_FECOMPOSITE_OPERATOR_OUT* {.importc.}: float
  SVG_FECOMPOSITE_OPERATOR_OVER* {.importc.}: float
  SVG_FECOMPOSITE_OPERATOR_UNKNOWN* {.importc.}: float
  SVG_FECOMPOSITE_OPERATOR_XOR* {.importc.}: float
proc newSVGFECompositeElement*(): SVGFECompositeElement {.importcpp: "new SVGFECompositeElement".}
proc addEventListener*(self: SVGFECompositeElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFECompositeElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var SVGFECompositeElementSVG_FECOMPOSITE_OPERATOR_ARITHMETIC *
  {.importc: "SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_ARITHMETIC",
    nodecl.}: float
var SVGFECompositeElementSVG_FECOMPOSITE_OPERATOR_ATOP *
  {.importc: "SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_ATOP",
    nodecl.}: float
var SVGFECompositeElementSVG_FECOMPOSITE_OPERATOR_IN *
  {.importc: "SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_IN",
    nodecl.}: float
var SVGFECompositeElementSVG_FECOMPOSITE_OPERATOR_OUT *
  {.importc: "SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_OUT",
    nodecl.}: float
var SVGFECompositeElementSVG_FECOMPOSITE_OPERATOR_OVER *
  {.importc: "SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_OVER",
    nodecl.}: float
var SVGFECompositeElementSVG_FECOMPOSITE_OPERATOR_UNKNOWN *
  {.importc: "SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_UNKNOWN",
    nodecl.}: float
var SVGFECompositeElementSVG_FECOMPOSITE_OPERATOR_XOR *
  {.importc: "SVGFECompositeElement.SVG_FECOMPOSITE_OPERATOR_XOR",
    nodecl.}: float

type SVGFEConvolveMatrixElement* {.importc.} = ref object of SVGElement
  bias* {.importc.}: SVGAnimatedNumber
  divisor* {.importc.}: SVGAnimatedNumber
  edgeMode* {.importc.}: SVGAnimatedEnumeration
  in1* {.importc.}: SVGAnimatedString
  kernelMatrix* {.importc.}: SVGAnimatedNumberList
  kernelUnitLengthX* {.importc.}: SVGAnimatedNumber
  kernelUnitLengthY* {.importc.}: SVGAnimatedNumber
  orderX* {.importc.}: SVGAnimatedInteger
  orderY* {.importc.}: SVGAnimatedInteger
  preserveAlpha* {.importc.}: SVGAnimatedBoolean
  targetX* {.importc.}: SVGAnimatedInteger
  targetY* {.importc.}: SVGAnimatedInteger
  SVG_EDGEMODE_DUPLICATE* {.importc.}: float
  SVG_EDGEMODE_NONE* {.importc.}: float
  SVG_EDGEMODE_UNKNOWN* {.importc.}: float
  SVG_EDGEMODE_WRAP* {.importc.}: float
proc newSVGFEConvolveMatrixElement*(): SVGFEConvolveMatrixElement {.importcpp: "new SVGFEConvolveMatrixElement".}
proc addEventListener*(self: SVGFEConvolveMatrixElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFEConvolveMatrixElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var SVGFEConvolveMatrixElementSVG_EDGEMODE_DUPLICATE *
  {.importc: "SVGFEConvolveMatrixElement.SVG_EDGEMODE_DUPLICATE",
    nodecl.}: float
var SVGFEConvolveMatrixElementSVG_EDGEMODE_NONE *
  {.importc: "SVGFEConvolveMatrixElement.SVG_EDGEMODE_NONE", nodecl.}: float
var SVGFEConvolveMatrixElementSVG_EDGEMODE_UNKNOWN *
  {.importc: "SVGFEConvolveMatrixElement.SVG_EDGEMODE_UNKNOWN", nodecl.}: float
var SVGFEConvolveMatrixElementSVG_EDGEMODE_WRAP *
  {.importc: "SVGFEConvolveMatrixElement.SVG_EDGEMODE_WRAP", nodecl.}: float

type SVGFEDiffuseLightingElement* {.importc.} = ref object of SVGElement
  diffuseConstant* {.importc.}: SVGAnimatedNumber
  in1* {.importc.}: SVGAnimatedString
  kernelUnitLengthX* {.importc.}: SVGAnimatedNumber
  kernelUnitLengthY* {.importc.}: SVGAnimatedNumber
  surfaceScale* {.importc.}: SVGAnimatedNumber
proc newSVGFEDiffuseLightingElement*(): SVGFEDiffuseLightingElement {.importcpp: "new SVGFEDiffuseLightingElement".}
proc addEventListener*(self: SVGFEDiffuseLightingElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFEDiffuseLightingElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGFEDisplacementMapElement* {.importc.} = ref object of SVGElement
  in1* {.importc.}: SVGAnimatedString
  in2* {.importc.}: SVGAnimatedString
  scale* {.importc.}: SVGAnimatedNumber
  xChannelSelector* {.importc.}: SVGAnimatedEnumeration
  yChannelSelector* {.importc.}: SVGAnimatedEnumeration
  SVG_CHANNEL_A* {.importc.}: float
  SVG_CHANNEL_B* {.importc.}: float
  SVG_CHANNEL_G* {.importc.}: float
  SVG_CHANNEL_R* {.importc.}: float
  SVG_CHANNEL_UNKNOWN* {.importc.}: float
proc newSVGFEDisplacementMapElement*(): SVGFEDisplacementMapElement {.importcpp: "new SVGFEDisplacementMapElement".}
proc addEventListener*(self: SVGFEDisplacementMapElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFEDisplacementMapElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var SVGFEDisplacementMapElementSVG_CHANNEL_A *
  {.importc: "SVGFEDisplacementMapElement.SVG_CHANNEL_A", nodecl.}: float
var SVGFEDisplacementMapElementSVG_CHANNEL_B *
  {.importc: "SVGFEDisplacementMapElement.SVG_CHANNEL_B", nodecl.}: float
var SVGFEDisplacementMapElementSVG_CHANNEL_G *
  {.importc: "SVGFEDisplacementMapElement.SVG_CHANNEL_G", nodecl.}: float
var SVGFEDisplacementMapElementSVG_CHANNEL_R *
  {.importc: "SVGFEDisplacementMapElement.SVG_CHANNEL_R", nodecl.}: float
var SVGFEDisplacementMapElementSVG_CHANNEL_UNKNOWN *
  {.importc: "SVGFEDisplacementMapElement.SVG_CHANNEL_UNKNOWN", nodecl.}: float

type SVGFEDistantLightElement* {.importc.} = ref object of SVGElement
  azimuth* {.importc.}: SVGAnimatedNumber
  elevation* {.importc.}: SVGAnimatedNumber
proc newSVGFEDistantLightElement*(): SVGFEDistantLightElement {.importcpp: "new SVGFEDistantLightElement".}

type SVGFEFloodElement* {.importc.} = ref object of SVGElement
proc newSVGFEFloodElement*(): SVGFEFloodElement {.importcpp: "new SVGFEFloodElement".}
proc addEventListener*(self: SVGFEFloodElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFEFloodElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGFEFuncAElement* {.importc.} = ref object of SVGComponentTransferFunctionElement
proc newSVGFEFuncAElement*(): SVGFEFuncAElement {.importcpp: "new SVGFEFuncAElement".}

type SVGFEFuncBElement* {.importc.} = ref object of SVGComponentTransferFunctionElement
proc newSVGFEFuncBElement*(): SVGFEFuncBElement {.importcpp: "new SVGFEFuncBElement".}

type SVGFEFuncGElement* {.importc.} = ref object of SVGComponentTransferFunctionElement
proc newSVGFEFuncGElement*(): SVGFEFuncGElement {.importcpp: "new SVGFEFuncGElement".}

type SVGFEFuncRElement* {.importc.} = ref object of SVGComponentTransferFunctionElement
proc newSVGFEFuncRElement*(): SVGFEFuncRElement {.importcpp: "new SVGFEFuncRElement".}

type SVGFEGaussianBlurElement* {.importc.} = ref object of SVGElement
  in1* {.importc.}: SVGAnimatedString
  stdDeviationX* {.importc.}: SVGAnimatedNumber
  stdDeviationY* {.importc.}: SVGAnimatedNumber
proc newSVGFEGaussianBlurElement*(): SVGFEGaussianBlurElement {.importcpp: "new SVGFEGaussianBlurElement".}
proc setStdDeviation*(self: SVGFEGaussianBlurElement, stdDeviationX: float,
    stdDeviationY: float): void {.importcpp.}
proc addEventListener*(self: SVGFEGaussianBlurElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFEGaussianBlurElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGFEImageElement* {.importc.} = ref object of SVGElement
  preserveAspectRatio* {.importc.}: SVGAnimatedPreserveAspectRatio
proc newSVGFEImageElement*(): SVGFEImageElement {.importcpp: "new SVGFEImageElement".}
proc addEventListener*(self: SVGFEImageElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFEImageElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGFEMergeElement* {.importc.} = ref object of SVGElement
proc newSVGFEMergeElement*(): SVGFEMergeElement {.importcpp: "new SVGFEMergeElement".}
proc addEventListener*(self: SVGFEMergeElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFEMergeElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGFEMergeNodeElement* {.importc.} = ref object of SVGElement
  in1* {.importc.}: SVGAnimatedString
proc newSVGFEMergeNodeElement*(): SVGFEMergeNodeElement {.importcpp: "new SVGFEMergeNodeElement".}

type SVGFEMorphologyElement* {.importc.} = ref object of SVGElement
  in1* {.importc.}: SVGAnimatedString
  operator* {.importc.}: SVGAnimatedEnumeration
  radiusX* {.importc.}: SVGAnimatedNumber
  radiusY* {.importc.}: SVGAnimatedNumber
  SVG_MORPHOLOGY_OPERATOR_DILATE* {.importc.}: float
  SVG_MORPHOLOGY_OPERATOR_ERODE* {.importc.}: float
  SVG_MORPHOLOGY_OPERATOR_UNKNOWN* {.importc.}: float
proc newSVGFEMorphologyElement*(): SVGFEMorphologyElement {.importcpp: "new SVGFEMorphologyElement".}
proc addEventListener*(self: SVGFEMorphologyElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFEMorphologyElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var SVGFEMorphologyElementSVG_MORPHOLOGY_OPERATOR_DILATE *
  {.importc: "SVGFEMorphologyElement.SVG_MORPHOLOGY_OPERATOR_DILATE",
    nodecl.}: float
var SVGFEMorphologyElementSVG_MORPHOLOGY_OPERATOR_ERODE *
  {.importc: "SVGFEMorphologyElement.SVG_MORPHOLOGY_OPERATOR_ERODE",
    nodecl.}: float
var SVGFEMorphologyElementSVG_MORPHOLOGY_OPERATOR_UNKNOWN *
  {.importc: "SVGFEMorphologyElement.SVG_MORPHOLOGY_OPERATOR_UNKNOWN",
    nodecl.}: float

type SVGFEOffsetElement* {.importc.} = ref object of SVGElement
  dx* {.importc.}: SVGAnimatedNumber
  dy* {.importc.}: SVGAnimatedNumber
  in1* {.importc.}: SVGAnimatedString
proc newSVGFEOffsetElement*(): SVGFEOffsetElement {.importcpp: "new SVGFEOffsetElement".}
proc addEventListener*(self: SVGFEOffsetElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFEOffsetElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGFEPointLightElement* {.importc.} = ref object of SVGElement
  x* {.importc.}: SVGAnimatedNumber
  y* {.importc.}: SVGAnimatedNumber
  z* {.importc.}: SVGAnimatedNumber
proc newSVGFEPointLightElement*(): SVGFEPointLightElement {.importcpp: "new SVGFEPointLightElement".}

type SVGFESpecularLightingElement* {.importc.} = ref object of SVGElement
  in1* {.importc.}: SVGAnimatedString
  kernelUnitLengthX* {.importc.}: SVGAnimatedNumber
  kernelUnitLengthY* {.importc.}: SVGAnimatedNumber
  specularConstant* {.importc.}: SVGAnimatedNumber
  specularExponent* {.importc.}: SVGAnimatedNumber
  surfaceScale* {.importc.}: SVGAnimatedNumber
proc newSVGFESpecularLightingElement*(): SVGFESpecularLightingElement {.importcpp: "new SVGFESpecularLightingElement".}
proc addEventListener*(self: SVGFESpecularLightingElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFESpecularLightingElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGFESpotLightElement* {.importc.} = ref object of SVGElement
  limitingConeAngle* {.importc.}: SVGAnimatedNumber
  pointsAtX* {.importc.}: SVGAnimatedNumber
  pointsAtY* {.importc.}: SVGAnimatedNumber
  pointsAtZ* {.importc.}: SVGAnimatedNumber
  specularExponent* {.importc.}: SVGAnimatedNumber
  x* {.importc.}: SVGAnimatedNumber
  y* {.importc.}: SVGAnimatedNumber
  z* {.importc.}: SVGAnimatedNumber
proc newSVGFESpotLightElement*(): SVGFESpotLightElement {.importcpp: "new SVGFESpotLightElement".}

type SVGFETileElement* {.importc.} = ref object of SVGElement
  in1* {.importc.}: SVGAnimatedString
proc newSVGFETileElement*(): SVGFETileElement {.importcpp: "new SVGFETileElement".}
proc addEventListener*(self: SVGFETileElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFETileElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGFETurbulenceElement* {.importc.} = ref object of SVGElement
  baseFrequencyX* {.importc.}: SVGAnimatedNumber
  baseFrequencyY* {.importc.}: SVGAnimatedNumber
  numOctaves* {.importc.}: SVGAnimatedInteger
  seed* {.importc.}: SVGAnimatedNumber
  stitchTiles* {.importc.}: SVGAnimatedEnumeration
  xType* {.importc: "type".}: SVGAnimatedEnumeration
  SVG_STITCHTYPE_NOSTITCH* {.importc.}: float
  SVG_STITCHTYPE_STITCH* {.importc.}: float
  SVG_STITCHTYPE_UNKNOWN* {.importc.}: float
  SVG_TURBULENCE_TYPE_FRACTALNOISE* {.importc.}: float
  SVG_TURBULENCE_TYPE_TURBULENCE* {.importc.}: float
  SVG_TURBULENCE_TYPE_UNKNOWN* {.importc.}: float
proc newSVGFETurbulenceElement*(): SVGFETurbulenceElement {.importcpp: "new SVGFETurbulenceElement".}
proc addEventListener*(self: SVGFETurbulenceElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFETurbulenceElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var SVGFETurbulenceElementSVG_STITCHTYPE_NOSTITCH *
  {.importc: "SVGFETurbulenceElement.SVG_STITCHTYPE_NOSTITCH", nodecl.}: float
var SVGFETurbulenceElementSVG_STITCHTYPE_STITCH *
  {.importc: "SVGFETurbulenceElement.SVG_STITCHTYPE_STITCH", nodecl.}: float
var SVGFETurbulenceElementSVG_STITCHTYPE_UNKNOWN *
  {.importc: "SVGFETurbulenceElement.SVG_STITCHTYPE_UNKNOWN", nodecl.}: float
var SVGFETurbulenceElementSVG_TURBULENCE_TYPE_FRACTALNOISE *
  {.importc: "SVGFETurbulenceElement.SVG_TURBULENCE_TYPE_FRACTALNOISE",
    nodecl.}: float
var SVGFETurbulenceElementSVG_TURBULENCE_TYPE_TURBULENCE *
  {.importc: "SVGFETurbulenceElement.SVG_TURBULENCE_TYPE_TURBULENCE",
    nodecl.}: float
var SVGFETurbulenceElementSVG_TURBULENCE_TYPE_UNKNOWN *
  {.importc: "SVGFETurbulenceElement.SVG_TURBULENCE_TYPE_UNKNOWN",
    nodecl.}: float

type SVGFilterElement* {.importc.} = ref object of SVGElement
  filterResX* {.importc.}: SVGAnimatedInteger
  filterResY* {.importc.}: SVGAnimatedInteger
  filterUnits* {.importc.}: SVGAnimatedEnumeration
  height* {.importc.}: SVGAnimatedLength
  primitiveUnits* {.importc.}: SVGAnimatedEnumeration
  width* {.importc.}: SVGAnimatedLength
  x* {.importc.}: SVGAnimatedLength
  y* {.importc.}: SVGAnimatedLength
proc newSVGFilterElement*(): SVGFilterElement {.importcpp: "new SVGFilterElement".}
proc setFilterRes*(self: SVGFilterElement, filterResX: float,
    filterResY: float): void {.importcpp.}
proc addEventListener*(self: SVGFilterElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGFilterElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGForeignObjectElement* {.importc.} = ref object of SVGElement
  height* {.importc.}: SVGAnimatedLength
  width* {.importc.}: SVGAnimatedLength
  x* {.importc.}: SVGAnimatedLength
  y* {.importc.}: SVGAnimatedLength
proc newSVGForeignObjectElement*(): SVGForeignObjectElement {.importcpp: "new SVGForeignObjectElement".}
proc addEventListener*(self: SVGForeignObjectElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGForeignObjectElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGGElement* {.importc.} = ref object of SVGElement
proc newSVGGElement*(): SVGGElement {.importcpp: "new SVGGElement".}
proc addEventListener*(self: SVGGElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGGElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGGradientElement* {.importc.} = ref object of SVGElement
  gradientTransform* {.importc.}: SVGAnimatedTransformList
  gradientUnits* {.importc.}: SVGAnimatedEnumeration
  spreadMethod* {.importc.}: SVGAnimatedEnumeration
  SVG_SPREADMETHOD_PAD* {.importc.}: float
  SVG_SPREADMETHOD_REFLECT* {.importc.}: float
  SVG_SPREADMETHOD_REPEAT* {.importc.}: float
  SVG_SPREADMETHOD_UNKNOWN* {.importc.}: float
proc newSVGGradientElement*(): SVGGradientElement {.importcpp: "new SVGGradientElement".}
proc addEventListener*(self: SVGGradientElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGGradientElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var SVGGradientElementSVG_SPREADMETHOD_PAD *
  {.importc: "SVGGradientElement.SVG_SPREADMETHOD_PAD", nodecl.}: float
var SVGGradientElementSVG_SPREADMETHOD_REFLECT *
  {.importc: "SVGGradientElement.SVG_SPREADMETHOD_REFLECT", nodecl.}: float
var SVGGradientElementSVG_SPREADMETHOD_REPEAT *
  {.importc: "SVGGradientElement.SVG_SPREADMETHOD_REPEAT", nodecl.}: float
var SVGGradientElementSVG_SPREADMETHOD_UNKNOWN *
  {.importc: "SVGGradientElement.SVG_SPREADMETHOD_UNKNOWN", nodecl.}: float

type SVGImageElement* {.importc.} = ref object of SVGElement
  height* {.importc.}: SVGAnimatedLength
  preserveAspectRatio* {.importc.}: SVGAnimatedPreserveAspectRatio
  width* {.importc.}: SVGAnimatedLength
  x* {.importc.}: SVGAnimatedLength
  y* {.importc.}: SVGAnimatedLength
proc newSVGImageElement*(): SVGImageElement {.importcpp: "new SVGImageElement".}
proc addEventListener*(self: SVGImageElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGImageElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGLineElement* {.importc.} = ref object of SVGElement
  x1* {.importc.}: SVGAnimatedLength
  x2* {.importc.}: SVGAnimatedLength
  y1* {.importc.}: SVGAnimatedLength
  y2* {.importc.}: SVGAnimatedLength
proc newSVGLineElement*(): SVGLineElement {.importcpp: "new SVGLineElement".}
proc addEventListener*(self: SVGLineElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGLineElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGLinearGradientElement* {.importc.} = ref object of SVGGradientElement
  x1* {.importc.}: SVGAnimatedLength
  x2* {.importc.}: SVGAnimatedLength
  y1* {.importc.}: SVGAnimatedLength
  y2* {.importc.}: SVGAnimatedLength
proc newSVGLinearGradientElement*(): SVGLinearGradientElement {.importcpp: "new SVGLinearGradientElement".}

type SVGMarkerElement* {.importc.} = ref object of SVGElement
  markerHeight* {.importc.}: SVGAnimatedLength
  markerUnits* {.importc.}: SVGAnimatedEnumeration
  markerWidth* {.importc.}: SVGAnimatedLength
  orientAngle* {.importc.}: SVGAnimatedAngle
  orientType* {.importc.}: SVGAnimatedEnumeration
  refX* {.importc.}: SVGAnimatedLength
  refY* {.importc.}: SVGAnimatedLength
  SVG_MARKERUNITS_STROKEWIDTH* {.importc.}: float
  SVG_MARKERUNITS_UNKNOWN* {.importc.}: float
  SVG_MARKERUNITS_USERSPACEONUSE* {.importc.}: float
  SVG_MARKER_ORIENT_ANGLE* {.importc.}: float
  SVG_MARKER_ORIENT_AUTO* {.importc.}: float
  SVG_MARKER_ORIENT_UNKNOWN* {.importc.}: float
proc newSVGMarkerElement*(): SVGMarkerElement {.importcpp: "new SVGMarkerElement".}
proc setOrientToAngle*(self: SVGMarkerElement,
    angle: SVGAngle): void {.importcpp.}
proc setOrientToAuto*(self: SVGMarkerElement): void {.importcpp.}
proc addEventListener*(self: SVGMarkerElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGMarkerElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var SVGMarkerElementSVG_MARKERUNITS_STROKEWIDTH *
  {.importc: "SVGMarkerElement.SVG_MARKERUNITS_STROKEWIDTH", nodecl.}: float
var SVGMarkerElementSVG_MARKERUNITS_UNKNOWN *
  {.importc: "SVGMarkerElement.SVG_MARKERUNITS_UNKNOWN", nodecl.}: float
var SVGMarkerElementSVG_MARKERUNITS_USERSPACEONUSE *
  {.importc: "SVGMarkerElement.SVG_MARKERUNITS_USERSPACEONUSE", nodecl.}: float
var SVGMarkerElementSVG_MARKER_ORIENT_ANGLE *
  {.importc: "SVGMarkerElement.SVG_MARKER_ORIENT_ANGLE", nodecl.}: float
var SVGMarkerElementSVG_MARKER_ORIENT_AUTO *
  {.importc: "SVGMarkerElement.SVG_MARKER_ORIENT_AUTO", nodecl.}: float
var SVGMarkerElementSVG_MARKER_ORIENT_UNKNOWN *
  {.importc: "SVGMarkerElement.SVG_MARKER_ORIENT_UNKNOWN", nodecl.}: float

type SVGMaskElement* {.importc.} = ref object of SVGElement
  height* {.importc.}: SVGAnimatedLength
  maskContentUnits* {.importc.}: SVGAnimatedEnumeration
  maskUnits* {.importc.}: SVGAnimatedEnumeration
  width* {.importc.}: SVGAnimatedLength
  x* {.importc.}: SVGAnimatedLength
  y* {.importc.}: SVGAnimatedLength
proc newSVGMaskElement*(): SVGMaskElement {.importcpp: "new SVGMaskElement".}
proc addEventListener*(self: SVGMaskElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGMaskElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGMetadataElement* {.importc.} = ref object of SVGElement
proc newSVGMetadataElement*(): SVGMetadataElement {.importcpp: "new SVGMetadataElement".}

type SVGPathSeg* {.importc.} = ref object of RootObj
  pathSegType* {.importc.}: float
  pathSegTypeAsLetter* {.importc.}: cstring
  PATHSEG_ARC_ABS* {.importc.}: float
  PATHSEG_ARC_REL* {.importc.}: float
  PATHSEG_CLOSEPATH* {.importc.}: float
  PATHSEG_CURVETO_CUBIC_ABS* {.importc.}: float
  PATHSEG_CURVETO_CUBIC_REL* {.importc.}: float
  PATHSEG_CURVETO_CUBIC_SMOOTH_ABS* {.importc.}: float
  PATHSEG_CURVETO_CUBIC_SMOOTH_REL* {.importc.}: float
  PATHSEG_CURVETO_QUADRATIC_ABS* {.importc.}: float
  PATHSEG_CURVETO_QUADRATIC_REL* {.importc.}: float
  PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS * {.importc.}: float
  PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL * {.importc.}: float
  PATHSEG_LINETO_ABS* {.importc.}: float
  PATHSEG_LINETO_HORIZONTAL_ABS* {.importc.}: float
  PATHSEG_LINETO_HORIZONTAL_REL* {.importc.}: float
  PATHSEG_LINETO_REL* {.importc.}: float
  PATHSEG_LINETO_VERTICAL_ABS* {.importc.}: float
  PATHSEG_LINETO_VERTICAL_REL* {.importc.}: float
  PATHSEG_MOVETO_ABS* {.importc.}: float
  PATHSEG_MOVETO_REL* {.importc.}: float
  PATHSEG_UNKNOWN* {.importc.}: float
proc newSVGPathSeg*(): SVGPathSeg {.importcpp: "new SVGPathSeg".}

type SVGPathSegArcAbs* {.importc.} = ref object of SVGPathSeg
  angle* {.importc.}: float
  largeArcFlag* {.importc.}: bool
  r1* {.importc.}: float
  r2* {.importc.}: float
  sweepFlag* {.importc.}: bool
  x* {.importc.}: float
  y* {.importc.}: float
var SVGPathSegArcAbsAngle* {.importc: "SVGPathSegArcAbs.angle", nodecl.}: float
var SVGPathSegArcAbsLargeArcFlag* {.importc: "SVGPathSegArcAbs.largeArcFlag", nodecl.}: bool
var SVGPathSegArcAbsR1* {.importc: "SVGPathSegArcAbs.r1", nodecl.}: float
var SVGPathSegArcAbsR2* {.importc: "SVGPathSegArcAbs.r2", nodecl.}: float
var SVGPathSegArcAbsSweepFlag* {.importc: "SVGPathSegArcAbs.sweepFlag", nodecl.}: bool
var SVGPathSegArcAbsX* {.importc: "SVGPathSegArcAbs.x", nodecl.}: float
var SVGPathSegArcAbsY* {.importc: "SVGPathSegArcAbs.y", nodecl.}: float

type SVGPathSegArcRel* {.importc.} = ref object of SVGPathSeg
  angle* {.importc.}: float
  largeArcFlag* {.importc.}: bool
  r1* {.importc.}: float
  r2* {.importc.}: float
  sweepFlag* {.importc.}: bool
  x* {.importc.}: float
  y* {.importc.}: float
var SVGPathSegArcRelAngle* {.importc: "SVGPathSegArcRel.angle", nodecl.}: float
var SVGPathSegArcRelLargeArcFlag* {.importc: "SVGPathSegArcRel.largeArcFlag", nodecl.}: bool
var SVGPathSegArcRelR1* {.importc: "SVGPathSegArcRel.r1", nodecl.}: float
var SVGPathSegArcRelR2* {.importc: "SVGPathSegArcRel.r2", nodecl.}: float
var SVGPathSegArcRelSweepFlag* {.importc: "SVGPathSegArcRel.sweepFlag", nodecl.}: bool
var SVGPathSegArcRelX* {.importc: "SVGPathSegArcRel.x", nodecl.}: float
var SVGPathSegArcRelY* {.importc: "SVGPathSegArcRel.y", nodecl.}: float

type SVGPathSegClosePath* {.importc.} = ref object of SVGPathSeg

type SVGPathSegCurvetoCubicAbs* {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
  x1* {.importc.}: float
  x2* {.importc.}: float
  y* {.importc.}: float
  y1* {.importc.}: float
  y2* {.importc.}: float
var SVGPathSegCurvetoCubicAbsX* {.importc: "SVGPathSegCurvetoCubicAbs.x",
    nodecl.}: float
var SVGPathSegCurvetoCubicAbsX1* {.importc: "SVGPathSegCurvetoCubicAbs.x1",
    nodecl.}: float
var SVGPathSegCurvetoCubicAbsX2* {.importc: "SVGPathSegCurvetoCubicAbs.x2",
    nodecl.}: float
var SVGPathSegCurvetoCubicAbsY* {.importc: "SVGPathSegCurvetoCubicAbs.y",
    nodecl.}: float
var SVGPathSegCurvetoCubicAbsY1* {.importc: "SVGPathSegCurvetoCubicAbs.y1",
    nodecl.}: float
var SVGPathSegCurvetoCubicAbsY2* {.importc: "SVGPathSegCurvetoCubicAbs.y2",
    nodecl.}: float

type SVGPathSegCurvetoCubicRel* {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
  x1* {.importc.}: float
  x2* {.importc.}: float
  y* {.importc.}: float
  y1* {.importc.}: float
  y2* {.importc.}: float
var SVGPathSegCurvetoCubicRelX* {.importc: "SVGPathSegCurvetoCubicRel.x",
    nodecl.}: float
var SVGPathSegCurvetoCubicRelX1* {.importc: "SVGPathSegCurvetoCubicRel.x1",
    nodecl.}: float
var SVGPathSegCurvetoCubicRelX2* {.importc: "SVGPathSegCurvetoCubicRel.x2",
    nodecl.}: float
var SVGPathSegCurvetoCubicRelY* {.importc: "SVGPathSegCurvetoCubicRel.y",
    nodecl.}: float
var SVGPathSegCurvetoCubicRelY1* {.importc: "SVGPathSegCurvetoCubicRel.y1",
    nodecl.}: float
var SVGPathSegCurvetoCubicRelY2* {.importc: "SVGPathSegCurvetoCubicRel.y2",
    nodecl.}: float

type SVGPathSegCurvetoCubicSmoothAbs* {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
  x2* {.importc.}: float
  y* {.importc.}: float
  y2* {.importc.}: float
var SVGPathSegCurvetoCubicSmoothAbsX* {.importc: "SVGPathSegCurvetoCubicSmoothAbs.x",
    nodecl.}: float
var SVGPathSegCurvetoCubicSmoothAbsX2* {.importc: "SVGPathSegCurvetoCubicSmoothAbs.x2",
    nodecl.}: float
var SVGPathSegCurvetoCubicSmoothAbsY* {.importc: "SVGPathSegCurvetoCubicSmoothAbs.y",
    nodecl.}: float
var SVGPathSegCurvetoCubicSmoothAbsY2* {.importc: "SVGPathSegCurvetoCubicSmoothAbs.y2",
    nodecl.}: float

type SVGPathSegCurvetoCubicSmoothRel* {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
  x2* {.importc.}: float
  y* {.importc.}: float
  y2* {.importc.}: float
var SVGPathSegCurvetoCubicSmoothRelX* {.importc: "SVGPathSegCurvetoCubicSmoothRel.x",
    nodecl.}: float
var SVGPathSegCurvetoCubicSmoothRelX2* {.importc: "SVGPathSegCurvetoCubicSmoothRel.x2",
    nodecl.}: float
var SVGPathSegCurvetoCubicSmoothRelY* {.importc: "SVGPathSegCurvetoCubicSmoothRel.y",
    nodecl.}: float
var SVGPathSegCurvetoCubicSmoothRelY2* {.importc: "SVGPathSegCurvetoCubicSmoothRel.y2",
    nodecl.}: float

type SVGPathSegCurvetoQuadraticAbs* {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
  x1* {.importc.}: float
  y* {.importc.}: float
  y1* {.importc.}: float
var SVGPathSegCurvetoQuadraticAbsX* {.importc: "SVGPathSegCurvetoQuadraticAbs.x",
    nodecl.}: float
var SVGPathSegCurvetoQuadraticAbsX1* {.importc: "SVGPathSegCurvetoQuadraticAbs.x1",
    nodecl.}: float
var SVGPathSegCurvetoQuadraticAbsY* {.importc: "SVGPathSegCurvetoQuadraticAbs.y",
    nodecl.}: float
var SVGPathSegCurvetoQuadraticAbsY1* {.importc: "SVGPathSegCurvetoQuadraticAbs.y1",
    nodecl.}: float

type SVGPathSegCurvetoQuadraticRel* {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
  x1* {.importc.}: float
  y* {.importc.}: float
  y1* {.importc.}: float
var SVGPathSegCurvetoQuadraticRelX* {.importc: "SVGPathSegCurvetoQuadraticRel.x",
    nodecl.}: float
var SVGPathSegCurvetoQuadraticRelX1* {.importc: "SVGPathSegCurvetoQuadraticRel.x1",
    nodecl.}: float
var SVGPathSegCurvetoQuadraticRelY* {.importc: "SVGPathSegCurvetoQuadraticRel.y",
    nodecl.}: float
var SVGPathSegCurvetoQuadraticRelY1* {.importc: "SVGPathSegCurvetoQuadraticRel.y1",
    nodecl.}: float

type SVGPathSegCurvetoQuadraticSmoothAbs *
  {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
  y* {.importc.}: float
var SVGPathSegCurvetoQuadraticSmoothAbsX *
  {.importc: "SVGPathSegCurvetoQuadraticSmoothAbs.x", nodecl.}: float
var SVGPathSegCurvetoQuadraticSmoothAbsY *
  {.importc: "SVGPathSegCurvetoQuadraticSmoothAbs.y", nodecl.}: float

type SVGPathSegCurvetoQuadraticSmoothRel *
  {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
  y* {.importc.}: float
var SVGPathSegCurvetoQuadraticSmoothRelX *
  {.importc: "SVGPathSegCurvetoQuadraticSmoothRel.x", nodecl.}: float
var SVGPathSegCurvetoQuadraticSmoothRelY *
  {.importc: "SVGPathSegCurvetoQuadraticSmoothRel.y", nodecl.}: float

type SVGPathSegLinetoAbs* {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
  y* {.importc.}: float
var SVGPathSegLinetoAbsX* {.importc: "SVGPathSegLinetoAbs.x", nodecl.}: float
var SVGPathSegLinetoAbsY* {.importc: "SVGPathSegLinetoAbs.y", nodecl.}: float

type SVGPathSegLinetoHorizontalAbs* {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
var SVGPathSegLinetoHorizontalAbsX* {.importc: "SVGPathSegLinetoHorizontalAbs.x",
    nodecl.}: float

type SVGPathSegLinetoHorizontalRel* {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
var SVGPathSegLinetoHorizontalRelX* {.importc: "SVGPathSegLinetoHorizontalRel.x",
    nodecl.}: float

type SVGPathSegLinetoRel* {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
  y* {.importc.}: float
var SVGPathSegLinetoRelX* {.importc: "SVGPathSegLinetoRel.x", nodecl.}: float
var SVGPathSegLinetoRelY* {.importc: "SVGPathSegLinetoRel.y", nodecl.}: float

type SVGPathSegLinetoVerticalAbs* {.importc.} = ref object of SVGPathSeg
  y* {.importc.}: float
var SVGPathSegLinetoVerticalAbsY* {.importc: "SVGPathSegLinetoVerticalAbs.y",
    nodecl.}: float

type SVGPathSegLinetoVerticalRel* {.importc.} = ref object of SVGPathSeg
  y* {.importc.}: float
var SVGPathSegLinetoVerticalRelY* {.importc: "SVGPathSegLinetoVerticalRel.y",
    nodecl.}: float

type SVGPathSegMovetoAbs* {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
  y* {.importc.}: float
var SVGPathSegMovetoAbsX* {.importc: "SVGPathSegMovetoAbs.x", nodecl.}: float
var SVGPathSegMovetoAbsY* {.importc: "SVGPathSegMovetoAbs.y", nodecl.}: float

type SVGPathSegMovetoRel* {.importc.} = ref object of SVGPathSeg
  x* {.importc.}: float
  y* {.importc.}: float
var SVGPathSegMovetoRelX* {.importc: "SVGPathSegMovetoRel.x", nodecl.}: float
var SVGPathSegMovetoRelY* {.importc: "SVGPathSegMovetoRel.y", nodecl.}: float

type SVGPathElement* {.importc.} = ref object of SVGElement
proc newSVGPathElement*(): SVGPathElement {.importcpp: "new SVGPathElement".}
proc createSVGPathSegArcAbs*(self: SVGPathElement, x: float, y: float,
    r1: float, r2: float, angle: float, largeArcFlag: bool,
    sweepFlag: bool): SVGPathSegArcAbs {.importcpp.}
proc createSVGPathSegArcRel*(self: SVGPathElement, x: float, y: float,
    r1: float, r2: float, angle: float, largeArcFlag: bool,
    sweepFlag: bool): SVGPathSegArcRel {.importcpp.}
proc createSVGPathSegClosePath*(self: SVGPathElement): SVGPathSegClosePath {.importcpp.}
proc createSVGPathSegCurvetoCubicAbs*(self: SVGPathElement, x: float, y: float,
    x1: float, y1: float, x2: float,
    y2: float): SVGPathSegCurvetoCubicAbs {.importcpp.}
proc createSVGPathSegCurvetoCubicRel*(self: SVGPathElement, x: float, y: float,
    x1: float, y1: float, x2: float,
    y2: float): SVGPathSegCurvetoCubicRel {.importcpp.}
proc createSVGPathSegCurvetoCubicSmoothAbs*(self: SVGPathElement, x: float,
    y: float, x2: float,
    y2: float): SVGPathSegCurvetoCubicSmoothAbs {.importcpp.}
proc createSVGPathSegCurvetoCubicSmoothRel*(self: SVGPathElement, x: float,
    y: float, x2: float,
    y2: float): SVGPathSegCurvetoCubicSmoothRel {.importcpp.}
proc createSVGPathSegCurvetoQuadraticAbs*(self: SVGPathElement, x: float,
    y: float, x1: float, y1: float): SVGPathSegCurvetoQuadraticAbs {.importcpp.}
proc createSVGPathSegCurvetoQuadraticRel*(self: SVGPathElement, x: float,
    y: float, x1: float, y1: float): SVGPathSegCurvetoQuadraticRel {.importcpp.}
proc createSVGPathSegCurvetoQuadraticSmoothAbs*(self: SVGPathElement, x: float,
    y: float): SVGPathSegCurvetoQuadraticSmoothAbs {.importcpp.}
proc createSVGPathSegCurvetoQuadraticSmoothRel*(self: SVGPathElement, x: float,
    y: float): SVGPathSegCurvetoQuadraticSmoothRel {.importcpp.}
proc createSVGPathSegLinetoAbs*(self: SVGPathElement, x: float,
    y: float): SVGPathSegLinetoAbs {.importcpp.}
proc createSVGPathSegLinetoHorizontalAbs*(self: SVGPathElement,
    x: float): SVGPathSegLinetoHorizontalAbs {.importcpp.}
proc createSVGPathSegLinetoHorizontalRel*(self: SVGPathElement,
    x: float): SVGPathSegLinetoHorizontalRel {.importcpp.}
proc createSVGPathSegLinetoRel*(self: SVGPathElement, x: float,
    y: float): SVGPathSegLinetoRel {.importcpp.}
proc createSVGPathSegLinetoVerticalAbs*(self: SVGPathElement,
    y: float): SVGPathSegLinetoVerticalAbs {.importcpp.}
proc createSVGPathSegLinetoVerticalRel*(self: SVGPathElement,
    y: float): SVGPathSegLinetoVerticalRel {.importcpp.}
proc createSVGPathSegMovetoAbs*(self: SVGPathElement, x: float,
    y: float): SVGPathSegMovetoAbs {.importcpp.}
proc createSVGPathSegMovetoRel*(self: SVGPathElement, x: float,
    y: float): SVGPathSegMovetoRel {.importcpp.}
proc getPathSegAtLength*(self: SVGPathElement,
    distance: float): float {.importcpp.}
proc getPointAtLength*(self: SVGPathElement,
    distance: float): SVGPoint {.importcpp.}
proc getTotalLength*(self: SVGPathElement): float {.importcpp.}
proc addEventListener*(self: SVGPathElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGPathElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGPathSegList* {.importc.} = ref object of RootObj
  numberOfItems* {.importc.}: float
proc newSVGPathSegList*(): SVGPathSegList {.importcpp: "new SVGPathSegList".}
proc appendItem*(self: SVGPathSegList, newItem: SVGPathSeg): SVGPathSeg {.importcpp.}
proc clear*(self: SVGPathSegList): void {.importcpp.}
proc getItem*(self: SVGPathSegList, index: float): SVGPathSeg {.importcpp.}
proc initialize*(self: SVGPathSegList, newItem: SVGPathSeg): SVGPathSeg {.importcpp.}
proc insertItemBefore*(self: SVGPathSegList, newItem: SVGPathSeg,
    index: float): SVGPathSeg {.importcpp.}
proc removeItem*(self: SVGPathSegList, index: float): SVGPathSeg {.importcpp.}
proc replaceItem*(self: SVGPathSegList, newItem: SVGPathSeg,
    index: float): SVGPathSeg {.importcpp.}

type SVGPatternElement* {.importc.} = ref object of SVGElement
  height* {.importc.}: SVGAnimatedLength
  patternContentUnits* {.importc.}: SVGAnimatedEnumeration
  patternTransform* {.importc.}: SVGAnimatedTransformList
  patternUnits* {.importc.}: SVGAnimatedEnumeration
  width* {.importc.}: SVGAnimatedLength
  x* {.importc.}: SVGAnimatedLength
  y* {.importc.}: SVGAnimatedLength
proc newSVGPatternElement*(): SVGPatternElement {.importcpp: "new SVGPatternElement".}
proc addEventListener*(self: SVGPatternElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGPatternElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGPointList* {.importc.} = ref object of RootObj
  numberOfItems* {.importc.}: float
proc newSVGPointList*(): SVGPointList {.importcpp: "new SVGPointList".}
proc appendItem*(self: SVGPointList, newItem: SVGPoint): SVGPoint {.importcpp.}
proc clear*(self: SVGPointList): void {.importcpp.}
proc getItem*(self: SVGPointList, index: float): SVGPoint {.importcpp.}
proc initialize*(self: SVGPointList, newItem: SVGPoint): SVGPoint {.importcpp.}
proc insertItemBefore*(self: SVGPointList, newItem: SVGPoint,
    index: float): SVGPoint {.importcpp.}
proc removeItem*(self: SVGPointList, index: float): SVGPoint {.importcpp.}
proc replaceItem*(self: SVGPointList, newItem: SVGPoint,
    index: float): SVGPoint {.importcpp.}

type SVGPolygonElement* {.importc.} = ref object of SVGElement
proc newSVGPolygonElement*(): SVGPolygonElement {.importcpp: "new SVGPolygonElement".}
proc addEventListener*(self: SVGPolygonElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGPolygonElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGPolylineElement* {.importc.} = ref object of SVGElement
proc newSVGPolylineElement*(): SVGPolylineElement {.importcpp: "new SVGPolylineElement".}
proc addEventListener*(self: SVGPolylineElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGPolylineElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGRadialGradientElement* {.importc.} = ref object of SVGGradientElement
  cx* {.importc.}: SVGAnimatedLength
  cy* {.importc.}: SVGAnimatedLength
  fx* {.importc.}: SVGAnimatedLength
  fy* {.importc.}: SVGAnimatedLength
  r* {.importc.}: SVGAnimatedLength
proc newSVGRadialGradientElement*(): SVGRadialGradientElement {.importcpp: "new SVGRadialGradientElement".}

type SVGRectElement* {.importc.} = ref object of SVGElement
  height* {.importc.}: SVGAnimatedLength
  rx* {.importc.}: SVGAnimatedLength
  ry* {.importc.}: SVGAnimatedLength
  width* {.importc.}: SVGAnimatedLength
  x* {.importc.}: SVGAnimatedLength
  y* {.importc.}: SVGAnimatedLength
proc newSVGRectElement*(): SVGRectElement {.importcpp: "new SVGRectElement".}
proc addEventListener*(self: SVGRectElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGRectElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGScriptElement* {.importc.} = ref object of SVGElement
  xType* {.importc: "type".}: cstring
proc newSVGScriptElement*(): SVGScriptElement {.importcpp: "new SVGScriptElement".}
proc addEventListener*(self: SVGScriptElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGScriptElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGStopElement* {.importc.} = ref object of SVGElement
  offset* {.importc.}: SVGAnimatedNumber
proc newSVGStopElement*(): SVGStopElement {.importcpp: "new SVGStopElement".}
proc addEventListener*(self: SVGStopElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGStopElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGStringList* {.importc.} = ref object of RootObj
  numberOfItems* {.importc.}: float
proc newSVGStringList*(): SVGStringList {.importcpp: "new SVGStringList".}
proc appendItem*(self: SVGStringList, newItem: cstring): cstring {.importcpp.}
proc clear*(self: SVGStringList): void {.importcpp.}
proc getItem*(self: SVGStringList, index: float): cstring {.importcpp.}
proc initialize*(self: SVGStringList, newItem: cstring): cstring {.importcpp.}
proc insertItemBefore*(self: SVGStringList, newItem: cstring,
    index: float): cstring {.importcpp.}
proc removeItem*(self: SVGStringList, index: float): cstring {.importcpp.}
proc replaceItem*(self: SVGStringList, newItem: cstring,
    index: float): cstring {.importcpp.}

type SVGStyleElement* {.importc.} = ref object of SVGElement
  media* {.importc.}: cstring
  title* {.importc.}: cstring
  xType* {.importc: "type".}: cstring
proc newSVGStyleElement*(): SVGStyleElement {.importcpp: "new SVGStyleElement".}
proc addEventListener*(self: SVGStyleElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGStyleElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGSwitchElement* {.importc.} = ref object of SVGElement
proc newSVGSwitchElement*(): SVGSwitchElement {.importcpp: "new SVGSwitchElement".}
proc addEventListener*(self: SVGSwitchElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGSwitchElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGSymbolElement* {.importc.} = ref object of SVGElement
proc newSVGSymbolElement*(): SVGSymbolElement {.importcpp: "new SVGSymbolElement".}
proc addEventListener*(self: SVGSymbolElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGSymbolElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGTextContentElement* {.importc.} = ref object of SVGElement
  lengthAdjust* {.importc.}: SVGAnimatedEnumeration
  textLength* {.importc.}: SVGAnimatedLength
  LENGTHADJUST_SPACING* {.importc.}: float
  LENGTHADJUST_SPACINGANDGLYPHS* {.importc.}: float
  LENGTHADJUST_UNKNOWN* {.importc.}: float
proc newSVGTextContentElement*(): SVGTextContentElement {.importcpp: "new SVGTextContentElement".}
proc getCharNumAtPosition*(self: SVGTextContentElement,
    point: SVGPoint): float {.importcpp.}
proc getComputedTextLength*(self: SVGTextContentElement): float {.importcpp.}
proc getEndPositionOfChar*(self: SVGTextContentElement,
    charnum: float): SVGPoint {.importcpp.}
proc getExtentOfChar*(self: SVGTextContentElement,
    charnum: float): SVGRect {.importcpp.}
proc getNumberOfChars*(self: SVGTextContentElement): float {.importcpp.}
proc getRotationOfChar*(self: SVGTextContentElement,
    charnum: float): float {.importcpp.}
proc getStartPositionOfChar*(self: SVGTextContentElement,
    charnum: float): SVGPoint {.importcpp.}
proc getSubStringLength*(self: SVGTextContentElement, charnum: float,
    nchars: float): float {.importcpp.}
proc selectSubString*(self: SVGTextContentElement, charnum: float,
    nchars: float): void {.importcpp.}
proc addEventListener*(self: SVGTextContentElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGTextContentElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGTextPositioningElement* {.importc.} = ref object of SVGTextContentElement
  dx* {.importc.}: SVGAnimatedLengthList
  dy* {.importc.}: SVGAnimatedLengthList
  rotate* {.importc.}: SVGAnimatedNumberList
  x* {.importc.}: SVGAnimatedLengthList
  y* {.importc.}: SVGAnimatedLengthList
proc newSVGTextPositioningElement*(): SVGTextPositioningElement {.importcpp: "new SVGTextPositioningElement".}

type SVGTSpanElement* {.importc.} = ref object of SVGTextPositioningElement
proc newSVGTSpanElement*(): SVGTSpanElement {.importcpp: "new SVGTSpanElement".}

type SVGTextElement* {.importc.} = ref object of SVGTextPositioningElement
proc newSVGTextElement*(): SVGTextElement {.importcpp: "new SVGTextElement".}
proc addEventListener*(self: SVGTextElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGTextElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGTextPathElement* {.importc.} = ref object of SVGTextContentElement
  xMethod* {.importc: "method".}: SVGAnimatedEnumeration
  spacing* {.importc.}: SVGAnimatedEnumeration
  startOffset* {.importc.}: SVGAnimatedLength
  TEXTPATH_METHODTYPE_ALIGN* {.importc.}: float
  TEXTPATH_METHODTYPE_STRETCH* {.importc.}: float
  TEXTPATH_METHODTYPE_UNKNOWN* {.importc.}: float
  TEXTPATH_SPACINGTYPE_AUTO* {.importc.}: float
  TEXTPATH_SPACINGTYPE_EXACT* {.importc.}: float
  TEXTPATH_SPACINGTYPE_UNKNOWN* {.importc.}: float
proc newSVGTextPathElement*(): SVGTextPathElement {.importcpp: "new SVGTextPathElement".}
proc addEventListener*(self: SVGTextPathElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGTextPathElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var SVGTextPathElementTEXTPATH_METHODTYPE_ALIGN *
  {.importc: "SVGTextPathElement.TEXTPATH_METHODTYPE_ALIGN", nodecl.}: float
var SVGTextPathElementTEXTPATH_METHODTYPE_STRETCH *
  {.importc: "SVGTextPathElement.TEXTPATH_METHODTYPE_STRETCH", nodecl.}: float
var SVGTextPathElementTEXTPATH_METHODTYPE_UNKNOWN *
  {.importc: "SVGTextPathElement.TEXTPATH_METHODTYPE_UNKNOWN", nodecl.}: float
var SVGTextPathElementTEXTPATH_SPACINGTYPE_AUTO *
  {.importc: "SVGTextPathElement.TEXTPATH_SPACINGTYPE_AUTO", nodecl.}: float
var SVGTextPathElementTEXTPATH_SPACINGTYPE_EXACT *
  {.importc: "SVGTextPathElement.TEXTPATH_SPACINGTYPE_EXACT", nodecl.}: float
var SVGTextPathElementTEXTPATH_SPACINGTYPE_UNKNOWN *
  {.importc: "SVGTextPathElement.TEXTPATH_SPACINGTYPE_UNKNOWN", nodecl.}: float

type SVGTitleElement* {.importc.} = ref object of SVGElement
proc newSVGTitleElement*(): SVGTitleElement {.importcpp: "new SVGTitleElement".}
proc addEventListener*(self: SVGTitleElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGTitleElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGUnitTypes* {.importc.} = ref object of RootObj
  SVG_UNIT_TYPE_OBJECTBOUNDINGBOX* {.importc.}: float
  SVG_UNIT_TYPE_UNKNOWN* {.importc.}: float
  SVG_UNIT_TYPE_USERSPACEONUSE* {.importc.}: float
var SVGUnitTypesSVG_UNIT_TYPE_OBJECTBOUNDINGBOX *
  {.importc: "SVGUnitTypes.SVG_UNIT_TYPE_OBJECTBOUNDINGBOX", nodecl.}: float
var SVGUnitTypesSVG_UNIT_TYPE_UNKNOWN* {.importc: "SVGUnitTypes.SVG_UNIT_TYPE_UNKNOWN",
    nodecl.}: float
var SVGUnitTypesSVG_UNIT_TYPE_USERSPACEONUSE *
  {.importc: "SVGUnitTypes.SVG_UNIT_TYPE_USERSPACEONUSE", nodecl.}: float

type SVGViewElement* {.importc.} = ref object of SVGElement
  viewTarget* {.importc.}: SVGStringList
proc newSVGViewElement*(): SVGViewElement {.importcpp: "new SVGViewElement".}
proc addEventListener*(self: SVGViewElement, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: SVGViewElement, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type SVGZoomAndPan* {.importc.} = ref object of RootObj
  SVG_ZOOMANDPAN_DISABLE* {.importc.}: float
  SVG_ZOOMANDPAN_MAGNIFY* {.importc.}: float
  SVG_ZOOMANDPAN_UNKNOWN* {.importc.}: float
var SVGZoomAndPanSVG_ZOOMANDPAN_DISABLE *
  {.importc: "SVGZoomAndPan.SVG_ZOOMANDPAN_DISABLE", nodecl.}: float
var SVGZoomAndPanSVG_ZOOMANDPAN_MAGNIFY *
  {.importc: "SVGZoomAndPan.SVG_ZOOMANDPAN_MAGNIFY", nodecl.}: float
var SVGZoomAndPanSVG_ZOOMANDPAN_UNKNOWN *
  {.importc: "SVGZoomAndPan.SVG_ZOOMANDPAN_UNKNOWN", nodecl.}: float

type SVGZoomEvent* {.importc.} = ref object of UIEvent
  newScale* {.importc.}: float
  newTranslate* {.importc.}: SVGPoint
  previousScale* {.importc.}: float
  previousTranslate* {.importc.}: SVGPoint
  zoomRectScreen* {.importc.}: SVGRect
var SVGZoomEventNewScale* {.importc: "SVGZoomEvent.newScale", nodecl.}: float
var SVGZoomEventNewTranslate* {.importc: "SVGZoomEvent.newTranslate",
    nodecl.}: SVGPoint
var SVGZoomEventPreviousScale* {.importc: "SVGZoomEvent.previousScale",
    nodecl.}: float
var SVGZoomEventPreviousTranslate* {.importc: "SVGZoomEvent.previousTranslate",
    nodecl.}: SVGPoint
var SVGZoomEventZoomRectScreen* {.importc: "SVGZoomEvent.zoomRectScreen",
    nodecl.}: SVGRect

type ScriptNotifyEvent* {.importc.} = ref object of Event
  callingUri* {.importc.}: cstring
  value* {.importc.}: cstring
proc newScriptNotifyEvent*(): ScriptNotifyEvent {.importcpp: "new ScriptNotifyEvent".}

type Storage* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc newStorage*(): Storage {.importcpp: "new Storage".}
proc clear*(self: Storage): void {.importcpp.}
proc key*(self: Storage, index: float): cstring {.importcpp.}
proc removeItem*(self: Storage, key: cstring): void {.importcpp.}
proc setItem*(self: Storage, key: cstring, data: cstring): void {.importcpp.}
proc `[]`*(self: Storage, index: float): cstring {.importcpp: "#[#]".}
proc `[]=`*(self: Storage, index: float,
    value: cstring) {.importcpp: "#[#] = #".}

type StorageEvent* {.importc.} = ref object of Event
  url* {.importc.}: cstring
  key* {.importc.}: cstring
  oldValue* {.importc.}: cstring
  newValue* {.importc.}: cstring
  storageArea* {.importc.}: Storage
var StorageEventUrl* {.importc: "StorageEvent.url", nodecl.}: cstring
var StorageEventKey* {.importc: "StorageEvent.key", nodecl.}: cstring
var StorageEventOldValue* {.importc: "StorageEvent.oldValue", nodecl.}: cstring
var StorageEventNewValue* {.importc: "StorageEvent.newValue", nodecl.}: cstring
var StorageEventStorageArea* {.importc: "StorageEvent.storageArea",
    nodecl.}: Storage

type TextEvent* {.importc.} = ref object of UIEvent
  data* {.importc.}: cstring
  inputMethod* {.importc.}: float
  locale* {.importc.}: cstring
  DOM_INPUT_METHOD_DROP* {.importc.}: float
  DOM_INPUT_METHOD_HANDWRITING* {.importc.}: float
  DOM_INPUT_METHOD_IME* {.importc.}: float
  DOM_INPUT_METHOD_KEYBOARD* {.importc.}: float
  DOM_INPUT_METHOD_MULTIMODAL* {.importc.}: float
  DOM_INPUT_METHOD_OPTION* {.importc.}: float
  DOM_INPUT_METHOD_PASTE* {.importc.}: float
  DOM_INPUT_METHOD_SCRIPT* {.importc.}: float
  DOM_INPUT_METHOD_UNKNOWN* {.importc.}: float
  DOM_INPUT_METHOD_VOICE* {.importc.}: float
proc newTextEvent*(): TextEvent {.importcpp: "new TextEvent".}
proc initTextEvent*(self: TextEvent, typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, viewArg: Window, dataArg: cstring, inputMethod: float,
    locale: cstring): void {.importcpp.}
var TextEventDOM_INPUT_METHOD_DROP* {.importc: "TextEvent.DOM_INPUT_METHOD_DROP",
    nodecl.}: float
var TextEventDOM_INPUT_METHOD_HANDWRITING *
  {.importc: "TextEvent.DOM_INPUT_METHOD_HANDWRITING", nodecl.}: float
var TextEventDOM_INPUT_METHOD_IME* {.importc: "TextEvent.DOM_INPUT_METHOD_IME",
    nodecl.}: float
var TextEventDOM_INPUT_METHOD_KEYBOARD *
  {.importc: "TextEvent.DOM_INPUT_METHOD_KEYBOARD", nodecl.}: float
var TextEventDOM_INPUT_METHOD_MULTIMODAL *
  {.importc: "TextEvent.DOM_INPUT_METHOD_MULTIMODAL", nodecl.}: float
var TextEventDOM_INPUT_METHOD_OPTION* {.importc: "TextEvent.DOM_INPUT_METHOD_OPTION",
    nodecl.}: float
var TextEventDOM_INPUT_METHOD_PASTE* {.importc: "TextEvent.DOM_INPUT_METHOD_PASTE",
    nodecl.}: float
var TextEventDOM_INPUT_METHOD_SCRIPT* {.importc: "TextEvent.DOM_INPUT_METHOD_SCRIPT",
    nodecl.}: float
var TextEventDOM_INPUT_METHOD_UNKNOWN* {.importc: "TextEvent.DOM_INPUT_METHOD_UNKNOWN",
    nodecl.}: float
var TextEventDOM_INPUT_METHOD_VOICE* {.importc: "TextEvent.DOM_INPUT_METHOD_VOICE",
    nodecl.}: float

type TextRangeCollection* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc newTextRangeCollection*(): TextRangeCollection {.importcpp: "new TextRangeCollection".}
proc item*(self: TextRangeCollection, index: float): TextRange {.importcpp.}
proc `[]`*(self: TextRangeCollection, index: float): TextRange {.importcpp: "#[#]".}
proc `[]=`*(self: TextRangeCollection, index: float,
    value: TextRange) {.importcpp: "#[#] = #".}

type Touch* {.importc.} = ref object of RootObj
  clientX* {.importc.}: float
  clientY* {.importc.}: float
  identifier* {.importc.}: float
  pageX* {.importc.}: float
  pageY* {.importc.}: float
  screenX* {.importc.}: float
  screenY* {.importc.}: float
  target* {.importc.}: EventTarget
proc newTouch*(): Touch {.importcpp: "new Touch".}

type TouchList* {.importc.} = ref object of RootObj
  length* {.importc.}: float
proc item*(self: TouchList, index: float): Touch {.importcpp.}
proc `[]`*(self: TouchList, index: float): Touch {.importcpp: "#[#]".}
proc `[]=`*(self: TouchList, index: float,
    value: Touch) {.importcpp: "#[#] = #".}
var TouchListLength* {.importc: "TouchList.length", nodecl.}: float
proc TouchListItem*(index: float): Touch {.importc: "TouchList.item".}

type TouchEvent* {.importc.} = ref object of UIEvent
  altKey* {.importc.}: bool
  changedTouches* {.importc.}: TouchList
  ctrlKey* {.importc.}: bool
  metaKey* {.importc.}: bool
  shiftKey* {.importc.}: bool
  targetTouches* {.importc.}: TouchList
  touches* {.importc.}: TouchList
var TouchEventAltKey* {.importc: "TouchEvent.altKey", nodecl.}: bool
var TouchEventChangedTouches* {.importc: "TouchEvent.changedTouches",
    nodecl.}: TouchList
var TouchEventCtrlKey* {.importc: "TouchEvent.ctrlKey", nodecl.}: bool
var TouchEventMetaKey* {.importc: "TouchEvent.metaKey", nodecl.}: bool
var TouchEventShiftKey* {.importc: "TouchEvent.shiftKey", nodecl.}: bool
var TouchEventTargetTouches* {.importc: "TouchEvent.targetTouches",
    nodecl.}: TouchList
var TouchEventTouches* {.importc: "TouchEvent.touches", nodecl.}: TouchList

type TrackEvent* {.importc.} = ref object of Event

type TransitionEvent* {.importc.} = ref object of Event
  elapsedTime* {.importc.}: float
  propertyName* {.importc.}: cstring
proc newTransitionEvent*(): TransitionEvent {.importcpp: "new TransitionEvent".}
proc initTransitionEvent*(self: TransitionEvent, typeArg: cstring,
    canBubbleArg: bool, cancelableArg: bool, propertyNameArg: cstring,
    elapsedTimeArg: float): void {.importcpp.}

type UnviewableContentIdentifiedEvent* {.importc.} = ref object of NavigationEventWithReferrer
  mediaType* {.importc.}: cstring
proc newUnviewableContentIdentifiedEvent*(): UnviewableContentIdentifiedEvent {.importcpp: "new UnviewableContentIdentifiedEvent".}

type WEBGL_compressed_texture_s3tc* {.importc.} = ref object of RootObj
  COMPRESSED_RGBA_S3TC_DXT1_EXT* {.importc.}: float
  COMPRESSED_RGBA_S3TC_DXT3_EXT* {.importc.}: float
  COMPRESSED_RGBA_S3TC_DXT5_EXT* {.importc.}: float
  COMPRESSED_RGB_S3TC_DXT1_EXT* {.importc.}: float
proc newWEBGL_compressed_texture_s3tc*(): WEBGL_compressed_texture_s3tc {.importcpp: "new WEBGL_compressed_texture_s3tc".}
var WEBGL_compressed_texture_s3tcCOMPRESSED_RGBA_S3TC_DXT1_EXT *
  {.importc: "WEBGL_compressed_texture_s3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT",
    nodecl.}: float
var WEBGL_compressed_texture_s3tcCOMPRESSED_RGBA_S3TC_DXT3_EXT *
  {.importc: "WEBGL_compressed_texture_s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT",
    nodecl.}: float
var WEBGL_compressed_texture_s3tcCOMPRESSED_RGBA_S3TC_DXT5_EXT *
  {.importc: "WEBGL_compressed_texture_s3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT",
    nodecl.}: float
var WEBGL_compressed_texture_s3tcCOMPRESSED_RGB_S3TC_DXT1_EXT *
  {.importc: "WEBGL_compressed_texture_s3tc.COMPRESSED_RGB_S3TC_DXT1_EXT",
    nodecl.}: float

type WEBGL_debug_renderer_info* {.importc.} = ref object of RootObj
  UNMASKED_RENDERER_WEBGL* {.importc.}: float
  UNMASKED_VENDOR_WEBGL* {.importc.}: float
proc newWEBGL_debug_renderer_info*(): WEBGL_debug_renderer_info {.importcpp: "new WEBGL_debug_renderer_info".}
var WEBGL_debug_renderer_infoUNMASKED_RENDERER_WEBGL *
  {.importc: "WEBGL_debug_renderer_info.UNMASKED_RENDERER_WEBGL",
    nodecl.}: float
var WEBGL_debug_renderer_infoUNMASKED_VENDOR_WEBGL *
  {.importc: "WEBGL_debug_renderer_info.UNMASKED_VENDOR_WEBGL", nodecl.}: float

type WEBGL_depth_texture* {.importc.} = ref object of RootObj
  UNSIGNED_INT_24_8_WEBGL* {.importc.}: float
proc newWEBGL_depth_texture*(): WEBGL_depth_texture {.importcpp: "new WEBGL_depth_texture".}
var WEBGL_depth_textureUNSIGNED_INT_24_8_WEBGL *
  {.importc: "WEBGL_depth_texture.UNSIGNED_INT_24_8_WEBGL", nodecl.}: float

type WebGLActiveInfo* {.importc.} = ref object of RootObj
  name* {.importc.}: cstring
  size* {.importc.}: float
  xType* {.importc: "type".}: float
proc newWebGLActiveInfo*(): WebGLActiveInfo {.importcpp: "new WebGLActiveInfo".}

type WebGLObject* {.importc.} = ref object of RootObj
proc newWebGLObject*(): WebGLObject {.importcpp: "new WebGLObject".}

type WebGLBuffer* {.importc.} = ref object of WebGLObject
proc newWebGLBuffer*(): WebGLBuffer {.importcpp: "new WebGLBuffer".}

type WebGLContextEvent* {.importc.} = ref object of Event
  statusMessage* {.importc.}: cstring
proc newWebGLContextEvent*(): WebGLContextEvent {.importcpp: "new WebGLContextEvent".}

type WebGLFramebuffer* {.importc.} = ref object of WebGLObject
proc newWebGLFramebuffer*(): WebGLFramebuffer {.importcpp: "new WebGLFramebuffer".}

type WebGLProgram* {.importc.} = ref object of WebGLObject
proc newWebGLProgram*(): WebGLProgram {.importcpp: "new WebGLProgram".}

type WebGLRenderbuffer* {.importc.} = ref object of WebGLObject
proc newWebGLRenderbuffer*(): WebGLRenderbuffer {.importcpp: "new WebGLRenderbuffer".}

type WebGLShader* {.importc.} = ref object of WebGLObject

type WebGLTexture* {.importc.} = ref object of WebGLObject

type WebGLShaderPrecisionFormat* {.importc.} = ref object of RootObj
  precision* {.importc.}: float
  rangeMax* {.importc.}: float
  rangeMin* {.importc.}: float
var WebGLShaderPrecisionFormatPrecision *
  {.importc: "WebGLShaderPrecisionFormat.precision", nodecl.}: float
var WebGLShaderPrecisionFormatRangeMax *
  {.importc: "WebGLShaderPrecisionFormat.rangeMax", nodecl.}: float
var WebGLShaderPrecisionFormatRangeMin *
  {.importc: "WebGLShaderPrecisionFormat.rangeMin", nodecl.}: float

type WebGLUniformLocation* {.importc.} = ref object of RootObj

type WebGLRenderingContext* {.importc.} = ref object of RootObj
  canvas* {.importc.}: HTMLCanvasElement
  drawingBufferHeight* {.importc.}: float
  drawingBufferWidth* {.importc.}: float
  ACTIVE_ATTRIBUTES* {.importc.}: float
  ACTIVE_TEXTURE* {.importc.}: float
  ACTIVE_UNIFORMS* {.importc.}: float
  ALIASED_LINE_WIDTH_RANGE* {.importc.}: float
  ALIASED_POINT_SIZE_RANGE* {.importc.}: float
  ALPHA* {.importc.}: float
  ALPHA_BITS* {.importc.}: float
  ALWAYS* {.importc.}: float
  ARRAY_BUFFER* {.importc.}: float
  ARRAY_BUFFER_BINDING* {.importc.}: float
  ATTACHED_SHADERS* {.importc.}: float
  BACK* {.importc.}: float
  BLEND* {.importc.}: float
  BLEND_COLOR* {.importc.}: float
  BLEND_DST_ALPHA* {.importc.}: float
  BLEND_DST_RGB* {.importc.}: float
  BLEND_EQUATION* {.importc.}: float
  BLEND_EQUATION_ALPHA* {.importc.}: float
  BLEND_EQUATION_RGB* {.importc.}: float
  BLEND_SRC_ALPHA* {.importc.}: float
  BLEND_SRC_RGB* {.importc.}: float
  BLUE_BITS* {.importc.}: float
  BOOL* {.importc.}: float
  BOOL_VEC2* {.importc.}: float
  BOOL_VEC3* {.importc.}: float
  BOOL_VEC4* {.importc.}: float
  BROWSER_DEFAULT_WEBGL* {.importc.}: float
  BUFFER_SIZE* {.importc.}: float
  BUFFER_USAGE* {.importc.}: float
  BYTE* {.importc.}: float
  CCW* {.importc.}: float
  CLAMP_TO_EDGE* {.importc.}: float
  COLOR_ATTACHMENT0* {.importc.}: float
  COLOR_BUFFER_BIT* {.importc.}: float
  COLOR_CLEAR_VALUE* {.importc.}: float
  COLOR_WRITEMASK* {.importc.}: float
  COMPILE_STATUS* {.importc.}: float
  COMPRESSED_TEXTURE_FORMATS* {.importc.}: float
  CONSTANT_ALPHA* {.importc.}: float
  CONSTANT_COLOR* {.importc.}: float
  CONTEXT_LOST_WEBGL* {.importc.}: float
  CULL_FACE* {.importc.}: float
  CULL_FACE_MODE* {.importc.}: float
  CURRENT_PROGRAM* {.importc.}: float
  CURRENT_VERTEX_ATTRIB* {.importc.}: float
  CW* {.importc.}: float
  DECR* {.importc.}: float
  DECR_WRAP* {.importc.}: float
  DELETE_STATUS* {.importc.}: float
  DEPTH_ATTACHMENT* {.importc.}: float
  DEPTH_BITS* {.importc.}: float
  DEPTH_BUFFER_BIT* {.importc.}: float
  DEPTH_CLEAR_VALUE* {.importc.}: float
  DEPTH_COMPONENT* {.importc.}: float
  DEPTH_COMPONENT16* {.importc.}: float
  DEPTH_FUNC* {.importc.}: float
  DEPTH_RANGE* {.importc.}: float
  DEPTH_STENCIL* {.importc.}: float
  DEPTH_STENCIL_ATTACHMENT* {.importc.}: float
  DEPTH_TEST* {.importc.}: float
  DEPTH_WRITEMASK* {.importc.}: float
  DITHER* {.importc.}: float
  DONT_CARE* {.importc.}: float
  DST_ALPHA* {.importc.}: float
  DST_COLOR* {.importc.}: float
  DYNAMIC_DRAW* {.importc.}: float
  ELEMENT_ARRAY_BUFFER* {.importc.}: float
  ELEMENT_ARRAY_BUFFER_BINDING* {.importc.}: float
  EQUAL* {.importc.}: float
  FASTEST* {.importc.}: float
  FLOAT* {.importc.}: float
  FLOAT_MAT2* {.importc.}: float
  FLOAT_MAT3* {.importc.}: float
  FLOAT_MAT4* {.importc.}: float
  FLOAT_VEC2* {.importc.}: float
  FLOAT_VEC3* {.importc.}: float
  FLOAT_VEC4* {.importc.}: float
  FRAGMENT_SHADER* {.importc.}: float
  FRAMEBUFFER* {.importc.}: float
  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME* {.importc.}: float
  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE* {.importc.}: float
  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE * {.importc.}: float
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL * {.importc.}: float
  FRAMEBUFFER_BINDING* {.importc.}: float
  FRAMEBUFFER_COMPLETE* {.importc.}: float
  FRAMEBUFFER_INCOMPLETE_ATTACHMENT* {.importc.}: float
  FRAMEBUFFER_INCOMPLETE_DIMENSIONS* {.importc.}: float
  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT * {.importc.}: float
  FRAMEBUFFER_UNSUPPORTED* {.importc.}: float
  FRONT* {.importc.}: float
  FRONT_AND_BACK* {.importc.}: float
  FRONT_FACE* {.importc.}: float
  FUNC_ADD* {.importc.}: float
  FUNC_REVERSE_SUBTRACT* {.importc.}: float
  FUNC_SUBTRACT* {.importc.}: float
  GENERATE_MIPMAP_HINT* {.importc.}: float
  GEQUAL* {.importc.}: float
  GREATER* {.importc.}: float
  GREEN_BITS* {.importc.}: float
  HIGH_FLOAT* {.importc.}: float
  HIGH_INT* {.importc.}: float
  IMPLEMENTATION_COLOR_READ_FORMAT* {.importc.}: float
  IMPLEMENTATION_COLOR_READ_TYPE* {.importc.}: float
  INCR* {.importc.}: float
  INCR_WRAP* {.importc.}: float
  INT* {.importc.}: float
  INT_VEC2* {.importc.}: float
  INT_VEC3* {.importc.}: float
  INT_VEC4* {.importc.}: float
  INVALID_ENUM* {.importc.}: float
  INVALID_FRAMEBUFFER_OPERATION* {.importc.}: float
  INVALID_OPERATION* {.importc.}: float
  INVALID_VALUE* {.importc.}: float
  INVERT* {.importc.}: float
  KEEP* {.importc.}: float
  LEQUAL* {.importc.}: float
  LESS* {.importc.}: float
  LINEAR* {.importc.}: float
  LINEAR_MIPMAP_LINEAR* {.importc.}: float
  LINEAR_MIPMAP_NEAREST* {.importc.}: float
  LINES* {.importc.}: float
  LINE_LOOP* {.importc.}: float
  LINE_STRIP* {.importc.}: float
  LINE_WIDTH* {.importc.}: float
  LINK_STATUS* {.importc.}: float
  LOW_FLOAT* {.importc.}: float
  LOW_INT* {.importc.}: float
  LUMINANCE* {.importc.}: float
  LUMINANCE_ALPHA* {.importc.}: float
  MAX_COMBINED_TEXTURE_IMAGE_UNITS* {.importc.}: float
  MAX_CUBE_MAP_TEXTURE_SIZE* {.importc.}: float
  MAX_FRAGMENT_UNIFORM_VECTORS* {.importc.}: float
  MAX_RENDERBUFFER_SIZE* {.importc.}: float
  MAX_TEXTURE_IMAGE_UNITS* {.importc.}: float
  MAX_TEXTURE_SIZE* {.importc.}: float
  MAX_VARYING_VECTORS* {.importc.}: float
  MAX_VERTEX_ATTRIBS* {.importc.}: float
  MAX_VERTEX_TEXTURE_IMAGE_UNITS* {.importc.}: float
  MAX_VERTEX_UNIFORM_VECTORS* {.importc.}: float
  MAX_VIEWPORT_DIMS* {.importc.}: float
  MEDIUM_FLOAT* {.importc.}: float
  MEDIUM_INT* {.importc.}: float
  MIRRORED_REPEAT* {.importc.}: float
  NEAREST* {.importc.}: float
  NEAREST_MIPMAP_LINEAR* {.importc.}: float
  NEAREST_MIPMAP_NEAREST* {.importc.}: float
  NEVER* {.importc.}: float
  NICEST* {.importc.}: float
  NONE* {.importc.}: float
  NOTEQUAL* {.importc.}: float
  NO_ERROR* {.importc.}: float
  ONE* {.importc.}: float
  ONE_MINUS_CONSTANT_ALPHA* {.importc.}: float
  ONE_MINUS_CONSTANT_COLOR* {.importc.}: float
  ONE_MINUS_DST_ALPHA* {.importc.}: float
  ONE_MINUS_DST_COLOR* {.importc.}: float
  ONE_MINUS_SRC_ALPHA* {.importc.}: float
  ONE_MINUS_SRC_COLOR* {.importc.}: float
  OUT_OF_MEMORY* {.importc.}: float
  PACK_ALIGNMENT* {.importc.}: float
  POINTS* {.importc.}: float
  POLYGON_OFFSET_FACTOR* {.importc.}: float
  POLYGON_OFFSET_FILL* {.importc.}: float
  POLYGON_OFFSET_UNITS* {.importc.}: float
  RED_BITS* {.importc.}: float
  RENDERBUFFER* {.importc.}: float
  RENDERBUFFER_ALPHA_SIZE* {.importc.}: float
  RENDERBUFFER_BINDING* {.importc.}: float
  RENDERBUFFER_BLUE_SIZE* {.importc.}: float
  RENDERBUFFER_DEPTH_SIZE* {.importc.}: float
  RENDERBUFFER_GREEN_SIZE* {.importc.}: float
  RENDERBUFFER_HEIGHT* {.importc.}: float
  RENDERBUFFER_INTERNAL_FORMAT* {.importc.}: float
  RENDERBUFFER_RED_SIZE* {.importc.}: float
  RENDERBUFFER_STENCIL_SIZE* {.importc.}: float
  RENDERBUFFER_WIDTH* {.importc.}: float
  RENDERER* {.importc.}: float
  REPEAT* {.importc.}: float
  REPLACE* {.importc.}: float
  RGB* {.importc.}: float
  RGB565* {.importc.}: float
  RGB5_A1* {.importc.}: float
  RGBA* {.importc.}: float
  RGBA4* {.importc.}: float
  SAMPLER_2D* {.importc.}: float
  SAMPLER_CUBE* {.importc.}: float
  SAMPLES* {.importc.}: float
  SAMPLE_ALPHA_TO_COVERAGE* {.importc.}: float
  SAMPLE_BUFFERS* {.importc.}: float
  SAMPLE_COVERAGE* {.importc.}: float
  SAMPLE_COVERAGE_INVERT* {.importc.}: float
  SAMPLE_COVERAGE_VALUE* {.importc.}: float
  SCISSOR_BOX* {.importc.}: float
  SCISSOR_TEST* {.importc.}: float
  SHADER_TYPE* {.importc.}: float
  SHADING_LANGUAGE_VERSION* {.importc.}: float
  SHORT* {.importc.}: float
  SRC_ALPHA* {.importc.}: float
  SRC_ALPHA_SATURATE* {.importc.}: float
  SRC_COLOR* {.importc.}: float
  STATIC_DRAW* {.importc.}: float
  STENCIL_ATTACHMENT* {.importc.}: float
  STENCIL_BACK_FAIL* {.importc.}: float
  STENCIL_BACK_FUNC* {.importc.}: float
  STENCIL_BACK_PASS_DEPTH_FAIL* {.importc.}: float
  STENCIL_BACK_PASS_DEPTH_PASS* {.importc.}: float
  STENCIL_BACK_REF* {.importc.}: float
  STENCIL_BACK_VALUE_MASK* {.importc.}: float
  STENCIL_BACK_WRITEMASK* {.importc.}: float
  STENCIL_BITS* {.importc.}: float
  STENCIL_BUFFER_BIT* {.importc.}: float
  STENCIL_CLEAR_VALUE* {.importc.}: float
  STENCIL_FAIL* {.importc.}: float
  STENCIL_FUNC* {.importc.}: float
  STENCIL_INDEX* {.importc.}: float
  STENCIL_INDEX8* {.importc.}: float
  STENCIL_PASS_DEPTH_FAIL* {.importc.}: float
  STENCIL_PASS_DEPTH_PASS* {.importc.}: float
  STENCIL_REF* {.importc.}: float
  STENCIL_TEST* {.importc.}: float
  STENCIL_VALUE_MASK* {.importc.}: float
  STENCIL_WRITEMASK* {.importc.}: float
  STREAM_DRAW* {.importc.}: float
  SUBPIXEL_BITS* {.importc.}: float
  TEXTURE* {.importc.}: float
  TEXTURE0* {.importc.}: float
  TEXTURE1* {.importc.}: float
  TEXTURE10* {.importc.}: float
  TEXTURE11* {.importc.}: float
  TEXTURE12* {.importc.}: float
  TEXTURE13* {.importc.}: float
  TEXTURE14* {.importc.}: float
  TEXTURE15* {.importc.}: float
  TEXTURE16* {.importc.}: float
  TEXTURE17* {.importc.}: float
  TEXTURE18* {.importc.}: float
  TEXTURE19* {.importc.}: float
  TEXTURE2* {.importc.}: float
  TEXTURE20* {.importc.}: float
  TEXTURE21* {.importc.}: float
  TEXTURE22* {.importc.}: float
  TEXTURE23* {.importc.}: float
  TEXTURE24* {.importc.}: float
  TEXTURE25* {.importc.}: float
  TEXTURE26* {.importc.}: float
  TEXTURE27* {.importc.}: float
  TEXTURE28* {.importc.}: float
  TEXTURE29* {.importc.}: float
  TEXTURE3* {.importc.}: float
  TEXTURE30* {.importc.}: float
  TEXTURE31* {.importc.}: float
  TEXTURE4* {.importc.}: float
  TEXTURE5* {.importc.}: float
  TEXTURE6* {.importc.}: float
  TEXTURE7* {.importc.}: float
  TEXTURE8* {.importc.}: float
  TEXTURE9* {.importc.}: float
  TEXTURE_2D* {.importc.}: float
  TEXTURE_BINDING_2D* {.importc.}: float
  TEXTURE_BINDING_CUBE_MAP* {.importc.}: float
  TEXTURE_CUBE_MAP* {.importc.}: float
  TEXTURE_CUBE_MAP_NEGATIVE_X* {.importc.}: float
  TEXTURE_CUBE_MAP_NEGATIVE_Y* {.importc.}: float
  TEXTURE_CUBE_MAP_NEGATIVE_Z* {.importc.}: float
  TEXTURE_CUBE_MAP_POSITIVE_X* {.importc.}: float
  TEXTURE_CUBE_MAP_POSITIVE_Y* {.importc.}: float
  TEXTURE_CUBE_MAP_POSITIVE_Z* {.importc.}: float
  TEXTURE_MAG_FILTER* {.importc.}: float
  TEXTURE_MIN_FILTER* {.importc.}: float
  TEXTURE_WRAP_S* {.importc.}: float
  TEXTURE_WRAP_T* {.importc.}: float
  TRIANGLES* {.importc.}: float
  TRIANGLE_FAN* {.importc.}: float
  TRIANGLE_STRIP* {.importc.}: float
  UNPACK_ALIGNMENT* {.importc.}: float
  UNPACK_COLORSPACE_CONVERSION_WEBGL* {.importc.}: float
  UNPACK_FLIP_Y_WEBGL* {.importc.}: float
  UNPACK_PREMULTIPLY_ALPHA_WEBGL* {.importc.}: float
  UNSIGNED_BYTE* {.importc.}: float
  UNSIGNED_INT* {.importc.}: float
  UNSIGNED_SHORT* {.importc.}: float
  UNSIGNED_SHORT_4_4_4_4* {.importc.}: float
  UNSIGNED_SHORT_5_5_5_1* {.importc.}: float
  UNSIGNED_SHORT_5_6_5* {.importc.}: float
  VALIDATE_STATUS* {.importc.}: float
  VENDOR* {.importc.}: float
  VERSION* {.importc.}: float
  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING* {.importc.}: float
  VERTEX_ATTRIB_ARRAY_ENABLED* {.importc.}: float
  VERTEX_ATTRIB_ARRAY_NORMALIZED* {.importc.}: float
  VERTEX_ATTRIB_ARRAY_POINTER* {.importc.}: float
  VERTEX_ATTRIB_ARRAY_SIZE* {.importc.}: float
  VERTEX_ATTRIB_ARRAY_STRIDE* {.importc.}: float
  VERTEX_ATTRIB_ARRAY_TYPE* {.importc.}: float
  VERTEX_SHADER* {.importc.}: float
  VIEWPORT* {.importc.}: float
  ZERO* {.importc.}: float
proc newWebGLRenderingContext*(): WebGLRenderingContext {.importcpp: "new WebGLRenderingContext".}
proc activeTexture*(self: WebGLRenderingContext,
    texture: float): void {.importcpp.}
proc attachShader*(self: WebGLRenderingContext, program: WebGLProgram,
    shader: WebGLShader): void {.importcpp.}
proc bindAttribLocation*(self: WebGLRenderingContext, program: WebGLProgram,
    index: float, name: cstring): void {.importcpp.}
proc bindBuffer*(self: WebGLRenderingContext, target: float,
    buffer: WebGLBuffer): void {.importcpp.}
proc bindFramebuffer*(self: WebGLRenderingContext, target: float,
    framebuffer: WebGLFramebuffer): void {.importcpp.}
proc bindRenderbuffer*(self: WebGLRenderingContext, target: float,
    renderbuffer: WebGLRenderbuffer): void {.importcpp.}
proc bindTexture*(self: WebGLRenderingContext, target: float,
    texture: WebGLTexture): void {.importcpp.}
proc blendColor*(self: WebGLRenderingContext, red: float, green: float,
    blue: float, alpha: float): void {.importcpp.}
proc blendEquation*(self: WebGLRenderingContext,
    mode: float): void {.importcpp.}
proc blendEquationSeparate*(self: WebGLRenderingContext, modeRGB: float,
    modeAlpha: float): void {.importcpp.}
proc blendFunc*(self: WebGLRenderingContext, sfactor: float,
    dfactor: float): void {.importcpp.}
proc blendFuncSeparate*(self: WebGLRenderingContext, srcRGB: float,
    dstRGB: float, srcAlpha: float, dstAlpha: float): void {.importcpp.}
proc bufferData*(self: WebGLRenderingContext, target: float, size: float,
    usage: float): void {.importcpp.}
proc bufferData*(self: WebGLRenderingContext, target: float,
    size: ArrayBufferView, usage: float): void {.importcpp.}
proc bufferData*(self: WebGLRenderingContext, target: float, size: ArrayBuffer,
    usage: float): void {.importcpp.}
proc bufferSubData*(self: WebGLRenderingContext, target: float, offset: float,
    data: ArrayBufferView): void {.importcpp.}
proc bufferSubData*(self: WebGLRenderingContext, target: float, offset: float,
    data: ArrayBuffer): void {.importcpp.}
proc checkFramebufferStatus*(self: WebGLRenderingContext,
    target: float): float {.importcpp.}
proc clear*(self: WebGLRenderingContext, mask: float): void {.importcpp.}
proc clearColor*(self: WebGLRenderingContext, red: float, green: float,
    blue: float, alpha: float): void {.importcpp.}
proc clearDepth*(self: WebGLRenderingContext, depth: float): void {.importcpp.}
proc clearStencil*(self: WebGLRenderingContext, s: float): void {.importcpp.}
proc colorMask*(self: WebGLRenderingContext, red: bool, green: bool, blue: bool,
    alpha: bool): void {.importcpp.}
proc compileShader*(self: WebGLRenderingContext,
    shader: WebGLShader): void {.importcpp.}
proc compressedTexImage2D*(self: WebGLRenderingContext, target: float,
    level: float, internalformat: float, width: float, height: float,
    border: float, data: ArrayBufferView): void {.importcpp.}
proc compressedTexSubImage2D*(self: WebGLRenderingContext, target: float,
    level: float, xoffset: float, yoffset: float, width: float, height: float,
    format: float, data: ArrayBufferView): void {.importcpp.}
proc copyTexImage2D*(self: WebGLRenderingContext, target: float, level: float,
    internalformat: float, x: float, y: float, width: float, height: float,
    border: float): void {.importcpp.}
proc copyTexSubImage2D*(self: WebGLRenderingContext, target: float,
    level: float, xoffset: float, yoffset: float, x: float, y: float,
    width: float, height: float): void {.importcpp.}
proc createBuffer*(self: WebGLRenderingContext): WebGLBuffer {.importcpp.}
proc createFramebuffer*(self: WebGLRenderingContext): WebGLFramebuffer {.importcpp.}
proc createProgram*(self: WebGLRenderingContext): WebGLProgram {.importcpp.}
proc createRenderbuffer*(self: WebGLRenderingContext): WebGLRenderbuffer {.importcpp.}
proc createShader*(self: WebGLRenderingContext,
    xType: float): WebGLShader {.importcpp.}
proc createTexture*(self: WebGLRenderingContext): WebGLTexture {.importcpp.}
proc cullFace*(self: WebGLRenderingContext, mode: float): void {.importcpp.}
proc deleteBuffer*(self: WebGLRenderingContext,
    buffer: WebGLBuffer): void {.importcpp.}
proc deleteFramebuffer*(self: WebGLRenderingContext,
    framebuffer: WebGLFramebuffer): void {.importcpp.}
proc deleteProgram*(self: WebGLRenderingContext,
    program: WebGLProgram): void {.importcpp.}
proc deleteRenderbuffer*(self: WebGLRenderingContext,
    renderbuffer: WebGLRenderbuffer): void {.importcpp.}
proc deleteShader*(self: WebGLRenderingContext,
    shader: WebGLShader): void {.importcpp.}
proc deleteTexture*(self: WebGLRenderingContext,
    texture: WebGLTexture): void {.importcpp.}
proc depthFunc*(self: WebGLRenderingContext, xFunc: float): void {.importcpp.}
proc depthMask*(self: WebGLRenderingContext, flag: bool): void {.importcpp.}
proc depthRange*(self: WebGLRenderingContext, zNear: float,
    zFar: float): void {.importcpp.}
proc detachShader*(self: WebGLRenderingContext, program: WebGLProgram,
    shader: WebGLShader): void {.importcpp.}
proc disable*(self: WebGLRenderingContext, cap: float): void {.importcpp.}
proc disableVertexAttribArray*(self: WebGLRenderingContext,
    index: float): void {.importcpp.}
proc drawArrays*(self: WebGLRenderingContext, mode: float, first: float,
    count: float): void {.importcpp.}
proc drawElements*(self: WebGLRenderingContext, mode: float, count: float,
    xType: float, offset: float): void {.importcpp.}
proc enable*(self: WebGLRenderingContext, cap: float): void {.importcpp.}
proc enableVertexAttribArray*(self: WebGLRenderingContext,
    index: float): void {.importcpp.}
proc finish*(self: WebGLRenderingContext): void {.importcpp.}
proc flush*(self: WebGLRenderingContext): void {.importcpp.}
proc framebufferRenderbuffer*(self: WebGLRenderingContext, target: float,
    attachment: float, renderbuffertarget: float,
    renderbuffer: WebGLRenderbuffer): void {.importcpp.}
proc framebufferTexture2D*(self: WebGLRenderingContext, target: float,
    attachment: float, textarget: float, texture: WebGLTexture,
    level: float): void {.importcpp.}
proc frontFace*(self: WebGLRenderingContext, mode: float): void {.importcpp.}
proc generateMipmap*(self: WebGLRenderingContext,
    target: float): void {.importcpp.}
proc getActiveAttrib*(self: WebGLRenderingContext, program: WebGLProgram,
    index: float): WebGLActiveInfo {.importcpp.}
proc getActiveUniform*(self: WebGLRenderingContext, program: WebGLProgram,
    index: float): WebGLActiveInfo {.importcpp.}
proc getAttribLocation*(self: WebGLRenderingContext, program: WebGLProgram,
    name: cstring): float {.importcpp.}
proc getContextAttributes*(self: WebGLRenderingContext): WebGLContextAttributes {.importcpp.}
proc getError*(self: WebGLRenderingContext): float {.importcpp.}
proc getProgramInfoLog*(self: WebGLRenderingContext,
    program: WebGLProgram): cstring {.importcpp.}
proc getShaderInfoLog*(self: WebGLRenderingContext,
    shader: WebGLShader): cstring {.importcpp.}
proc getShaderPrecisionFormat*(self: WebGLRenderingContext, shadertype: float,
    precisiontype: float): WebGLShaderPrecisionFormat {.importcpp.}
proc getShaderSource*(self: WebGLRenderingContext,
    shader: WebGLShader): cstring {.importcpp.}
proc getUniformLocation*(self: WebGLRenderingContext, program: WebGLProgram,
    name: cstring): WebGLUniformLocation {.importcpp.}
proc getVertexAttribOffset*(self: WebGLRenderingContext, index: float,
    pname: float): float {.importcpp.}
proc hint*(self: WebGLRenderingContext, target: float,
    mode: float): void {.importcpp.}
proc isBuffer*(self: WebGLRenderingContext,
    buffer: WebGLBuffer): bool {.importcpp.}
proc isContextLost*(self: WebGLRenderingContext): bool {.importcpp.}
proc isEnabled*(self: WebGLRenderingContext, cap: float): bool {.importcpp.}
proc isFramebuffer*(self: WebGLRenderingContext,
    framebuffer: WebGLFramebuffer): bool {.importcpp.}
proc isProgram*(self: WebGLRenderingContext,
    program: WebGLProgram): bool {.importcpp.}
proc isRenderbuffer*(self: WebGLRenderingContext,
    renderbuffer: WebGLRenderbuffer): bool {.importcpp.}
proc isShader*(self: WebGLRenderingContext,
    shader: WebGLShader): bool {.importcpp.}
proc isTexture*(self: WebGLRenderingContext,
    texture: WebGLTexture): bool {.importcpp.}
proc lineWidth*(self: WebGLRenderingContext, width: float): void {.importcpp.}
proc linkProgram*(self: WebGLRenderingContext,
    program: WebGLProgram): void {.importcpp.}
proc pixelStorei*(self: WebGLRenderingContext, pname: float,
    param: float): void {.importcpp.}
proc polygonOffset*(self: WebGLRenderingContext, factor: float,
    units: float): void {.importcpp.}
proc readPixels*(self: WebGLRenderingContext, x: float, y: float, width: float,
    height: float, format: float, xType: float,
    pixels: ArrayBufferView): void {.importcpp.}
proc renderbufferStorage*(self: WebGLRenderingContext, target: float,
    internalformat: float, width: float, height: float): void {.importcpp.}
proc sampleCoverage*(self: WebGLRenderingContext, value: float,
    invert: bool): void {.importcpp.}
proc scissor*(self: WebGLRenderingContext, x: float, y: float, width: float,
    height: float): void {.importcpp.}
proc shaderSource*(self: WebGLRenderingContext, shader: WebGLShader,
    source: cstring): void {.importcpp.}
proc stencilFunc*(self: WebGLRenderingContext, xFunc: float, xRef: float,
    mask: float): void {.importcpp.}
proc stencilFuncSeparate*(self: WebGLRenderingContext, face: float,
    xFunc: float, xRef: float, mask: float): void {.importcpp.}
proc stencilMask*(self: WebGLRenderingContext, mask: float): void {.importcpp.}
proc stencilMaskSeparate*(self: WebGLRenderingContext, face: float,
    mask: float): void {.importcpp.}
proc stencilOp*(self: WebGLRenderingContext, fail: float, zfail: float,
    zpass: float): void {.importcpp.}
proc stencilOpSeparate*(self: WebGLRenderingContext, face: float, fail: float,
    zfail: float, zpass: float): void {.importcpp.}
proc texImage2D*(self: WebGLRenderingContext, target: float, level: float,
    internalformat: float, width: float, height: float, border: float,
    format: float, xType: float, pixels: ArrayBufferView): void {.importcpp.}
proc texImage2D*(self: WebGLRenderingContext, target: float, level: float,
    internalformat: float, format: float, xType: float,
    image: HTMLImageElement): void {.importcpp.}
proc texImage2D*(self: WebGLRenderingContext, target: float, level: float,
    internalformat: float, format: float, xType: float,
    canvas: HTMLCanvasElement): void {.importcpp.}
proc texImage2D*(self: WebGLRenderingContext, target: float, level: float,
    internalformat: float, format: float, xType: float,
    video: HTMLVideoElement): void {.importcpp.}
proc texImage2D*(self: WebGLRenderingContext, target: float, level: float,
    internalformat: float, format: float, xType: float,
    pixels: ImageData): void {.importcpp.}
proc texParameterf*(self: WebGLRenderingContext, target: float, pname: float,
    param: float): void {.importcpp.}
proc texParameteri*(self: WebGLRenderingContext, target: float, pname: float,
    param: float): void {.importcpp.}
proc texSubImage2D*(self: WebGLRenderingContext, target: float, level: float,
    xoffset: float, yoffset: float, width: float, height: float, format: float,
    xType: float, pixels: ArrayBufferView): void {.importcpp.}
proc texSubImage2D*(self: WebGLRenderingContext, target: float, level: float,
    xoffset: float, yoffset: float, format: float, xType: float,
    image: HTMLImageElement): void {.importcpp.}
proc texSubImage2D*(self: WebGLRenderingContext, target: float, level: float,
    xoffset: float, yoffset: float, format: float, xType: float,
    canvas: HTMLCanvasElement): void {.importcpp.}
proc texSubImage2D*(self: WebGLRenderingContext, target: float, level: float,
    xoffset: float, yoffset: float, format: float, xType: float,
    video: HTMLVideoElement): void {.importcpp.}
proc texSubImage2D*(self: WebGLRenderingContext, target: float, level: float,
    xoffset: float, yoffset: float, format: float, xType: float,
    pixels: ImageData): void {.importcpp.}
proc uniform1f*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    x: float): void {.importcpp.}
proc uniform1fv*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    v: Float32Array): void {.importcpp.}
proc uniform1i*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    x: float): void {.importcpp.}
proc uniform1iv*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    v: Int32Array): void {.importcpp.}
proc uniform2f*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    x: float, y: float): void {.importcpp.}
proc uniform2fv*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    v: Float32Array): void {.importcpp.}
proc uniform2i*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    x: float, y: float): void {.importcpp.}
proc uniform2iv*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    v: Int32Array): void {.importcpp.}
proc uniform3f*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    x: float, y: float, z: float): void {.importcpp.}
proc uniform3fv*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    v: Float32Array): void {.importcpp.}
proc uniform3i*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    x: float, y: float, z: float): void {.importcpp.}
proc uniform3iv*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    v: Int32Array): void {.importcpp.}
proc uniform4f*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    x: float, y: float, z: float, w: float): void {.importcpp.}
proc uniform4fv*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    v: Float32Array): void {.importcpp.}
proc uniform4i*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    x: float, y: float, z: float, w: float): void {.importcpp.}
proc uniform4iv*(self: WebGLRenderingContext, location: WebGLUniformLocation,
    v: Int32Array): void {.importcpp.}
proc uniformMatrix2fv*(self: WebGLRenderingContext,
    location: WebGLUniformLocation, transpose: bool,
    value: Float32Array): void {.importcpp.}
proc uniformMatrix3fv*(self: WebGLRenderingContext,
    location: WebGLUniformLocation, transpose: bool,
    value: Float32Array): void {.importcpp.}
proc uniformMatrix4fv*(self: WebGLRenderingContext,
    location: WebGLUniformLocation, transpose: bool,
    value: Float32Array): void {.importcpp.}
proc useProgram*(self: WebGLRenderingContext,
    program: WebGLProgram): void {.importcpp.}
proc validateProgram*(self: WebGLRenderingContext,
    program: WebGLProgram): void {.importcpp.}
proc vertexAttrib1f*(self: WebGLRenderingContext, indx: float,
    x: float): void {.importcpp.}
proc vertexAttrib1fv*(self: WebGLRenderingContext, indx: float,
    values: Float32Array): void {.importcpp.}
proc vertexAttrib2f*(self: WebGLRenderingContext, indx: float, x: float,
    y: float): void {.importcpp.}
proc vertexAttrib2fv*(self: WebGLRenderingContext, indx: float,
    values: Float32Array): void {.importcpp.}
proc vertexAttrib3f*(self: WebGLRenderingContext, indx: float, x: float,
    y: float, z: float): void {.importcpp.}
proc vertexAttrib3fv*(self: WebGLRenderingContext, indx: float,
    values: Float32Array): void {.importcpp.}
proc vertexAttrib4f*(self: WebGLRenderingContext, indx: float, x: float,
    y: float, z: float, w: float): void {.importcpp.}
proc vertexAttrib4fv*(self: WebGLRenderingContext, indx: float,
    values: Float32Array): void {.importcpp.}
proc vertexAttribPointer*(self: WebGLRenderingContext, indx: float, size: float,
    xType: float, normalized: bool, stride: float,
    offset: float): void {.importcpp.}
proc viewport*(self: WebGLRenderingContext, x: float, y: float, width: float,
    height: float): void {.importcpp.}
var WebGLRenderingContextACTIVE_ATTRIBUTES *
  {.importc: "WebGLRenderingContext.ACTIVE_ATTRIBUTES", nodecl.}: float
var WebGLRenderingContextACTIVE_TEXTURE *
  {.importc: "WebGLRenderingContext.ACTIVE_TEXTURE", nodecl.}: float
var WebGLRenderingContextACTIVE_UNIFORMS *
  {.importc: "WebGLRenderingContext.ACTIVE_UNIFORMS", nodecl.}: float
var WebGLRenderingContextALIASED_LINE_WIDTH_RANGE *
  {.importc: "WebGLRenderingContext.ALIASED_LINE_WIDTH_RANGE", nodecl.}: float
var WebGLRenderingContextALIASED_POINT_SIZE_RANGE *
  {.importc: "WebGLRenderingContext.ALIASED_POINT_SIZE_RANGE", nodecl.}: float
var WebGLRenderingContextALPHA* {.importc: "WebGLRenderingContext.ALPHA",
    nodecl.}: float
var WebGLRenderingContextALPHA_BITS* {.importc: "WebGLRenderingContext.ALPHA_BITS",
    nodecl.}: float
var WebGLRenderingContextALWAYS* {.importc: "WebGLRenderingContext.ALWAYS",
    nodecl.}: float
var WebGLRenderingContextARRAY_BUFFER* {.importc: "WebGLRenderingContext.ARRAY_BUFFER",
    nodecl.}: float
var WebGLRenderingContextARRAY_BUFFER_BINDING *
  {.importc: "WebGLRenderingContext.ARRAY_BUFFER_BINDING", nodecl.}: float
var WebGLRenderingContextATTACHED_SHADERS *
  {.importc: "WebGLRenderingContext.ATTACHED_SHADERS", nodecl.}: float
var WebGLRenderingContextBACK* {.importc: "WebGLRenderingContext.BACK",
    nodecl.}: float
var WebGLRenderingContextBLEND* {.importc: "WebGLRenderingContext.BLEND",
    nodecl.}: float
var WebGLRenderingContextBLEND_COLOR* {.importc: "WebGLRenderingContext.BLEND_COLOR",
    nodecl.}: float
var WebGLRenderingContextBLEND_DST_ALPHA *
  {.importc: "WebGLRenderingContext.BLEND_DST_ALPHA", nodecl.}: float
var WebGLRenderingContextBLEND_DST_RGB *
  {.importc: "WebGLRenderingContext.BLEND_DST_RGB", nodecl.}: float
var WebGLRenderingContextBLEND_EQUATION *
  {.importc: "WebGLRenderingContext.BLEND_EQUATION", nodecl.}: float
var WebGLRenderingContextBLEND_EQUATION_ALPHA *
  {.importc: "WebGLRenderingContext.BLEND_EQUATION_ALPHA", nodecl.}: float
var WebGLRenderingContextBLEND_EQUATION_RGB *
  {.importc: "WebGLRenderingContext.BLEND_EQUATION_RGB", nodecl.}: float
var WebGLRenderingContextBLEND_SRC_ALPHA *
  {.importc: "WebGLRenderingContext.BLEND_SRC_ALPHA", nodecl.}: float
var WebGLRenderingContextBLEND_SRC_RGB *
  {.importc: "WebGLRenderingContext.BLEND_SRC_RGB", nodecl.}: float
var WebGLRenderingContextBLUE_BITS* {.importc: "WebGLRenderingContext.BLUE_BITS",
    nodecl.}: float
var WebGLRenderingContextBOOL* {.importc: "WebGLRenderingContext.BOOL",
    nodecl.}: float
var WebGLRenderingContextBOOL_VEC2* {.importc: "WebGLRenderingContext.BOOL_VEC2",
    nodecl.}: float
var WebGLRenderingContextBOOL_VEC3* {.importc: "WebGLRenderingContext.BOOL_VEC3",
    nodecl.}: float
var WebGLRenderingContextBOOL_VEC4* {.importc: "WebGLRenderingContext.BOOL_VEC4",
    nodecl.}: float
var WebGLRenderingContextBROWSER_DEFAULT_WEBGL *
  {.importc: "WebGLRenderingContext.BROWSER_DEFAULT_WEBGL", nodecl.}: float
var WebGLRenderingContextBUFFER_SIZE* {.importc: "WebGLRenderingContext.BUFFER_SIZE",
    nodecl.}: float
var WebGLRenderingContextBUFFER_USAGE* {.importc: "WebGLRenderingContext.BUFFER_USAGE",
    nodecl.}: float
var WebGLRenderingContextBYTE* {.importc: "WebGLRenderingContext.BYTE",
    nodecl.}: float
var WebGLRenderingContextCCW* {.importc: "WebGLRenderingContext.CCW",
    nodecl.}: float
var WebGLRenderingContextCLAMP_TO_EDGE *
  {.importc: "WebGLRenderingContext.CLAMP_TO_EDGE", nodecl.}: float
var WebGLRenderingContextCOLOR_ATTACHMENT0 *
  {.importc: "WebGLRenderingContext.COLOR_ATTACHMENT0", nodecl.}: float
var WebGLRenderingContextCOLOR_BUFFER_BIT *
  {.importc: "WebGLRenderingContext.COLOR_BUFFER_BIT", nodecl.}: float
var WebGLRenderingContextCOLOR_CLEAR_VALUE *
  {.importc: "WebGLRenderingContext.COLOR_CLEAR_VALUE", nodecl.}: float
var WebGLRenderingContextCOLOR_WRITEMASK *
  {.importc: "WebGLRenderingContext.COLOR_WRITEMASK", nodecl.}: float
var WebGLRenderingContextCOMPILE_STATUS *
  {.importc: "WebGLRenderingContext.COMPILE_STATUS", nodecl.}: float
var WebGLRenderingContextCOMPRESSED_TEXTURE_FORMATS *
  {.importc: "WebGLRenderingContext.COMPRESSED_TEXTURE_FORMATS", nodecl.}: float
var WebGLRenderingContextCONSTANT_ALPHA *
  {.importc: "WebGLRenderingContext.CONSTANT_ALPHA", nodecl.}: float
var WebGLRenderingContextCONSTANT_COLOR *
  {.importc: "WebGLRenderingContext.CONSTANT_COLOR", nodecl.}: float
var WebGLRenderingContextCONTEXT_LOST_WEBGL *
  {.importc: "WebGLRenderingContext.CONTEXT_LOST_WEBGL", nodecl.}: float
var WebGLRenderingContextCULL_FACE* {.importc: "WebGLRenderingContext.CULL_FACE",
    nodecl.}: float
var WebGLRenderingContextCULL_FACE_MODE *
  {.importc: "WebGLRenderingContext.CULL_FACE_MODE", nodecl.}: float
var WebGLRenderingContextCURRENT_PROGRAM *
  {.importc: "WebGLRenderingContext.CURRENT_PROGRAM", nodecl.}: float
var WebGLRenderingContextCURRENT_VERTEX_ATTRIB *
  {.importc: "WebGLRenderingContext.CURRENT_VERTEX_ATTRIB", nodecl.}: float
var WebGLRenderingContextCW* {.importc: "WebGLRenderingContext.CW",
    nodecl.}: float
var WebGLRenderingContextDECR* {.importc: "WebGLRenderingContext.DECR",
    nodecl.}: float
var WebGLRenderingContextDECR_WRAP* {.importc: "WebGLRenderingContext.DECR_WRAP",
    nodecl.}: float
var WebGLRenderingContextDELETE_STATUS *
  {.importc: "WebGLRenderingContext.DELETE_STATUS", nodecl.}: float
var WebGLRenderingContextDEPTH_ATTACHMENT *
  {.importc: "WebGLRenderingContext.DEPTH_ATTACHMENT", nodecl.}: float
var WebGLRenderingContextDEPTH_BITS* {.importc: "WebGLRenderingContext.DEPTH_BITS",
    nodecl.}: float
var WebGLRenderingContextDEPTH_BUFFER_BIT *
  {.importc: "WebGLRenderingContext.DEPTH_BUFFER_BIT", nodecl.}: float
var WebGLRenderingContextDEPTH_CLEAR_VALUE *
  {.importc: "WebGLRenderingContext.DEPTH_CLEAR_VALUE", nodecl.}: float
var WebGLRenderingContextDEPTH_COMPONENT *
  {.importc: "WebGLRenderingContext.DEPTH_COMPONENT", nodecl.}: float
var WebGLRenderingContextDEPTH_COMPONENT16 *
  {.importc: "WebGLRenderingContext.DEPTH_COMPONENT16", nodecl.}: float
var WebGLRenderingContextDEPTH_FUNC* {.importc: "WebGLRenderingContext.DEPTH_FUNC",
    nodecl.}: float
var WebGLRenderingContextDEPTH_RANGE* {.importc: "WebGLRenderingContext.DEPTH_RANGE",
    nodecl.}: float
var WebGLRenderingContextDEPTH_STENCIL *
  {.importc: "WebGLRenderingContext.DEPTH_STENCIL", nodecl.}: float
var WebGLRenderingContextDEPTH_STENCIL_ATTACHMENT *
  {.importc: "WebGLRenderingContext.DEPTH_STENCIL_ATTACHMENT", nodecl.}: float
var WebGLRenderingContextDEPTH_TEST* {.importc: "WebGLRenderingContext.DEPTH_TEST",
    nodecl.}: float
var WebGLRenderingContextDEPTH_WRITEMASK *
  {.importc: "WebGLRenderingContext.DEPTH_WRITEMASK", nodecl.}: float
var WebGLRenderingContextDITHER* {.importc: "WebGLRenderingContext.DITHER",
    nodecl.}: float
var WebGLRenderingContextDONT_CARE* {.importc: "WebGLRenderingContext.DONT_CARE",
    nodecl.}: float
var WebGLRenderingContextDST_ALPHA* {.importc: "WebGLRenderingContext.DST_ALPHA",
    nodecl.}: float
var WebGLRenderingContextDST_COLOR* {.importc: "WebGLRenderingContext.DST_COLOR",
    nodecl.}: float
var WebGLRenderingContextDYNAMIC_DRAW* {.importc: "WebGLRenderingContext.DYNAMIC_DRAW",
    nodecl.}: float
var WebGLRenderingContextELEMENT_ARRAY_BUFFER *
  {.importc: "WebGLRenderingContext.ELEMENT_ARRAY_BUFFER", nodecl.}: float
var WebGLRenderingContextELEMENT_ARRAY_BUFFER_BINDING *
  {.importc: "WebGLRenderingContext.ELEMENT_ARRAY_BUFFER_BINDING",
    nodecl.}: float
var WebGLRenderingContextEQUAL* {.importc: "WebGLRenderingContext.EQUAL",
    nodecl.}: float
var WebGLRenderingContextFASTEST* {.importc: "WebGLRenderingContext.FASTEST",
    nodecl.}: float
var WebGLRenderingContextFLOAT* {.importc: "WebGLRenderingContext.FLOAT",
    nodecl.}: float
var WebGLRenderingContextFLOAT_MAT2* {.importc: "WebGLRenderingContext.FLOAT_MAT2",
    nodecl.}: float
var WebGLRenderingContextFLOAT_MAT3* {.importc: "WebGLRenderingContext.FLOAT_MAT3",
    nodecl.}: float
var WebGLRenderingContextFLOAT_MAT4* {.importc: "WebGLRenderingContext.FLOAT_MAT4",
    nodecl.}: float
var WebGLRenderingContextFLOAT_VEC2* {.importc: "WebGLRenderingContext.FLOAT_VEC2",
    nodecl.}: float
var WebGLRenderingContextFLOAT_VEC3* {.importc: "WebGLRenderingContext.FLOAT_VEC3",
    nodecl.}: float
var WebGLRenderingContextFLOAT_VEC4* {.importc: "WebGLRenderingContext.FLOAT_VEC4",
    nodecl.}: float
var WebGLRenderingContextFRAGMENT_SHADER *
  {.importc: "WebGLRenderingContext.FRAGMENT_SHADER", nodecl.}: float
var WebGLRenderingContextFRAMEBUFFER* {.importc: "WebGLRenderingContext.FRAMEBUFFER",
    nodecl.}: float
var WebGLRenderingContextFRAMEBUFFER_ATTACHMENT_OBJECT_NAME *
  {.importc: "WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME",
    nodecl.}: float
var WebGLRenderingContextFRAMEBUFFER_ATTACHMENT_OBJECT_TYPE *
  {.importc: "WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE",
    nodecl.}: float
var WebGLRenderingContextFRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE *
  {.importc: "WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE",
    nodecl.}: float
var WebGLRenderingContextFRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL *
  {.importc: "WebGLRenderingContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL",
    nodecl.}: float
var WebGLRenderingContextFRAMEBUFFER_BINDING *
  {.importc: "WebGLRenderingContext.FRAMEBUFFER_BINDING", nodecl.}: float
var WebGLRenderingContextFRAMEBUFFER_COMPLETE *
  {.importc: "WebGLRenderingContext.FRAMEBUFFER_COMPLETE", nodecl.}: float
var WebGLRenderingContextFRAMEBUFFER_INCOMPLETE_ATTACHMENT *
  {.importc: "WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT",
    nodecl.}: float
var WebGLRenderingContextFRAMEBUFFER_INCOMPLETE_DIMENSIONS *
  {.importc: "WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS",
    nodecl.}: float
var WebGLRenderingContextFRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT *
  {.importc: "WebGLRenderingContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT",
    nodecl.}: float
var WebGLRenderingContextFRAMEBUFFER_UNSUPPORTED *
  {.importc: "WebGLRenderingContext.FRAMEBUFFER_UNSUPPORTED", nodecl.}: float
var WebGLRenderingContextFRONT* {.importc: "WebGLRenderingContext.FRONT",
    nodecl.}: float
var WebGLRenderingContextFRONT_AND_BACK *
  {.importc: "WebGLRenderingContext.FRONT_AND_BACK", nodecl.}: float
var WebGLRenderingContextFRONT_FACE* {.importc: "WebGLRenderingContext.FRONT_FACE",
    nodecl.}: float
var WebGLRenderingContextFUNC_ADD* {.importc: "WebGLRenderingContext.FUNC_ADD",
    nodecl.}: float
var WebGLRenderingContextFUNC_REVERSE_SUBTRACT *
  {.importc: "WebGLRenderingContext.FUNC_REVERSE_SUBTRACT", nodecl.}: float
var WebGLRenderingContextFUNC_SUBTRACT *
  {.importc: "WebGLRenderingContext.FUNC_SUBTRACT", nodecl.}: float
var WebGLRenderingContextGENERATE_MIPMAP_HINT *
  {.importc: "WebGLRenderingContext.GENERATE_MIPMAP_HINT", nodecl.}: float
var WebGLRenderingContextGEQUAL* {.importc: "WebGLRenderingContext.GEQUAL",
    nodecl.}: float
var WebGLRenderingContextGREATER* {.importc: "WebGLRenderingContext.GREATER",
    nodecl.}: float
var WebGLRenderingContextGREEN_BITS* {.importc: "WebGLRenderingContext.GREEN_BITS",
    nodecl.}: float
var WebGLRenderingContextHIGH_FLOAT* {.importc: "WebGLRenderingContext.HIGH_FLOAT",
    nodecl.}: float
var WebGLRenderingContextHIGH_INT* {.importc: "WebGLRenderingContext.HIGH_INT",
    nodecl.}: float
var WebGLRenderingContextIMPLEMENTATION_COLOR_READ_FORMAT *
  {.importc: "WebGLRenderingContext.IMPLEMENTATION_COLOR_READ_FORMAT",
    nodecl.}: float
var WebGLRenderingContextIMPLEMENTATION_COLOR_READ_TYPE *
  {.importc: "WebGLRenderingContext.IMPLEMENTATION_COLOR_READ_TYPE",
    nodecl.}: float
var WebGLRenderingContextINCR* {.importc: "WebGLRenderingContext.INCR",
    nodecl.}: float
var WebGLRenderingContextINCR_WRAP* {.importc: "WebGLRenderingContext.INCR_WRAP",
    nodecl.}: float
var WebGLRenderingContextINT* {.importc: "WebGLRenderingContext.INT",
    nodecl.}: float
var WebGLRenderingContextINT_VEC2* {.importc: "WebGLRenderingContext.INT_VEC2",
    nodecl.}: float
var WebGLRenderingContextINT_VEC3* {.importc: "WebGLRenderingContext.INT_VEC3",
    nodecl.}: float
var WebGLRenderingContextINT_VEC4* {.importc: "WebGLRenderingContext.INT_VEC4",
    nodecl.}: float
var WebGLRenderingContextINVALID_ENUM* {.importc: "WebGLRenderingContext.INVALID_ENUM",
    nodecl.}: float
var WebGLRenderingContextINVALID_FRAMEBUFFER_OPERATION *
  {.importc: "WebGLRenderingContext.INVALID_FRAMEBUFFER_OPERATION",
    nodecl.}: float
var WebGLRenderingContextINVALID_OPERATION *
  {.importc: "WebGLRenderingContext.INVALID_OPERATION", nodecl.}: float
var WebGLRenderingContextINVALID_VALUE *
  {.importc: "WebGLRenderingContext.INVALID_VALUE", nodecl.}: float
var WebGLRenderingContextINVERT* {.importc: "WebGLRenderingContext.INVERT",
    nodecl.}: float
var WebGLRenderingContextKEEP* {.importc: "WebGLRenderingContext.KEEP",
    nodecl.}: float
var WebGLRenderingContextLEQUAL* {.importc: "WebGLRenderingContext.LEQUAL",
    nodecl.}: float
var WebGLRenderingContextLESS* {.importc: "WebGLRenderingContext.LESS",
    nodecl.}: float
var WebGLRenderingContextLINEAR* {.importc: "WebGLRenderingContext.LINEAR",
    nodecl.}: float
var WebGLRenderingContextLINEAR_MIPMAP_LINEAR *
  {.importc: "WebGLRenderingContext.LINEAR_MIPMAP_LINEAR", nodecl.}: float
var WebGLRenderingContextLINEAR_MIPMAP_NEAREST *
  {.importc: "WebGLRenderingContext.LINEAR_MIPMAP_NEAREST", nodecl.}: float
var WebGLRenderingContextLINES* {.importc: "WebGLRenderingContext.LINES",
    nodecl.}: float
var WebGLRenderingContextLINE_LOOP* {.importc: "WebGLRenderingContext.LINE_LOOP",
    nodecl.}: float
var WebGLRenderingContextLINE_STRIP* {.importc: "WebGLRenderingContext.LINE_STRIP",
    nodecl.}: float
var WebGLRenderingContextLINE_WIDTH* {.importc: "WebGLRenderingContext.LINE_WIDTH",
    nodecl.}: float
var WebGLRenderingContextLINK_STATUS* {.importc: "WebGLRenderingContext.LINK_STATUS",
    nodecl.}: float
var WebGLRenderingContextLOW_FLOAT* {.importc: "WebGLRenderingContext.LOW_FLOAT",
    nodecl.}: float
var WebGLRenderingContextLOW_INT* {.importc: "WebGLRenderingContext.LOW_INT",
    nodecl.}: float
var WebGLRenderingContextLUMINANCE* {.importc: "WebGLRenderingContext.LUMINANCE",
    nodecl.}: float
var WebGLRenderingContextLUMINANCE_ALPHA *
  {.importc: "WebGLRenderingContext.LUMINANCE_ALPHA", nodecl.}: float
var WebGLRenderingContextMAX_COMBINED_TEXTURE_IMAGE_UNITS *
  {.importc: "WebGLRenderingContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS",
    nodecl.}: float
var WebGLRenderingContextMAX_CUBE_MAP_TEXTURE_SIZE *
  {.importc: "WebGLRenderingContext.MAX_CUBE_MAP_TEXTURE_SIZE", nodecl.}: float
var WebGLRenderingContextMAX_FRAGMENT_UNIFORM_VECTORS *
  {.importc: "WebGLRenderingContext.MAX_FRAGMENT_UNIFORM_VECTORS",
    nodecl.}: float
var WebGLRenderingContextMAX_RENDERBUFFER_SIZE *
  {.importc: "WebGLRenderingContext.MAX_RENDERBUFFER_SIZE", nodecl.}: float
var WebGLRenderingContextMAX_TEXTURE_IMAGE_UNITS *
  {.importc: "WebGLRenderingContext.MAX_TEXTURE_IMAGE_UNITS", nodecl.}: float
var WebGLRenderingContextMAX_TEXTURE_SIZE *
  {.importc: "WebGLRenderingContext.MAX_TEXTURE_SIZE", nodecl.}: float
var WebGLRenderingContextMAX_VARYING_VECTORS *
  {.importc: "WebGLRenderingContext.MAX_VARYING_VECTORS", nodecl.}: float
var WebGLRenderingContextMAX_VERTEX_ATTRIBS *
  {.importc: "WebGLRenderingContext.MAX_VERTEX_ATTRIBS", nodecl.}: float
var WebGLRenderingContextMAX_VERTEX_TEXTURE_IMAGE_UNITS *
  {.importc: "WebGLRenderingContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS",
    nodecl.}: float
var WebGLRenderingContextMAX_VERTEX_UNIFORM_VECTORS *
  {.importc: "WebGLRenderingContext.MAX_VERTEX_UNIFORM_VECTORS", nodecl.}: float
var WebGLRenderingContextMAX_VIEWPORT_DIMS *
  {.importc: "WebGLRenderingContext.MAX_VIEWPORT_DIMS", nodecl.}: float
var WebGLRenderingContextMEDIUM_FLOAT* {.importc: "WebGLRenderingContext.MEDIUM_FLOAT",
    nodecl.}: float
var WebGLRenderingContextMEDIUM_INT* {.importc: "WebGLRenderingContext.MEDIUM_INT",
    nodecl.}: float
var WebGLRenderingContextMIRRORED_REPEAT *
  {.importc: "WebGLRenderingContext.MIRRORED_REPEAT", nodecl.}: float
var WebGLRenderingContextNEAREST* {.importc: "WebGLRenderingContext.NEAREST",
    nodecl.}: float
var WebGLRenderingContextNEAREST_MIPMAP_LINEAR *
  {.importc: "WebGLRenderingContext.NEAREST_MIPMAP_LINEAR", nodecl.}: float
var WebGLRenderingContextNEAREST_MIPMAP_NEAREST *
  {.importc: "WebGLRenderingContext.NEAREST_MIPMAP_NEAREST", nodecl.}: float
var WebGLRenderingContextNEVER* {.importc: "WebGLRenderingContext.NEVER",
    nodecl.}: float
var WebGLRenderingContextNICEST* {.importc: "WebGLRenderingContext.NICEST",
    nodecl.}: float
var WebGLRenderingContextNONE* {.importc: "WebGLRenderingContext.NONE",
    nodecl.}: float
var WebGLRenderingContextNOTEQUAL* {.importc: "WebGLRenderingContext.NOTEQUAL",
    nodecl.}: float
var WebGLRenderingContextNO_ERROR* {.importc: "WebGLRenderingContext.NO_ERROR",
    nodecl.}: float
var WebGLRenderingContextONE* {.importc: "WebGLRenderingContext.ONE",
    nodecl.}: float
var WebGLRenderingContextONE_MINUS_CONSTANT_ALPHA *
  {.importc: "WebGLRenderingContext.ONE_MINUS_CONSTANT_ALPHA", nodecl.}: float
var WebGLRenderingContextONE_MINUS_CONSTANT_COLOR *
  {.importc: "WebGLRenderingContext.ONE_MINUS_CONSTANT_COLOR", nodecl.}: float
var WebGLRenderingContextONE_MINUS_DST_ALPHA *
  {.importc: "WebGLRenderingContext.ONE_MINUS_DST_ALPHA", nodecl.}: float
var WebGLRenderingContextONE_MINUS_DST_COLOR *
  {.importc: "WebGLRenderingContext.ONE_MINUS_DST_COLOR", nodecl.}: float
var WebGLRenderingContextONE_MINUS_SRC_ALPHA *
  {.importc: "WebGLRenderingContext.ONE_MINUS_SRC_ALPHA", nodecl.}: float
var WebGLRenderingContextONE_MINUS_SRC_COLOR *
  {.importc: "WebGLRenderingContext.ONE_MINUS_SRC_COLOR", nodecl.}: float
var WebGLRenderingContextOUT_OF_MEMORY *
  {.importc: "WebGLRenderingContext.OUT_OF_MEMORY", nodecl.}: float
var WebGLRenderingContextPACK_ALIGNMENT *
  {.importc: "WebGLRenderingContext.PACK_ALIGNMENT", nodecl.}: float
var WebGLRenderingContextPOINTS* {.importc: "WebGLRenderingContext.POINTS",
    nodecl.}: float
var WebGLRenderingContextPOLYGON_OFFSET_FACTOR *
  {.importc: "WebGLRenderingContext.POLYGON_OFFSET_FACTOR", nodecl.}: float
var WebGLRenderingContextPOLYGON_OFFSET_FILL *
  {.importc: "WebGLRenderingContext.POLYGON_OFFSET_FILL", nodecl.}: float
var WebGLRenderingContextPOLYGON_OFFSET_UNITS *
  {.importc: "WebGLRenderingContext.POLYGON_OFFSET_UNITS", nodecl.}: float
var WebGLRenderingContextRED_BITS* {.importc: "WebGLRenderingContext.RED_BITS",
    nodecl.}: float
var WebGLRenderingContextRENDERBUFFER* {.importc: "WebGLRenderingContext.RENDERBUFFER",
    nodecl.}: float
var WebGLRenderingContextRENDERBUFFER_ALPHA_SIZE *
  {.importc: "WebGLRenderingContext.RENDERBUFFER_ALPHA_SIZE", nodecl.}: float
var WebGLRenderingContextRENDERBUFFER_BINDING *
  {.importc: "WebGLRenderingContext.RENDERBUFFER_BINDING", nodecl.}: float
var WebGLRenderingContextRENDERBUFFER_BLUE_SIZE *
  {.importc: "WebGLRenderingContext.RENDERBUFFER_BLUE_SIZE", nodecl.}: float
var WebGLRenderingContextRENDERBUFFER_DEPTH_SIZE *
  {.importc: "WebGLRenderingContext.RENDERBUFFER_DEPTH_SIZE", nodecl.}: float
var WebGLRenderingContextRENDERBUFFER_GREEN_SIZE *
  {.importc: "WebGLRenderingContext.RENDERBUFFER_GREEN_SIZE", nodecl.}: float
var WebGLRenderingContextRENDERBUFFER_HEIGHT *
  {.importc: "WebGLRenderingContext.RENDERBUFFER_HEIGHT", nodecl.}: float
var WebGLRenderingContextRENDERBUFFER_INTERNAL_FORMAT *
  {.importc: "WebGLRenderingContext.RENDERBUFFER_INTERNAL_FORMAT",
    nodecl.}: float
var WebGLRenderingContextRENDERBUFFER_RED_SIZE *
  {.importc: "WebGLRenderingContext.RENDERBUFFER_RED_SIZE", nodecl.}: float
var WebGLRenderingContextRENDERBUFFER_STENCIL_SIZE *
  {.importc: "WebGLRenderingContext.RENDERBUFFER_STENCIL_SIZE", nodecl.}: float
var WebGLRenderingContextRENDERBUFFER_WIDTH *
  {.importc: "WebGLRenderingContext.RENDERBUFFER_WIDTH", nodecl.}: float
var WebGLRenderingContextRENDERER* {.importc: "WebGLRenderingContext.RENDERER",
    nodecl.}: float
var WebGLRenderingContextREPEAT* {.importc: "WebGLRenderingContext.REPEAT",
    nodecl.}: float
var WebGLRenderingContextREPLACE* {.importc: "WebGLRenderingContext.REPLACE",
    nodecl.}: float
var WebGLRenderingContextRGB* {.importc: "WebGLRenderingContext.RGB",
    nodecl.}: float
var WebGLRenderingContextRGB565* {.importc: "WebGLRenderingContext.RGB565",
    nodecl.}: float
var WebGLRenderingContextRGB5_A1* {.importc: "WebGLRenderingContext.RGB5_A1",
    nodecl.}: float
var WebGLRenderingContextRGBA* {.importc: "WebGLRenderingContext.RGBA",
    nodecl.}: float
var WebGLRenderingContextRGBA4* {.importc: "WebGLRenderingContext.RGBA4",
    nodecl.}: float
var WebGLRenderingContextSAMPLER_2D* {.importc: "WebGLRenderingContext.SAMPLER_2D",
    nodecl.}: float
var WebGLRenderingContextSAMPLER_CUBE* {.importc: "WebGLRenderingContext.SAMPLER_CUBE",
    nodecl.}: float
var WebGLRenderingContextSAMPLES* {.importc: "WebGLRenderingContext.SAMPLES",
    nodecl.}: float
var WebGLRenderingContextSAMPLE_ALPHA_TO_COVERAGE *
  {.importc: "WebGLRenderingContext.SAMPLE_ALPHA_TO_COVERAGE", nodecl.}: float
var WebGLRenderingContextSAMPLE_BUFFERS *
  {.importc: "WebGLRenderingContext.SAMPLE_BUFFERS", nodecl.}: float
var WebGLRenderingContextSAMPLE_COVERAGE *
  {.importc: "WebGLRenderingContext.SAMPLE_COVERAGE", nodecl.}: float
var WebGLRenderingContextSAMPLE_COVERAGE_INVERT *
  {.importc: "WebGLRenderingContext.SAMPLE_COVERAGE_INVERT", nodecl.}: float
var WebGLRenderingContextSAMPLE_COVERAGE_VALUE *
  {.importc: "WebGLRenderingContext.SAMPLE_COVERAGE_VALUE", nodecl.}: float
var WebGLRenderingContextSCISSOR_BOX* {.importc: "WebGLRenderingContext.SCISSOR_BOX",
    nodecl.}: float
var WebGLRenderingContextSCISSOR_TEST* {.importc: "WebGLRenderingContext.SCISSOR_TEST",
    nodecl.}: float
var WebGLRenderingContextSHADER_TYPE* {.importc: "WebGLRenderingContext.SHADER_TYPE",
    nodecl.}: float
var WebGLRenderingContextSHADING_LANGUAGE_VERSION *
  {.importc: "WebGLRenderingContext.SHADING_LANGUAGE_VERSION", nodecl.}: float
var WebGLRenderingContextSHORT* {.importc: "WebGLRenderingContext.SHORT",
    nodecl.}: float
var WebGLRenderingContextSRC_ALPHA* {.importc: "WebGLRenderingContext.SRC_ALPHA",
    nodecl.}: float
var WebGLRenderingContextSRC_ALPHA_SATURATE *
  {.importc: "WebGLRenderingContext.SRC_ALPHA_SATURATE", nodecl.}: float
var WebGLRenderingContextSRC_COLOR* {.importc: "WebGLRenderingContext.SRC_COLOR",
    nodecl.}: float
var WebGLRenderingContextSTATIC_DRAW* {.importc: "WebGLRenderingContext.STATIC_DRAW",
    nodecl.}: float
var WebGLRenderingContextSTENCIL_ATTACHMENT *
  {.importc: "WebGLRenderingContext.STENCIL_ATTACHMENT", nodecl.}: float
var WebGLRenderingContextSTENCIL_BACK_FAIL *
  {.importc: "WebGLRenderingContext.STENCIL_BACK_FAIL", nodecl.}: float
var WebGLRenderingContextSTENCIL_BACK_FUNC *
  {.importc: "WebGLRenderingContext.STENCIL_BACK_FUNC", nodecl.}: float
var WebGLRenderingContextSTENCIL_BACK_PASS_DEPTH_FAIL *
  {.importc: "WebGLRenderingContext.STENCIL_BACK_PASS_DEPTH_FAIL",
    nodecl.}: float
var WebGLRenderingContextSTENCIL_BACK_PASS_DEPTH_PASS *
  {.importc: "WebGLRenderingContext.STENCIL_BACK_PASS_DEPTH_PASS",
    nodecl.}: float
var WebGLRenderingContextSTENCIL_BACK_REF *
  {.importc: "WebGLRenderingContext.STENCIL_BACK_REF", nodecl.}: float
var WebGLRenderingContextSTENCIL_BACK_VALUE_MASK *
  {.importc: "WebGLRenderingContext.STENCIL_BACK_VALUE_MASK", nodecl.}: float
var WebGLRenderingContextSTENCIL_BACK_WRITEMASK *
  {.importc: "WebGLRenderingContext.STENCIL_BACK_WRITEMASK", nodecl.}: float
var WebGLRenderingContextSTENCIL_BITS* {.importc: "WebGLRenderingContext.STENCIL_BITS",
    nodecl.}: float
var WebGLRenderingContextSTENCIL_BUFFER_BIT *
  {.importc: "WebGLRenderingContext.STENCIL_BUFFER_BIT", nodecl.}: float
var WebGLRenderingContextSTENCIL_CLEAR_VALUE *
  {.importc: "WebGLRenderingContext.STENCIL_CLEAR_VALUE", nodecl.}: float
var WebGLRenderingContextSTENCIL_FAIL* {.importc: "WebGLRenderingContext.STENCIL_FAIL",
    nodecl.}: float
var WebGLRenderingContextSTENCIL_FUNC* {.importc: "WebGLRenderingContext.STENCIL_FUNC",
    nodecl.}: float
var WebGLRenderingContextSTENCIL_INDEX *
  {.importc: "WebGLRenderingContext.STENCIL_INDEX", nodecl.}: float
var WebGLRenderingContextSTENCIL_INDEX8 *
  {.importc: "WebGLRenderingContext.STENCIL_INDEX8", nodecl.}: float
var WebGLRenderingContextSTENCIL_PASS_DEPTH_FAIL *
  {.importc: "WebGLRenderingContext.STENCIL_PASS_DEPTH_FAIL", nodecl.}: float
var WebGLRenderingContextSTENCIL_PASS_DEPTH_PASS *
  {.importc: "WebGLRenderingContext.STENCIL_PASS_DEPTH_PASS", nodecl.}: float
var WebGLRenderingContextSTENCIL_REF* {.importc: "WebGLRenderingContext.STENCIL_REF",
    nodecl.}: float
var WebGLRenderingContextSTENCIL_TEST* {.importc: "WebGLRenderingContext.STENCIL_TEST",
    nodecl.}: float
var WebGLRenderingContextSTENCIL_VALUE_MASK *
  {.importc: "WebGLRenderingContext.STENCIL_VALUE_MASK", nodecl.}: float
var WebGLRenderingContextSTENCIL_WRITEMASK *
  {.importc: "WebGLRenderingContext.STENCIL_WRITEMASK", nodecl.}: float
var WebGLRenderingContextSTREAM_DRAW* {.importc: "WebGLRenderingContext.STREAM_DRAW",
    nodecl.}: float
var WebGLRenderingContextSUBPIXEL_BITS *
  {.importc: "WebGLRenderingContext.SUBPIXEL_BITS", nodecl.}: float
var WebGLRenderingContextTEXTURE* {.importc: "WebGLRenderingContext.TEXTURE",
    nodecl.}: float
var WebGLRenderingContextTEXTURE0* {.importc: "WebGLRenderingContext.TEXTURE0",
    nodecl.}: float
var WebGLRenderingContextTEXTURE1* {.importc: "WebGLRenderingContext.TEXTURE1",
    nodecl.}: float
var WebGLRenderingContextTEXTURE10* {.importc: "WebGLRenderingContext.TEXTURE10",
    nodecl.}: float
var WebGLRenderingContextTEXTURE11* {.importc: "WebGLRenderingContext.TEXTURE11",
    nodecl.}: float
var WebGLRenderingContextTEXTURE12* {.importc: "WebGLRenderingContext.TEXTURE12",
    nodecl.}: float
var WebGLRenderingContextTEXTURE13* {.importc: "WebGLRenderingContext.TEXTURE13",
    nodecl.}: float
var WebGLRenderingContextTEXTURE14* {.importc: "WebGLRenderingContext.TEXTURE14",
    nodecl.}: float
var WebGLRenderingContextTEXTURE15* {.importc: "WebGLRenderingContext.TEXTURE15",
    nodecl.}: float
var WebGLRenderingContextTEXTURE16* {.importc: "WebGLRenderingContext.TEXTURE16",
    nodecl.}: float
var WebGLRenderingContextTEXTURE17* {.importc: "WebGLRenderingContext.TEXTURE17",
    nodecl.}: float
var WebGLRenderingContextTEXTURE18* {.importc: "WebGLRenderingContext.TEXTURE18",
    nodecl.}: float
var WebGLRenderingContextTEXTURE19* {.importc: "WebGLRenderingContext.TEXTURE19",
    nodecl.}: float
var WebGLRenderingContextTEXTURE2* {.importc: "WebGLRenderingContext.TEXTURE2",
    nodecl.}: float
var WebGLRenderingContextTEXTURE20* {.importc: "WebGLRenderingContext.TEXTURE20",
    nodecl.}: float
var WebGLRenderingContextTEXTURE21* {.importc: "WebGLRenderingContext.TEXTURE21",
    nodecl.}: float
var WebGLRenderingContextTEXTURE22* {.importc: "WebGLRenderingContext.TEXTURE22",
    nodecl.}: float
var WebGLRenderingContextTEXTURE23* {.importc: "WebGLRenderingContext.TEXTURE23",
    nodecl.}: float
var WebGLRenderingContextTEXTURE24* {.importc: "WebGLRenderingContext.TEXTURE24",
    nodecl.}: float
var WebGLRenderingContextTEXTURE25* {.importc: "WebGLRenderingContext.TEXTURE25",
    nodecl.}: float
var WebGLRenderingContextTEXTURE26* {.importc: "WebGLRenderingContext.TEXTURE26",
    nodecl.}: float
var WebGLRenderingContextTEXTURE27* {.importc: "WebGLRenderingContext.TEXTURE27",
    nodecl.}: float
var WebGLRenderingContextTEXTURE28* {.importc: "WebGLRenderingContext.TEXTURE28",
    nodecl.}: float
var WebGLRenderingContextTEXTURE29* {.importc: "WebGLRenderingContext.TEXTURE29",
    nodecl.}: float
var WebGLRenderingContextTEXTURE3* {.importc: "WebGLRenderingContext.TEXTURE3",
    nodecl.}: float
var WebGLRenderingContextTEXTURE30* {.importc: "WebGLRenderingContext.TEXTURE30",
    nodecl.}: float
var WebGLRenderingContextTEXTURE31* {.importc: "WebGLRenderingContext.TEXTURE31",
    nodecl.}: float
var WebGLRenderingContextTEXTURE4* {.importc: "WebGLRenderingContext.TEXTURE4",
    nodecl.}: float
var WebGLRenderingContextTEXTURE5* {.importc: "WebGLRenderingContext.TEXTURE5",
    nodecl.}: float
var WebGLRenderingContextTEXTURE6* {.importc: "WebGLRenderingContext.TEXTURE6",
    nodecl.}: float
var WebGLRenderingContextTEXTURE7* {.importc: "WebGLRenderingContext.TEXTURE7",
    nodecl.}: float
var WebGLRenderingContextTEXTURE8* {.importc: "WebGLRenderingContext.TEXTURE8",
    nodecl.}: float
var WebGLRenderingContextTEXTURE9* {.importc: "WebGLRenderingContext.TEXTURE9",
    nodecl.}: float
var WebGLRenderingContextTEXTURE_2D* {.importc: "WebGLRenderingContext.TEXTURE_2D",
    nodecl.}: float
var WebGLRenderingContextTEXTURE_BINDING_2D *
  {.importc: "WebGLRenderingContext.TEXTURE_BINDING_2D", nodecl.}: float
var WebGLRenderingContextTEXTURE_BINDING_CUBE_MAP *
  {.importc: "WebGLRenderingContext.TEXTURE_BINDING_CUBE_MAP", nodecl.}: float
var WebGLRenderingContextTEXTURE_CUBE_MAP *
  {.importc: "WebGLRenderingContext.TEXTURE_CUBE_MAP", nodecl.}: float
var WebGLRenderingContextTEXTURE_CUBE_MAP_NEGATIVE_X *
  {.importc: "WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_X",
    nodecl.}: float
var WebGLRenderingContextTEXTURE_CUBE_MAP_NEGATIVE_Y *
  {.importc: "WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Y",
    nodecl.}: float
var WebGLRenderingContextTEXTURE_CUBE_MAP_NEGATIVE_Z *
  {.importc: "WebGLRenderingContext.TEXTURE_CUBE_MAP_NEGATIVE_Z",
    nodecl.}: float
var WebGLRenderingContextTEXTURE_CUBE_MAP_POSITIVE_X *
  {.importc: "WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_X",
    nodecl.}: float
var WebGLRenderingContextTEXTURE_CUBE_MAP_POSITIVE_Y *
  {.importc: "WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Y",
    nodecl.}: float
var WebGLRenderingContextTEXTURE_CUBE_MAP_POSITIVE_Z *
  {.importc: "WebGLRenderingContext.TEXTURE_CUBE_MAP_POSITIVE_Z",
    nodecl.}: float
var WebGLRenderingContextTEXTURE_MAG_FILTER *
  {.importc: "WebGLRenderingContext.TEXTURE_MAG_FILTER", nodecl.}: float
var WebGLRenderingContextTEXTURE_MIN_FILTER *
  {.importc: "WebGLRenderingContext.TEXTURE_MIN_FILTER", nodecl.}: float
var WebGLRenderingContextTEXTURE_WRAP_S *
  {.importc: "WebGLRenderingContext.TEXTURE_WRAP_S", nodecl.}: float
var WebGLRenderingContextTEXTURE_WRAP_T *
  {.importc: "WebGLRenderingContext.TEXTURE_WRAP_T", nodecl.}: float
var WebGLRenderingContextTRIANGLES* {.importc: "WebGLRenderingContext.TRIANGLES",
    nodecl.}: float
var WebGLRenderingContextTRIANGLE_FAN* {.importc: "WebGLRenderingContext.TRIANGLE_FAN",
    nodecl.}: float
var WebGLRenderingContextTRIANGLE_STRIP *
  {.importc: "WebGLRenderingContext.TRIANGLE_STRIP", nodecl.}: float
var WebGLRenderingContextUNPACK_ALIGNMENT *
  {.importc: "WebGLRenderingContext.UNPACK_ALIGNMENT", nodecl.}: float
var WebGLRenderingContextUNPACK_COLORSPACE_CONVERSION_WEBGL *
  {.importc: "WebGLRenderingContext.UNPACK_COLORSPACE_CONVERSION_WEBGL",
    nodecl.}: float
var WebGLRenderingContextUNPACK_FLIP_Y_WEBGL *
  {.importc: "WebGLRenderingContext.UNPACK_FLIP_Y_WEBGL", nodecl.}: float
var WebGLRenderingContextUNPACK_PREMULTIPLY_ALPHA_WEBGL *
  {.importc: "WebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL",
    nodecl.}: float
var WebGLRenderingContextUNSIGNED_BYTE *
  {.importc: "WebGLRenderingContext.UNSIGNED_BYTE", nodecl.}: float
var WebGLRenderingContextUNSIGNED_INT* {.importc: "WebGLRenderingContext.UNSIGNED_INT",
    nodecl.}: float
var WebGLRenderingContextUNSIGNED_SHORT *
  {.importc: "WebGLRenderingContext.UNSIGNED_SHORT", nodecl.}: float
var WebGLRenderingContextUNSIGNED_SHORT_4_4_4_4 *
  {.importc: "WebGLRenderingContext.UNSIGNED_SHORT_4_4_4_4", nodecl.}: float
var WebGLRenderingContextUNSIGNED_SHORT_5_5_5_1 *
  {.importc: "WebGLRenderingContext.UNSIGNED_SHORT_5_5_5_1", nodecl.}: float
var WebGLRenderingContextUNSIGNED_SHORT_5_6_5 *
  {.importc: "WebGLRenderingContext.UNSIGNED_SHORT_5_6_5", nodecl.}: float
var WebGLRenderingContextVALIDATE_STATUS *
  {.importc: "WebGLRenderingContext.VALIDATE_STATUS", nodecl.}: float
var WebGLRenderingContextVENDOR* {.importc: "WebGLRenderingContext.VENDOR",
    nodecl.}: float
var WebGLRenderingContextVERSION* {.importc: "WebGLRenderingContext.VERSION",
    nodecl.}: float
var WebGLRenderingContextVERTEX_ATTRIB_ARRAY_BUFFER_BINDING *
  {.importc: "WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING",
    nodecl.}: float
var WebGLRenderingContextVERTEX_ATTRIB_ARRAY_ENABLED *
  {.importc: "WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_ENABLED",
    nodecl.}: float
var WebGLRenderingContextVERTEX_ATTRIB_ARRAY_NORMALIZED *
  {.importc: "WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_NORMALIZED",
    nodecl.}: float
var WebGLRenderingContextVERTEX_ATTRIB_ARRAY_POINTER *
  {.importc: "WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_POINTER",
    nodecl.}: float
var WebGLRenderingContextVERTEX_ATTRIB_ARRAY_SIZE *
  {.importc: "WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_SIZE", nodecl.}: float
var WebGLRenderingContextVERTEX_ATTRIB_ARRAY_STRIDE *
  {.importc: "WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_STRIDE", nodecl.}: float
var WebGLRenderingContextVERTEX_ATTRIB_ARRAY_TYPE *
  {.importc: "WebGLRenderingContext.VERTEX_ATTRIB_ARRAY_TYPE", nodecl.}: float
var WebGLRenderingContextVERTEX_SHADER *
  {.importc: "WebGLRenderingContext.VERTEX_SHADER", nodecl.}: float
var WebGLRenderingContextVIEWPORT* {.importc: "WebGLRenderingContext.VIEWPORT",
    nodecl.}: float
var WebGLRenderingContextZERO* {.importc: "WebGLRenderingContext.ZERO",
    nodecl.}: float

type WebKitCSSMatrix* {.importc.} = ref object of RootObj
  a* {.importc.}: float
  b* {.importc.}: float
  c* {.importc.}: float
  d* {.importc.}: float
  e* {.importc.}: float
  f* {.importc.}: float
  m11* {.importc.}: float
  m12* {.importc.}: float
  m13* {.importc.}: float
  m14* {.importc.}: float
  m21* {.importc.}: float
  m22* {.importc.}: float
  m23* {.importc.}: float
  m24* {.importc.}: float
  m31* {.importc.}: float
  m32* {.importc.}: float
  m33* {.importc.}: float
  m34* {.importc.}: float
  m41* {.importc.}: float
  m42* {.importc.}: float
  m43* {.importc.}: float
  m44* {.importc.}: float
proc newWebKitCSSMatrix*(text: cstring): WebKitCSSMatrix {.importcpp: "new WebKitCSSMatrix(@)".}
proc inverse*(self: WebKitCSSMatrix): WebKitCSSMatrix {.importcpp.}
proc multiply*(self: WebKitCSSMatrix, secondMatrix: WebKitCSSMatrix): WebKitCSSMatrix {.importcpp.}
proc rotate*(self: WebKitCSSMatrix, angleX: float, angleY: float,
    angleZ: float): WebKitCSSMatrix {.importcpp.}
proc rotateAxisAngle*(self: WebKitCSSMatrix, x: float, y: float, z: float,
    angle: float): WebKitCSSMatrix {.importcpp.}
proc scale*(self: WebKitCSSMatrix, scaleX: float, scaleY: float,
    scaleZ: float): WebKitCSSMatrix {.importcpp.}
proc setMatrixValue*(self: WebKitCSSMatrix, value: cstring): void {.importcpp.}
proc skewX*(self: WebKitCSSMatrix, angle: float): WebKitCSSMatrix {.importcpp.}
proc skewY*(self: WebKitCSSMatrix, angle: float): WebKitCSSMatrix {.importcpp.}
proc toString*(self: WebKitCSSMatrix): cstring {.importcpp.}
proc translate*(self: WebKitCSSMatrix, x: float, y: float,
    z: float): WebKitCSSMatrix {.importcpp.}

type WebSocket* {.importc.} = ref object of EventTarget
  binaryType* {.importc.}: cstring
  bufferedAmount* {.importc.}: float
  extensions* {.importc.}: cstring
  protocol* {.importc.}: cstring
  readyState* {.importc.}: float
  url* {.importc.}: cstring
  CLOSED* {.importc.}: float
  CLOSING* {.importc.}: float
  CONNECTING* {.importc.}: float
  OPEN* {.importc.}: float
proc close*(self: WebSocket, code: float, reason: cstring): void {.importcpp.}
proc addEventListener*(self: WebSocket, xType: cstring, listener: EventListener,
    useCapture: bool): void {.importcpp.}
proc addEventListener*(self: WebSocket, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var WebSocketCLOSED* {.importc: "WebSocket.CLOSED", nodecl.}: float
var WebSocketCLOSING* {.importc: "WebSocket.CLOSING", nodecl.}: float
var WebSocketCONNECTING* {.importc: "WebSocket.CONNECTING", nodecl.}: float
var WebSocketOPEN* {.importc: "WebSocket.OPEN", nodecl.}: float

type WheelEvent* {.importc.} = ref object of MouseEvent
  deltaMode* {.importc.}: float
  deltaX* {.importc.}: float
  deltaY* {.importc.}: float
  deltaZ* {.importc.}: float
  DOM_DELTA_LINE* {.importc.}: float
  DOM_DELTA_PAGE* {.importc.}: float
  DOM_DELTA_PIXEL* {.importc.}: float
proc newWheelEvent*(typeArg: cstring, eventInitDict: WheelEventInit): WheelEvent {.importcpp: "new WheelEvent(@)".}
proc getCurrentPoint*(self: WheelEvent, element: Element): void {.importcpp.}
proc initWheelEvent*(self: WheelEvent, typeArg: cstring, canBubbleArg: bool,
    cancelableArg: bool, viewArg: Window, detailArg: float, screenXArg: float,
    screenYArg: float, clientXArg: float, clientYArg: float, buttonArg: float,
    relatedTargetArg: EventTarget, modifiersListArg: cstring, deltaXArg: float,
    deltaYArg: float, deltaZArg: float, deltaMode: float): void {.importcpp.}
var WheelEventDOM_DELTA_LINE* {.importc: "WheelEvent.DOM_DELTA_LINE",
    nodecl.}: float
var WheelEventDOM_DELTA_PAGE* {.importc: "WheelEvent.DOM_DELTA_PAGE",
    nodecl.}: float
var WheelEventDOM_DELTA_PIXEL* {.importc: "WheelEvent.DOM_DELTA_PIXEL",
    nodecl.}: float

type Worker* {.importc.} = ref object of EventTarget
proc newWorker*(stringUrl: cstring): Worker {.importcpp: "new Worker(@)".}
proc terminate*(self: Worker): void {.importcpp.}
proc addEventListener*(self: Worker, xType: cstring, listener: EventListener,
    useCapture: bool): void {.importcpp.}
proc addEventListener*(self: Worker, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type XMLDocument* {.importc.} = ref object of Document
proc newXMLDocument*(): XMLDocument {.importcpp: "new XMLDocument".}

type XMLHttpRequestUpload* {.importc.} = ref object of EventTarget
proc addEventListener*(self: XMLHttpRequestUpload, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: XMLHttpRequestUpload, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
proc XMLHttpRequestUploadAddEventListener*(xType: cstring,
    listener: EventListener,
    useCapture: bool): void {.importc: "XMLHttpRequestUpload.addEventListener".}
proc XMLHttpRequestUploadAddEventListener*(xType: cstring,
    listener: EventListenerObject,
    useCapture: bool): void {.importc: "XMLHttpRequestUpload.addEventListener".}

type XMLHttpRequest* {.importc.} = ref object of EventTarget
  msCaching* {.importc.}: cstring
  readyState* {.importc.}: float
  responseText* {.importc.}: cstring
  responseType* {.importc.}: cstring
  status* {.importc.}: float
  statusText* {.importc.}: cstring
  timeout* {.importc.}: float
  upload* {.importc.}: XMLHttpRequestUpload
  withCredentials* {.importc.}: bool
  DONE* {.importc.}: float
  HEADERS_RECEIVED* {.importc.}: float
  LOADING* {.importc.}: float
  OPENED* {.importc.}: float
  UNSENT* {.importc.}: float
proc newXMLHttpRequest*(): XMLHttpRequest {.importcpp: "new XMLHttpRequest".}
proc abort*(self: XMLHttpRequest): void {.importcpp.}
proc getAllResponseHeaders*(self: XMLHttpRequest): cstring {.importcpp.}
proc getResponseHeader*(self: XMLHttpRequest,
    header: cstring): cstring {.importcpp.}
proc msCachingEnabled*(self: XMLHttpRequest): bool {.importcpp.}
proc open*(self: XMLHttpRequest, xMethod: cstring, url: cstring, async: bool,
    user: cstring, password: cstring): void {.importcpp.}
proc overrideMimeType*(self: XMLHttpRequest, mime: cstring): void {.importcpp.}
proc send*(self: XMLHttpRequest, data: Document): void {.importcpp.}
proc send*(self: XMLHttpRequest, data: cstring): void {.importcpp.}
proc setRequestHeader*(self: XMLHttpRequest, header: cstring,
    value: cstring): void {.importcpp.}
proc addEventListener*(self: XMLHttpRequest, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: XMLHttpRequest, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}
var XMLHttpRequestDONE* {.importc: "XMLHttpRequest.DONE", nodecl.}: float
var XMLHttpRequestHEADERS_RECEIVED* {.importc: "XMLHttpRequest.HEADERS_RECEIVED",
    nodecl.}: float
var XMLHttpRequestLOADING* {.importc: "XMLHttpRequest.LOADING", nodecl.}: float
var XMLHttpRequestOPENED* {.importc: "XMLHttpRequest.OPENED", nodecl.}: float
var XMLHttpRequestUNSENT* {.importc: "XMLHttpRequest.UNSENT", nodecl.}: float
proc XMLHttpRequestCreate*(): XMLHttpRequest {.importc: "XMLHttpRequest.create".}

type XMLSerializer* {.importc.} = ref object of RootObj
proc newXMLSerializer*(): XMLSerializer {.importcpp: "new XMLSerializer".}
proc serializeToString*(self: XMLSerializer,
    target: Node): cstring {.importcpp.}

type XPathEvaluator* {.importc.} = ref object of RootObj
proc newXPathEvaluator*(): XPathEvaluator {.importcpp: "new XPathEvaluator".}
proc createExpression*(self: XPathEvaluator, expression: cstring,
    resolver: XPathNSResolver): XPathExpression {.importcpp.}
proc createNSResolver*(self: XPathEvaluator,
    nodeResolver: Node): XPathNSResolver {.importcpp.}
proc evaluate*(self: XPathEvaluator, expression: cstring, contextNode: Node,
    resolver: XPathNSResolver, xType: float,
    result: XPathResult): XPathResult {.importcpp.}

type XSLTProcessor* {.importc.} = ref object of RootObj
proc newXSLTProcessor*(): XSLTProcessor {.importcpp: "new XSLTProcessor".}
proc clearParameters*(self: XSLTProcessor): void {.importcpp.}
proc importStylesheet*(self: XSLTProcessor, style: Node): void {.importcpp.}
proc removeParameter*(self: XSLTProcessor, namespaceURI: cstring,
    localName: cstring): void {.importcpp.}
proc reset*(self: XSLTProcessor): void {.importcpp.}
proc transformToDocument*(self: XSLTProcessor,
    source: Node): Document {.importcpp.}
proc transformToFragment*(self: XSLTProcessor, source: Node,
    document: Document): DocumentFragment {.importcpp.}

type AbstractWorker* {.importc.} = ref object of RootObj
proc addEventListener*(self: AbstractWorker, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: AbstractWorker, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type ChildNode* {.importc.} = ref object of RootObj
proc remove*(self: ChildNode): void {.importcpp.}

type DOML2DeprecatedColorProperty* {.importc.} = ref object of RootObj
  color* {.importc.}: cstring

type DOML2DeprecatedSizeProperty* {.importc.} = ref object of RootObj
  size* {.importc.}: float

type DocumentEvent* {.importc.} = ref object of RootObj
proc createEvent*(self: DocumentEvent, eventInterface: cstring): Event {.importcpp.}

type ElementTraversal* {.importc.} = ref object of RootObj
  childElementCount* {.importc.}: float
  firstElementChild* {.importc.}: Element
  lastElementChild* {.importc.}: Element
  nextElementSibling* {.importc.}: Element
  previousElementSibling* {.importc.}: Element

type GetSVGDocument* {.importc.} = ref object of RootObj
proc getSVGDocument*(self: GetSVGDocument): Document {.importcpp.}

type GlobalEventHandlers* {.importc.} = ref object of RootObj
proc addEventListener*(self: GlobalEventHandlers, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: GlobalEventHandlers, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type HTMLTableAlignment* {.importc.} = ref object of RootObj
  ch* {.importc.}: cstring
  chOff* {.importc.}: cstring
  vAlign* {.importc.}: cstring

type IDBEnvironment* {.importc.} = ref object of RootObj
  indexedDB* {.importc.}: IDBFactory
  msIndexedDB* {.importc.}: IDBFactory

type LinkStyle* {.importc.} = ref object of RootObj
  sheet* {.importc.}: StyleSheet

type MSBaseReader* {.importc.} = ref object of RootObj
  readyState* {.importc.}: float
  DONE* {.importc.}: float
  EMPTY* {.importc.}: float
  LOADING* {.importc.}: float
proc abort*(self: MSBaseReader): void {.importcpp.}
proc addEventListener*(self: MSBaseReader, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: MSBaseReader, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type MSFileSaver* {.importc.} = ref object of RootObj

type MSNavigatorDoNotTrack* {.importc.} = ref object of RootObj
proc confirmSiteSpecificTrackingException*(self: MSNavigatorDoNotTrack,
    args: ConfirmSiteSpecificExceptionsInformation): bool {.importcpp.}
proc confirmWebWideTrackingException*(self: MSNavigatorDoNotTrack,
    args: ExceptionInformation): bool {.importcpp.}
proc removeSiteSpecificTrackingException*(self: MSNavigatorDoNotTrack,
    args: ExceptionInformation): void {.importcpp.}
proc removeWebWideTrackingException*(self: MSNavigatorDoNotTrack,
    args: ExceptionInformation): void {.importcpp.}
proc storeSiteSpecificTrackingException*(self: MSNavigatorDoNotTrack,
    args: StoreSiteSpecificExceptionsInformation): void {.importcpp.}
proc storeWebWideTrackingException*(self: MSNavigatorDoNotTrack,
    args: StoreExceptionsInformation): void {.importcpp.}

type NavigatorContentUtils* {.importc.} = ref object of RootObj

type NavigatorGeolocation* {.importc.} = ref object of RootObj
  geolocation* {.importc.}: Geolocation

type NavigatorID* {.importc.} = ref object of RootObj
  appName* {.importc.}: cstring
  appVersion* {.importc.}: cstring
  platform* {.importc.}: cstring
  product* {.importc.}: cstring
  productSub* {.importc.}: cstring
  userAgent* {.importc.}: cstring
  vendor* {.importc.}: cstring
  vendorSub* {.importc.}: cstring

type NavigatorOnLine* {.importc.} = ref object of RootObj
  onLine* {.importc.}: bool

type NavigatorStorageUtils* {.importc.} = ref object of RootObj

type NodeSelector* {.importc.} = ref object of RootObj
proc querySelector*(self: NodeSelector, selectors: cstring): Element {.importcpp.}

type RandomSource* {.importc.} = ref object of RootObj
proc getRandomValues*(self: RandomSource,
    array: ArrayBufferView): ArrayBufferView {.importcpp.}

type SVGAnimatedPathData* {.importc.} = ref object of RootObj
  pathSegList* {.importc.}: SVGPathSegList

type SVGAnimatedPoints* {.importc.} = ref object of RootObj
  animatedPoints* {.importc.}: SVGPointList
  points* {.importc.}: SVGPointList

type SVGExternalResourcesRequired* {.importc.} = ref object of RootObj
  externalResourcesRequired* {.importc.}: SVGAnimatedBoolean

type SVGStylable* {.importc.} = ref object of RootObj
  style* {.importc.}: CSSStyleDeclaration
proc newSVGStylable*(): SVGStylable {.importcpp: "new SVGStylable".}

type SVGFilterPrimitiveStandardAttributes *
  {.importc.} = ref object of SVGStylable
  height* {.importc.}: SVGAnimatedLength
  result* {.importc.}: SVGAnimatedString
  width* {.importc.}: SVGAnimatedLength
  x* {.importc.}: SVGAnimatedLength
  y* {.importc.}: SVGAnimatedLength

type SVGFitToViewBox* {.importc.} = ref object of RootObj
  preserveAspectRatio* {.importc.}: SVGAnimatedPreserveAspectRatio
  viewBox* {.importc.}: SVGAnimatedRect

type SVGLangSpace* {.importc.} = ref object of RootObj
  xmllang* {.importc.}: cstring
  xmlspace* {.importc.}: cstring

type SVGLocatable* {.importc.} = ref object of RootObj
  farthestViewportElement* {.importc.}: SVGElement
  nearestViewportElement* {.importc.}: SVGElement
proc getBBox*(self: SVGLocatable): SVGRect {.importcpp.}
proc getCTM*(self: SVGLocatable): SVGMatrix {.importcpp.}
proc getScreenCTM*(self: SVGLocatable): SVGMatrix {.importcpp.}
proc getTransformToElement*(self: SVGLocatable,
    element: SVGElement): SVGMatrix {.importcpp.}

type SVGTests* {.importc.} = ref object of RootObj
  requiredExtensions* {.importc.}: SVGStringList
  requiredFeatures* {.importc.}: SVGStringList
  systemLanguage* {.importc.}: SVGStringList
proc hasExtension*(self: SVGTests, extension: cstring): bool {.importcpp.}

type SVGTransformable* {.importc.} = ref object of SVGLocatable
  transform* {.importc.}: SVGAnimatedTransformList

type SVGURIReference* {.importc.} = ref object of RootObj
  href* {.importc.}: SVGAnimatedString

type WindowBase64* {.importc.} = ref object of RootObj
proc atob*(self: WindowBase64, encodedString: cstring): cstring {.importcpp.}
proc btoa*(self: WindowBase64, rawString: cstring): cstring {.importcpp.}

type WindowConsole* {.importc.} = ref object of RootObj
  console* {.importc.}: Console

type WindowLocalStorage* {.importc.} = ref object of RootObj
  localStorage* {.importc.}: Storage

type WindowSessionStorage* {.importc.} = ref object of RootObj
  sessionStorage* {.importc.}: Storage

type WindowTimers* {.importc.} = ref object of Object
proc clearInterval*(self: WindowTimers, handle: float): void {.importcpp.}
proc clearTimeout*(self: WindowTimers, handle: float): void {.importcpp.}

type WindowTimersExtension* {.importc.} = ref object of RootObj
proc clearImmediate*(self: WindowTimersExtension,
    handle: float): void {.importcpp.}
proc msClearImmediate*(self: WindowTimersExtension,
    handle: float): void {.importcpp.}

type XMLHttpRequestEventTarget* {.importc.} = ref object of RootObj
proc addEventListener*(self: XMLHttpRequestEventTarget, xType: cstring,
    listener: EventListener, useCapture: bool): void {.importcpp.}
proc addEventListener*(self: XMLHttpRequestEventTarget, xType: cstring,
    listener: EventListenerObject, useCapture: bool): void {.importcpp.}

type StorageEventInit* {.importc.} = ref object of EventInit
  key* {.importc.}: cstring
  oldValue* {.importc.}: cstring
  newValue* {.importc.}: cstring
  url* {.importc.}: cstring
  storageArea* {.importc.}: Storage

type IDBIndexParameters* {.importc.} = ref object of RootObj
  unique* {.importc.}: bool
  multiEntry* {.importc.}: bool

type NodeListOf* {.importc.} = ref object of NodeList

type BlobPropertyBag* {.importc.} = ref object of RootObj
  xType* {.importc: "type".}: cstring
  endings* {.importc.}: cstring

type FilePropertyBag* {.importc.} = ref object of RootObj
  xType* {.importc: "type".}: cstring
  lastModified* {.importc.}: float

type MessageEventInit* {.importc.} = ref object of EventInit
  origin* {.importc.}: cstring
  lastEventId* {.importc.}: cstring
  channel* {.importc.}: cstring

type ProgressEventInit* {.importc.} = ref object of EventInit
  lengthComputable* {.importc.}: bool
  loaded* {.importc.}: float
  total* {.importc.}: float

type HTMLTemplateElement* {.importc.} = ref object of HTMLElement
  content* {.importc.}: DocumentFragment
proc newHTMLTemplateElement*(): HTMLTemplateElement {.importcpp: "new HTMLTemplateElement".}

type HTMLPictureElement* {.importc.} = ref object of HTMLElement
proc newHTMLPictureElement*(): HTMLPictureElement {.importcpp: "new HTMLPictureElement".}

type MSUnsafeFunctionCallback* {.importc.} = ref object of RootObj

type MSExecAtPriorityFunctionCallback* {.importc.} = ref object of RootObj
proc newMSExecAtPriorityFunctionCallback*(): MSExecAtPriorityFunctionCallback {.importcpp: "new MSExecAtPriorityFunctionCallback".}

var animationStartTime* {.importc, nodecl.}: float

var applicationCache* {.importc, nodecl.}: ApplicationCache

var clientInformation* {.importc, nodecl.}: Navigator

var closed* {.importc, nodecl.}: bool

var crypto* {.importc, nodecl.}: Crypto

var defaultStatus* {.importc, nodecl.}: cstring

var devicePixelRatio* {.importc, nodecl.}: float

var doNotTrack* {.importc, nodecl.}: cstring

var document* {.importc, nodecl.}: Document

var event* {.importc, nodecl.}: Event

var external* {.importc, nodecl.}: External

var frameElement* {.importc, nodecl.}: Element

var frames* {.importc, nodecl.}: Window

var history* {.importc, nodecl.}: History

var innerHeight* {.importc, nodecl.}: float

var innerWidth* {.importc, nodecl.}: float

var length* {.importc, nodecl.}: float

var location* {.importc, nodecl.}: Location

var locationbar* {.importc, nodecl.}: BarProp

var menubar* {.importc, nodecl.}: BarProp

var msAnimationStartTime* {.importc, nodecl.}: float

var name* {.importc, nodecl.}: cstring

var navigator* {.importc, nodecl.}: Navigator

var onerror* {.importc, nodecl.}: ErrorEventHandler

var opener* {.importc, nodecl.}: Window

var outerHeight* {.importc, nodecl.}: float

var outerWidth* {.importc, nodecl.}: float

var pageXOffset* {.importc, nodecl.}: float

var pageYOffset* {.importc, nodecl.}: float

var parent* {.importc, nodecl.}: Window

var performance* {.importc, nodecl.}: Performance

var personalbar* {.importc, nodecl.}: BarProp

var screen* {.importc, nodecl.}: Screen

var screenLeft* {.importc, nodecl.}: float

var screenTop* {.importc, nodecl.}: float

var screenX* {.importc, nodecl.}: float

var screenY* {.importc, nodecl.}: float

var scrollX* {.importc, nodecl.}: float

var scrollY* {.importc, nodecl.}: float

var scrollbars* {.importc, nodecl.}: BarProp

var self* {.importc, nodecl.}: Window

var status* {.importc, nodecl.}: cstring

var statusbar* {.importc, nodecl.}: BarProp

var styleMedia* {.importc, nodecl.}: StyleMedia

var toolbar* {.importc, nodecl.}: BarProp

var top* {.importc, nodecl.}: Window

var window* {.importc, nodecl.}: Window

proc blur*(): void {.importc.}

proc cancelAnimationFrame*(handle: float): void {.importc.}

proc captureEvents*(): void {.importc.}

proc close*(): void {.importc.}

proc confirm*(message: cstring): bool {.importc.}

proc focus*(): void {.importc.}

proc getComputedStyle*(elt: Element, pseudoElt: cstring): CSSStyleDeclaration {.importc.}

proc getMatchedCSSRules*(elt: Element, pseudoElt: cstring): CSSRuleList {.importc.}

proc getSelection*(): Selection {.importc.}

proc matchMedia*(mediaQuery: cstring): MediaQueryList {.importc.}

proc moveBy*(x: float, y: float): void {.importc.}

proc moveTo*(x: float, y: float): void {.importc.}

proc msCancelRequestAnimationFrame*(handle: float): void {.importc.}

proc msMatchMedia*(mediaQuery: cstring): MediaQueryList {.importc.}

proc msRequestAnimationFrame*(callback: FrameRequestCallback): float {.importc.}

proc msWriteProfilerMark*(profilerMarkName: cstring): void {.importc.}

proc open*(url: cstring, target: cstring, features: cstring,
    replace: bool): Window {.importc.}

proc print*(): void {.importc.}

proc prompt*(message: cstring, zDefault: cstring): cstring {.importc.}

proc releaseEvents*(): void {.importc.}

proc requestAnimationFrame*(callback: FrameRequestCallback): float {.importc.}

proc resizeBy*(x: float, y: float): void {.importc.}

proc resizeTo*(x: float, y: float): void {.importc.}

proc scroll*(x: float, y: float): void {.importc.}

proc scrollBy*(x: float, y: float): void {.importc.}

proc scrollTo*(x: float, y: float): void {.importc.}

proc webkitConvertPointFromNodeToPage*(node: Node,
    pt: WebKitPoint): WebKitPoint {.importc.}

proc webkitConvertPointFromPageToNode*(node: Node,
    pt: WebKitPoint): WebKitPoint {.importc.}

proc toString*(): cstring {.importc.}

proc addEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc.}
proc addEventListener*(xType: cstring, listener: EventListenerObject,
    useCapture: bool): void {.importc.}

proc dispatchEvent*(evt: Event): bool {.importc.}

proc removeEventListener*(xType: cstring, listener: EventListener,
    useCapture: bool): void {.importc.}
proc removeEventListener*(xType: cstring, listener: EventListenerObject,
    useCapture: bool): void {.importc.}

proc clearInterval*(handle: float): void {.importc.}

proc clearTimeout*(handle: float): void {.importc.}

proc clearImmediate*(handle: float): void {.importc.}

proc msClearImmediate*(handle: float): void {.importc.}

var sessionStorage* {.importc, nodecl.}: Storage

var localStorage* {.importc, nodecl.}: Storage

var console* {.importc, nodecl.}: Console

var indexedDB* {.importc, nodecl.}: IDBFactory

var msIndexedDB* {.importc, nodecl.}: IDBFactory

proc atob*(encodedString: cstring): cstring {.importc.}

proc btoa*(rawString: cstring): cstring {.importc.}

type ActiveXObject* {.importc.} = ref object of RootObj
proc newActiveXObject*(s: cstring): ActiveXObject {.importcpp: "new ActiveXObject(@)".}

type ITextWriter* {.importc.} = ref object of RootObj
proc Write*(self: ITextWriter, s: cstring): void {.importcpp.}
proc WriteLine*(self: ITextWriter, s: cstring): void {.importcpp.}
proc Close*(self: ITextWriter): void {.importcpp.}

type TextStreamBase* {.importc.} = ref object of RootObj
  Column* {.importc.}: float
  Line* {.importc.}: float
proc Close*(self: TextStreamBase): void {.importcpp.}

type TextStreamWriter* {.importc.} = ref object of TextStreamBase
proc Write*(self: TextStreamWriter, s: cstring): void {.importcpp.}
proc WriteBlankLines*(self: TextStreamWriter,
    intLines: float): void {.importcpp.}
proc WriteLine*(self: TextStreamWriter, s: cstring): void {.importcpp.}

type TextStreamReader* {.importc.} = ref object of TextStreamBase
  AtEndOfLine* {.importc.}: bool
  AtEndOfStream* {.importc.}: bool
proc Read*(self: TextStreamReader, characters: float): cstring {.importcpp.}
proc ReadAll*(self: TextStreamReader): cstring {.importcpp.}
proc ReadLine*(self: TextStreamReader): cstring {.importcpp.}
proc Skip*(self: TextStreamReader, characters: float): void {.importcpp.}
proc SkipLine*(self: TextStreamReader): void {.importcpp.}

type Enumerator* {.importc.} = ref object of RootObj
proc atEnd*(self: Enumerator): bool {.importcpp.}
proc moveFirst*(self: Enumerator): void {.importcpp.}
proc moveNext*(self: Enumerator): void {.importcpp.}

type VBArray* {.importc.} = ref object of RootObj
proc dimensions*(self: VBArray): float {.importcpp.}
proc lbound*(self: VBArray, dimension: float): float {.importcpp.}
proc ubound*(self: VBArray, dimension: float): float {.importcpp.}
